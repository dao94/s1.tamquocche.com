<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: bupb/avoid.proto
//   Date: 2014-12-19 08:23:04

namespace bupb {

  class Avoid extends \DrSlump\Protobuf\Message {

    /**  @var int[]  */
    public $srcList = array();
    
    /**  @var int */
    public $type = null;
    
    /**  @var int */
    public $flag = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bupb.Avoid');

      // REPEATED INT32 srcList = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "srcList";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REQUIRED INT32 type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 flag = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <srcList> has a value
     *
     * @return boolean
     */
    public function hasSrcList(){
      return $this->_has(1);
    }
    
    /**
     * Clear <srcList> value
     *
     * @return \bupb\Avoid
     */
    public function clearSrcList(){
      return $this->_clear(1);
    }
    
    /**
     * Get <srcList> value
     *
     * @param int $idx
     * @return int
     */
    public function getSrcList($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <srcList> value
     *
     * @param int $value
     * @return \bupb\Avoid
     */
    public function setSrcList( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <srcList>
     *
     * @return int[]
     */
    public function getSrcListList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <srcList>
     *
     * @param int $value
     * @return \bupb\Avoid
     */
    public function addSrcList( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \bupb\Avoid
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \bupb\Avoid
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(3);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \bupb\Avoid
     */
    public function clearFlag(){
      return $this->_clear(3);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(3);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \bupb\Avoid
     */
    public function setFlag( $value){
      return $this->_set(3, $value);
    }
  }
}

