<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: bupb/titleAchieve.proto
//   Date: 2013-07-25 02:58:14

namespace bupb {

	class TitleAchieve extends \DrSlump\Protobuf\Message {

		/**  @var int[]  */
		public $charId = array();

		/**  @var int[]  */
		public $title = array();

		/**  @var int[]  */
		public $achieve = array();


		/** @var \Closure[] */
		protected static $__extensions = array();

		public static function descriptor()
		{
			$descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bupb.TitleAchieve');

			// REPEATED INT32 charId = 1
			$f = new \DrSlump\Protobuf\Field();
			$f->number    = 1;
			$f->name      = "charId";
			$f->type      = \DrSlump\Protobuf::TYPE_INT32;
			$f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
			$descriptor->addField($f);

			// REPEATED INT32 title = 2
			$f = new \DrSlump\Protobuf\Field();
			$f->number    = 2;
			$f->name      = "title";
			$f->type      = \DrSlump\Protobuf::TYPE_INT32;
			$f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
			$descriptor->addField($f);

			// REPEATED INT32 achieve = 3
			$f = new \DrSlump\Protobuf\Field();
			$f->number    = 3;
			$f->name      = "achieve";
			$f->type      = \DrSlump\Protobuf::TYPE_INT32;
			$f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
			$descriptor->addField($f);

			foreach (self::$__extensions as $cb) {
				$descriptor->addField($cb(), true);
			}

			return $descriptor;
		}

		/**
		 * Check if <charId> has a value
		 *
		 * @return boolean
		 */
		public function hasCharId(){
			return $this->_has(1);
		}

		/**
		 * Clear <charId> value
		 *
		 * @return \bupb\TitleAchieve
		 */
		public function clearCharId(){
			return $this->_clear(1);
		}

		/**
		 * Get <charId> value
		 *
		 * @param int $idx
		 * @return int
		 */
		public function getCharId($idx = NULL){
			return $this->_get(1, $idx);
		}

		/**
		 * Set <charId> value
		 *
		 * @param int $value
		 * @return \bupb\TitleAchieve
		 */
		public function setCharId( $value, $idx = NULL){
			return $this->_set(1, $value, $idx);
		}

		/**
		 * Get all elements of <charId>
		 *
		 * @return int[]
		 */
		public function getCharIdList(){
			return $this->_get(1);
		}

		/**
		 * Add a new element to <charId>
		 *
		 * @param int $value
		 * @return \bupb\TitleAchieve
		 */
		public function addCharId( $value){
			return $this->_add(1, $value);
		}

		/**
		 * Check if <title> has a value
		 *
		 * @return boolean
		 */
		public function hasTitle(){
			return $this->_has(2);
		}

		/**
		 * Clear <title> value
		 *
		 * @return \bupb\TitleAchieve
		 */
		public function clearTitle(){
			return $this->_clear(2);
		}

		/**
		 * Get <title> value
		 *
		 * @param int $idx
		 * @return int
		 */
		public function getTitle($idx = NULL){
			return $this->_get(2, $idx);
		}

		/**
		 * Set <title> value
		 *
		 * @param int $value
		 * @return \bupb\TitleAchieve
		 */
		public function setTitle( $value, $idx = NULL){
			return $this->_set(2, $value, $idx);
		}

		/**
		 * Get all elements of <title>
		 *
		 * @return int[]
		 */
		public function getTitleList(){
			return $this->_get(2);
		}

		/**
		 * Add a new element to <title>
		 *
		 * @param int $value
		 * @return \bupb\TitleAchieve
		 */
		public function addTitle( $value){
			return $this->_add(2, $value);
		}

		/**
		 * Check if <achieve> has a value
		 *
		 * @return boolean
		 */
		public function hasAchieve(){
			return $this->_has(3);
		}

		/**
		 * Clear <achieve> value
		 *
		 * @return \bupb\TitleAchieve
		 */
		public function clearAchieve(){
			return $this->_clear(3);
		}

		/**
		 * Get <achieve> value
		 *
		 * @param int $idx
		 * @return int
		 */
		public function getAchieve($idx = NULL){
			return $this->_get(3, $idx);
		}

		/**
		 * Set <achieve> value
		 *
		 * @param int $value
		 * @return \bupb\TitleAchieve
		 */
		public function setAchieve( $value, $idx = NULL){
			return $this->_set(3, $value, $idx);
		}

		/**
		 * Get all elements of <achieve>
		 *
		 * @return int[]
		 */
		public function getAchieveList(){
			return $this->_get(3);
		}

		/**
		 * Add a new element to <achieve>
		 *
		 * @param int $value
		 * @return \bupb\TitleAchieve
		 */
		public function addAchieve( $value){
			return $this->_add(3, $value);
		}
	}
}

