<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: blpb/bllogin.proto
//   Date: 2014-12-19 08:23:01

namespace blpb {

  class CreataAccount extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $account = null;
    
    /**  @var int */
    public $serverId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'blpb.CreataAccount');

      // REQUIRED STRING account = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "account";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 serverId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "serverId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <account> has a value
     *
     * @return boolean
     */
    public function hasAccount(){
      return $this->_has(1);
    }
    
    /**
     * Clear <account> value
     *
     * @return \blpb\CreataAccount
     */
    public function clearAccount(){
      return $this->_clear(1);
    }
    
    /**
     * Get <account> value
     *
     * @return string
     */
    public function getAccount(){
      return $this->_get(1);
    }
    
    /**
     * Set <account> value
     *
     * @param string $value
     * @return \blpb\CreataAccount
     */
    public function setAccount( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <serverId> has a value
     *
     * @return boolean
     */
    public function hasServerId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <serverId> value
     *
     * @return \blpb\CreataAccount
     */
    public function clearServerId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <serverId> value
     *
     * @return int
     */
    public function getServerId(){
      return $this->_get(2);
    }
    
    /**
     * Set <serverId> value
     *
     * @param int $value
     * @return \blpb\CreataAccount
     */
    public function setServerId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace blpb {

  class ControlLine extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $opt = null;
    
    /**  @var int */
    public $type = null;
    
    /**  @var int */
    public $index = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'blpb.ControlLine');

      // REQUIRED INT32 opt = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "opt";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 index = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <opt> has a value
     *
     * @return boolean
     */
    public function hasOpt(){
      return $this->_has(1);
    }
    
    /**
     * Clear <opt> value
     *
     * @return \blpb\ControlLine
     */
    public function clearOpt(){
      return $this->_clear(1);
    }
    
    /**
     * Get <opt> value
     *
     * @return int
     */
    public function getOpt(){
      return $this->_get(1);
    }
    
    /**
     * Set <opt> value
     *
     * @param int $value
     * @return \blpb\ControlLine
     */
    public function setOpt( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \blpb\ControlLine
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \blpb\ControlLine
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(3);
    }
    
    /**
     * Clear <index> value
     *
     * @return \blpb\ControlLine
     */
    public function clearIndex(){
      return $this->_clear(3);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(3);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \blpb\ControlLine
     */
    public function setIndex( $value){
      return $this->_set(3, $value);
    }
  }
}

