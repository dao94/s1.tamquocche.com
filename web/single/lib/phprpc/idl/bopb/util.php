<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/util.proto
//   Date: 2014-12-19 08:23:02

namespace utilpb {

  class SysTime extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $t1 = null;
    
    /**  @var float */
    public $t2 = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SysTime');

      // REQUIRED DOUBLE t1 = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "t1";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE t2 = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "t2";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <t1> has a value
     *
     * @return boolean
     */
    public function hasT1(){
      return $this->_has(1);
    }
    
    /**
     * Clear <t1> value
     *
     * @return \utilpb\SysTime
     */
    public function clearT1(){
      return $this->_clear(1);
    }
    
    /**
     * Get <t1> value
     *
     * @return float
     */
    public function getT1(){
      return $this->_get(1);
    }
    
    /**
     * Set <t1> value
     *
     * @param float $value
     * @return \utilpb\SysTime
     */
    public function setT1( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <t2> has a value
     *
     * @return boolean
     */
    public function hasT2(){
      return $this->_has(2);
    }
    
    /**
     * Clear <t2> value
     *
     * @return \utilpb\SysTime
     */
    public function clearT2(){
      return $this->_clear(2);
    }
    
    /**
     * Get <t2> value
     *
     * @return float
     */
    public function getT2(){
      return $this->_get(2);
    }
    
    /**
     * Set <t2> value
     *
     * @param float $value
     * @return \utilpb\SysTime
     */
    public function setT2( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class RetCode extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $code = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.RetCode');

      // REQUIRED INT32 code = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <code> value
     *
     * @return \utilpb\RetCode
     */
    public function clearCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <code> value
     *
     * @return int
     */
    public function getCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <code> value
     *
     * @param int $value
     * @return \utilpb\RetCode
     */
    public function setCode( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace utilpb {

  class CommonStr extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $stringinfo = "";
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CommonStr');

      // REQUIRED STRING stringinfo = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "stringinfo";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default   = "";
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <stringinfo> has a value
     *
     * @return boolean
     */
    public function hasStringinfo(){
      return $this->_has(1);
    }
    
    /**
     * Clear <stringinfo> value
     *
     * @return \utilpb\CommonStr
     */
    public function clearStringinfo(){
      return $this->_clear(1);
    }
    
    /**
     * Get <stringinfo> value
     *
     * @return string
     */
    public function getStringinfo(){
      return $this->_get(1);
    }
    
    /**
     * Set <stringinfo> value
     *
     * @param string $value
     * @return \utilpb\CommonStr
     */
    public function setStringinfo( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace utilpb {

  class CommonInt extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $intinfo = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CommonInt');

      // REQUIRED INT32 intinfo = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "intinfo";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <intinfo> has a value
     *
     * @return boolean
     */
    public function hasIntinfo(){
      return $this->_has(1);
    }
    
    /**
     * Clear <intinfo> value
     *
     * @return \utilpb\CommonInt
     */
    public function clearIntinfo(){
      return $this->_clear(1);
    }
    
    /**
     * Get <intinfo> value
     *
     * @return int
     */
    public function getIntinfo(){
      return $this->_get(1);
    }
    
    /**
     * Set <intinfo> value
     *
     * @param int $value
     * @return \utilpb\CommonInt
     */
    public function setIntinfo( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace utilpb {

  class CommonIntArray extends \DrSlump\Protobuf\Message {

    /**  @var int[]  */
    public $ints = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CommonIntArray');

      // REPEATED INT32 ints = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "ints";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <ints> has a value
     *
     * @return boolean
     */
    public function hasInts(){
      return $this->_has(1);
    }
    
    /**
     * Clear <ints> value
     *
     * @return \utilpb\CommonIntArray
     */
    public function clearInts(){
      return $this->_clear(1);
    }
    
    /**
     * Get <ints> value
     *
     * @param int $idx
     * @return int
     */
    public function getInts($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <ints> value
     *
     * @param int $value
     * @return \utilpb\CommonIntArray
     */
    public function setInts( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <ints>
     *
     * @return int[]
     */
    public function getIntsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <ints>
     *
     * @param int $value
     * @return \utilpb\CommonIntArray
     */
    public function addInts( $value){
     return $this->_add(1, $value);
    }
  }
}

namespace utilpb {

  class CommonUInt extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $intinfo = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CommonUInt');

      // REQUIRED UINT32 intinfo = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "intinfo";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <intinfo> has a value
     *
     * @return boolean
     */
    public function hasIntinfo(){
      return $this->_has(1);
    }
    
    /**
     * Clear <intinfo> value
     *
     * @return \utilpb\CommonUInt
     */
    public function clearIntinfo(){
      return $this->_clear(1);
    }
    
    /**
     * Get <intinfo> value
     *
     * @return int
     */
    public function getIntinfo(){
      return $this->_get(1);
    }
    
    /**
     * Set <intinfo> value
     *
     * @param int $value
     * @return \utilpb\CommonUInt
     */
    public function setIntinfo( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace utilpb {

  class CommonDouble extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $doubleinfo = 0;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CommonDouble');

      // REQUIRED DOUBLE doubleinfo = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "doubleinfo";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default   = 0;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <doubleinfo> has a value
     *
     * @return boolean
     */
    public function hasDoubleinfo(){
      return $this->_has(1);
    }
    
    /**
     * Clear <doubleinfo> value
     *
     * @return \utilpb\CommonDouble
     */
    public function clearDoubleinfo(){
      return $this->_clear(1);
    }
    
    /**
     * Get <doubleinfo> value
     *
     * @return float
     */
    public function getDoubleinfo(){
      return $this->_get(1);
    }
    
    /**
     * Set <doubleinfo> value
     *
     * @param float $value
     * @return \utilpb\CommonDouble
     */
    public function setDoubleinfo( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace utilpb {

  class ComposeID extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.ComposeID');

      // REQUIRED DOUBLE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return float
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param float $value
     * @return \utilpb\ComposeID
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace utilpb {

  class ComposeObjID extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.ComposeObjID');

      // REQUIRED MESSAGE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\ComposeObjID
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\ComposeObjID
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
  }
}

namespace utilpb {

  class KeyValue extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var int */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.KeyValue');

      // REQUIRED STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \utilpb\KeyValue
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \utilpb\KeyValue
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \utilpb\KeyValue
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return int
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param int $value
     * @return \utilpb\KeyValue
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class IntDouble extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $key = null;
    
    /**  @var float */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.IntDouble');

      // OPTIONAL INT32 key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \utilpb\IntDouble
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return int
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param int $value
     * @return \utilpb\IntDouble
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \utilpb\IntDouble
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return float
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param float $value
     * @return \utilpb\IntDouble
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class IdValue extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.IdValue');

      // REQUIRED INT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\IdValue
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \utilpb\IdValue
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \utilpb\IdValue
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \utilpb\IdValue
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class IdInt extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $key = null;
    
    /**  @var int */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.IdInt');

      // REQUIRED INT32 key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \utilpb\IdInt
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return int
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param int $value
     * @return \utilpb\IdInt
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \utilpb\IdInt
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return int
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param int $value
     * @return \utilpb\IdInt
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class KeyString extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.KeyString');

      // REQUIRED STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \utilpb\KeyString
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \utilpb\KeyString
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \utilpb\KeyString
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \utilpb\KeyString
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class IdDouble extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $key = null;
    
    /**  @var float */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.IdDouble');

      // REQUIRED INT32 key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \utilpb\IdDouble
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return int
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param int $value
     * @return \utilpb\IdDouble
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \utilpb\IdDouble
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return float
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param float $value
     * @return \utilpb\IdDouble
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class KeyDouble extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var float */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.KeyDouble');

      // REQUIRED STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \utilpb\KeyDouble
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \utilpb\KeyDouble
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \utilpb\KeyDouble
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return float
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param float $value
     * @return \utilpb\KeyDouble
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class TableInfo extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $sname = null;
    
    /**  @var int */
    public $iname = null;
    
    /**  @var \utilpb\KeyDouble[]  */
    public $kvalue = array();
    
    /**  @var \utilpb\KeyString[]  */
    public $kstring = array();
    
    /**  @var \utilpb\IdDouble[]  */
    public $iint = array();
    
    /**  @var \utilpb\IdValue[]  */
    public $ivalue = array();
    
    /**  @var \utilpb\TableInfo[]  */
    public $t = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.TableInfo');

      // OPTIONAL STRING sname = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sname";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 iname = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "iname";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE kvalue = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "kvalue";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\KeyDouble';
      $descriptor->addField($f);

      // REPEATED MESSAGE kstring = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "kstring";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\KeyString';
      $descriptor->addField($f);

      // REPEATED MESSAGE iint = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "iint";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\IdDouble';
      $descriptor->addField($f);

      // REPEATED MESSAGE ivalue = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "ivalue";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\IdValue';
      $descriptor->addField($f);

      // REPEATED MESSAGE t = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "t";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\TableInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sname> has a value
     *
     * @return boolean
     */
    public function hasSname(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sname> value
     *
     * @return \utilpb\TableInfo
     */
    public function clearSname(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sname> value
     *
     * @return string
     */
    public function getSname(){
      return $this->_get(1);
    }
    
    /**
     * Set <sname> value
     *
     * @param string $value
     * @return \utilpb\TableInfo
     */
    public function setSname( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <iname> has a value
     *
     * @return boolean
     */
    public function hasIname(){
      return $this->_has(2);
    }
    
    /**
     * Clear <iname> value
     *
     * @return \utilpb\TableInfo
     */
    public function clearIname(){
      return $this->_clear(2);
    }
    
    /**
     * Get <iname> value
     *
     * @return int
     */
    public function getIname(){
      return $this->_get(2);
    }
    
    /**
     * Set <iname> value
     *
     * @param int $value
     * @return \utilpb\TableInfo
     */
    public function setIname( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <kvalue> has a value
     *
     * @return boolean
     */
    public function hasKvalue(){
      return $this->_has(3);
    }
    
    /**
     * Clear <kvalue> value
     *
     * @return \utilpb\TableInfo
     */
    public function clearKvalue(){
      return $this->_clear(3);
    }
    
    /**
     * Get <kvalue> value
     *
     * @param int $idx
     * @return \utilpb\KeyDouble
     */
    public function getKvalue($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <kvalue> value
     *
     * @param \utilpb\KeyDouble $value
     * @return \utilpb\TableInfo
     */
    public function setKvalue(\utilpb\KeyDouble $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <kvalue>
     *
     * @return \utilpb\KeyDouble[]
     */
    public function getKvalueList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <kvalue>
     *
     * @param \utilpb\KeyDouble $value
     * @return \utilpb\TableInfo
     */
    public function addKvalue(\utilpb\KeyDouble $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <kstring> has a value
     *
     * @return boolean
     */
    public function hasKstring(){
      return $this->_has(4);
    }
    
    /**
     * Clear <kstring> value
     *
     * @return \utilpb\TableInfo
     */
    public function clearKstring(){
      return $this->_clear(4);
    }
    
    /**
     * Get <kstring> value
     *
     * @param int $idx
     * @return \utilpb\KeyString
     */
    public function getKstring($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <kstring> value
     *
     * @param \utilpb\KeyString $value
     * @return \utilpb\TableInfo
     */
    public function setKstring(\utilpb\KeyString $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <kstring>
     *
     * @return \utilpb\KeyString[]
     */
    public function getKstringList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <kstring>
     *
     * @param \utilpb\KeyString $value
     * @return \utilpb\TableInfo
     */
    public function addKstring(\utilpb\KeyString $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <iint> has a value
     *
     * @return boolean
     */
    public function hasIint(){
      return $this->_has(5);
    }
    
    /**
     * Clear <iint> value
     *
     * @return \utilpb\TableInfo
     */
    public function clearIint(){
      return $this->_clear(5);
    }
    
    /**
     * Get <iint> value
     *
     * @param int $idx
     * @return \utilpb\IdDouble
     */
    public function getIint($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <iint> value
     *
     * @param \utilpb\IdDouble $value
     * @return \utilpb\TableInfo
     */
    public function setIint(\utilpb\IdDouble $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <iint>
     *
     * @return \utilpb\IdDouble[]
     */
    public function getIintList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <iint>
     *
     * @param \utilpb\IdDouble $value
     * @return \utilpb\TableInfo
     */
    public function addIint(\utilpb\IdDouble $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <ivalue> has a value
     *
     * @return boolean
     */
    public function hasIvalue(){
      return $this->_has(6);
    }
    
    /**
     * Clear <ivalue> value
     *
     * @return \utilpb\TableInfo
     */
    public function clearIvalue(){
      return $this->_clear(6);
    }
    
    /**
     * Get <ivalue> value
     *
     * @param int $idx
     * @return \utilpb\IdValue
     */
    public function getIvalue($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <ivalue> value
     *
     * @param \utilpb\IdValue $value
     * @return \utilpb\TableInfo
     */
    public function setIvalue(\utilpb\IdValue $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <ivalue>
     *
     * @return \utilpb\IdValue[]
     */
    public function getIvalueList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <ivalue>
     *
     * @param \utilpb\IdValue $value
     * @return \utilpb\TableInfo
     */
    public function addIvalue(\utilpb\IdValue $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <t> has a value
     *
     * @return boolean
     */
    public function hasT(){
      return $this->_has(7);
    }
    
    /**
     * Clear <t> value
     *
     * @return \utilpb\TableInfo
     */
    public function clearT(){
      return $this->_clear(7);
    }
    
    /**
     * Get <t> value
     *
     * @param int $idx
     * @return \utilpb\TableInfo
     */
    public function getT($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <t> value
     *
     * @param \utilpb\TableInfo $value
     * @return \utilpb\TableInfo
     */
    public function setT(\utilpb\TableInfo $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <t>
     *
     * @return \utilpb\TableInfo[]
     */
    public function getTList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <t>
     *
     * @param \utilpb\TableInfo $value
     * @return \utilpb\TableInfo
     */
    public function addT(\utilpb\TableInfo $value){
     return $this->_add(7, $value);
    }
  }
}

namespace utilpb {

  class TableDefind extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $svalue = null;
    
    /**  @var int */
    public $ivalue = null;
    
    /**  @var \utilpb\TableInfo */
    public $t = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.TableDefind');

      // OPTIONAL STRING svalue = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "svalue";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 ivalue = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "ivalue";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED MESSAGE t = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "t";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\TableInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <svalue> has a value
     *
     * @return boolean
     */
    public function hasSvalue(){
      return $this->_has(1);
    }
    
    /**
     * Clear <svalue> value
     *
     * @return \utilpb\TableDefind
     */
    public function clearSvalue(){
      return $this->_clear(1);
    }
    
    /**
     * Get <svalue> value
     *
     * @return string
     */
    public function getSvalue(){
      return $this->_get(1);
    }
    
    /**
     * Set <svalue> value
     *
     * @param string $value
     * @return \utilpb\TableDefind
     */
    public function setSvalue( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <ivalue> has a value
     *
     * @return boolean
     */
    public function hasIvalue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <ivalue> value
     *
     * @return \utilpb\TableDefind
     */
    public function clearIvalue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <ivalue> value
     *
     * @return int
     */
    public function getIvalue(){
      return $this->_get(2);
    }
    
    /**
     * Set <ivalue> value
     *
     * @param int $value
     * @return \utilpb\TableDefind
     */
    public function setIvalue( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <t> has a value
     *
     * @return boolean
     */
    public function hasT(){
      return $this->_has(5);
    }
    
    /**
     * Clear <t> value
     *
     * @return \utilpb\TableDefind
     */
    public function clearT(){
      return $this->_clear(5);
    }
    
    /**
     * Get <t> value
     *
     * @return \utilpb\TableInfo
     */
    public function getT(){
      return $this->_get(5);
    }
    
    /**
     * Set <t> value
     *
     * @param \utilpb\TableInfo $value
     * @return \utilpb\TableDefind
     */
    public function setT(\utilpb\TableInfo $value){
      return $this->_set(5, $value);
    }
  }
}

namespace utilpb {

  class ModifyInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var \utilpb\ModifySingle[]  */
    public $info = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.ModifyInfo');

      // REQUIRED INT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\ModifySingle';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\ModifyInfo
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \utilpb\ModifyInfo
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(2);
    }
    
    /**
     * Clear <info> value
     *
     * @return \utilpb\ModifyInfo
     */
    public function clearInfo(){
      return $this->_clear(2);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \utilpb\ModifySingle
     */
    public function getInfo($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \utilpb\ModifySingle $value
     * @return \utilpb\ModifyInfo
     */
    public function setInfo(\utilpb\ModifySingle $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \utilpb\ModifySingle[]
     */
    public function getInfoList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \utilpb\ModifySingle $value
     * @return \utilpb\ModifyInfo
     */
    public function addInfo(\utilpb\ModifySingle $value){
     return $this->_add(2, $value);
    }
  }
}

namespace utilpb {

  class ModifySingle extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\FuzzyType[]  */
    public $name = array();
    
    /**  @var \utilpb\TableInfo */
    public $tvalue = null;
    
    /**  @var int */
    public $ivalue = null;
    
    /**  @var string */
    public $svalue = null;
    
    /**  @var boolean */
    public $empty = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.ModifySingle');

      // REPEATED MESSAGE name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\FuzzyType';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE tvalue = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "tvalue";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\TableInfo';
      $descriptor->addField($f);

      // OPTIONAL INT32 ivalue = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "ivalue";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING svalue = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "svalue";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL empty = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "empty";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\ModifySingle
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return \utilpb\FuzzyType
     */
    public function getName($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param \utilpb\FuzzyType $value
     * @return \utilpb\ModifySingle
     */
    public function setName(\utilpb\FuzzyType $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return \utilpb\FuzzyType[]
     */
    public function getNameList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param \utilpb\FuzzyType $value
     * @return \utilpb\ModifySingle
     */
    public function addName(\utilpb\FuzzyType $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <tvalue> has a value
     *
     * @return boolean
     */
    public function hasTvalue(){
      return $this->_has(3);
    }
    
    /**
     * Clear <tvalue> value
     *
     * @return \utilpb\ModifySingle
     */
    public function clearTvalue(){
      return $this->_clear(3);
    }
    
    /**
     * Get <tvalue> value
     *
     * @return \utilpb\TableInfo
     */
    public function getTvalue(){
      return $this->_get(3);
    }
    
    /**
     * Set <tvalue> value
     *
     * @param \utilpb\TableInfo $value
     * @return \utilpb\ModifySingle
     */
    public function setTvalue(\utilpb\TableInfo $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <ivalue> has a value
     *
     * @return boolean
     */
    public function hasIvalue(){
      return $this->_has(4);
    }
    
    /**
     * Clear <ivalue> value
     *
     * @return \utilpb\ModifySingle
     */
    public function clearIvalue(){
      return $this->_clear(4);
    }
    
    /**
     * Get <ivalue> value
     *
     * @return int
     */
    public function getIvalue(){
      return $this->_get(4);
    }
    
    /**
     * Set <ivalue> value
     *
     * @param int $value
     * @return \utilpb\ModifySingle
     */
    public function setIvalue( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <svalue> has a value
     *
     * @return boolean
     */
    public function hasSvalue(){
      return $this->_has(5);
    }
    
    /**
     * Clear <svalue> value
     *
     * @return \utilpb\ModifySingle
     */
    public function clearSvalue(){
      return $this->_clear(5);
    }
    
    /**
     * Get <svalue> value
     *
     * @return string
     */
    public function getSvalue(){
      return $this->_get(5);
    }
    
    /**
     * Set <svalue> value
     *
     * @param string $value
     * @return \utilpb\ModifySingle
     */
    public function setSvalue( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <empty> has a value
     *
     * @return boolean
     */
    public function hasEmpty(){
      return $this->_has(6);
    }
    
    /**
     * Clear <empty> value
     *
     * @return \utilpb\ModifySingle
     */
    public function clearEmpty(){
      return $this->_clear(6);
    }
    
    /**
     * Get <empty> value
     *
     * @return boolean
     */
    public function getEmpty(){
      return $this->_get(6);
    }
    
    /**
     * Set <empty> value
     *
     * @param boolean $value
     * @return \utilpb\ModifySingle
     */
    public function setEmpty( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace utilpb {

  class FuzzyType extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $ivalue = null;
    
    /**  @var string */
    public $svalue = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.FuzzyType');

      // OPTIONAL INT32 ivalue = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "ivalue";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING svalue = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "svalue";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <ivalue> has a value
     *
     * @return boolean
     */
    public function hasIvalue(){
      return $this->_has(1);
    }
    
    /**
     * Clear <ivalue> value
     *
     * @return \utilpb\FuzzyType
     */
    public function clearIvalue(){
      return $this->_clear(1);
    }
    
    /**
     * Get <ivalue> value
     *
     * @return int
     */
    public function getIvalue(){
      return $this->_get(1);
    }
    
    /**
     * Set <ivalue> value
     *
     * @param int $value
     * @return \utilpb\FuzzyType
     */
    public function setIvalue( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <svalue> has a value
     *
     * @return boolean
     */
    public function hasSvalue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <svalue> value
     *
     * @return \utilpb\FuzzyType
     */
    public function clearSvalue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <svalue> value
     *
     * @return string
     */
    public function getSvalue(){
      return $this->_get(2);
    }
    
    /**
     * Set <svalue> value
     *
     * @param string $value
     * @return \utilpb\FuzzyType
     */
    public function setSvalue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class HumanShow extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $weapon = null;
    
    /**  @var int */
    public $cloth = null;
    
    /**  @var int */
    public $mount = null;
    
    /**  @var int */
    public $wing = null;
    
    /**  @var int */
    public $fashion = null;
    
    /**  @var int */
    public $trinket = null;
    
    /**  @var int */
    public $sorcery = null;
    
    /**  @var int */
    public $suit = null;
    
    /**  @var int */
    public $yfSuit = null;
    
    /**  @var int */
    public $escort = null;
    
    /**  @var int */
    public $mSuit = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.HumanShow');

      // OPTIONAL INT32 weapon = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "weapon";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 cloth = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cloth";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 mount = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "mount";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 wing = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "wing";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 fashion = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "fashion";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 trinket = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "trinket";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 sorcery = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "sorcery";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 suit = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "suit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 yfSuit = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "yfSuit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 escort = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "escort";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 mSuit = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "mSuit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <weapon> has a value
     *
     * @return boolean
     */
    public function hasWeapon(){
      return $this->_has(1);
    }
    
    /**
     * Clear <weapon> value
     *
     * @return \utilpb\HumanShow
     */
    public function clearWeapon(){
      return $this->_clear(1);
    }
    
    /**
     * Get <weapon> value
     *
     * @return int
     */
    public function getWeapon(){
      return $this->_get(1);
    }
    
    /**
     * Set <weapon> value
     *
     * @param int $value
     * @return \utilpb\HumanShow
     */
    public function setWeapon( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <cloth> has a value
     *
     * @return boolean
     */
    public function hasCloth(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cloth> value
     *
     * @return \utilpb\HumanShow
     */
    public function clearCloth(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cloth> value
     *
     * @return int
     */
    public function getCloth(){
      return $this->_get(2);
    }
    
    /**
     * Set <cloth> value
     *
     * @param int $value
     * @return \utilpb\HumanShow
     */
    public function setCloth( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <mount> has a value
     *
     * @return boolean
     */
    public function hasMount(){
      return $this->_has(3);
    }
    
    /**
     * Clear <mount> value
     *
     * @return \utilpb\HumanShow
     */
    public function clearMount(){
      return $this->_clear(3);
    }
    
    /**
     * Get <mount> value
     *
     * @return int
     */
    public function getMount(){
      return $this->_get(3);
    }
    
    /**
     * Set <mount> value
     *
     * @param int $value
     * @return \utilpb\HumanShow
     */
    public function setMount( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <wing> has a value
     *
     * @return boolean
     */
    public function hasWing(){
      return $this->_has(4);
    }
    
    /**
     * Clear <wing> value
     *
     * @return \utilpb\HumanShow
     */
    public function clearWing(){
      return $this->_clear(4);
    }
    
    /**
     * Get <wing> value
     *
     * @return int
     */
    public function getWing(){
      return $this->_get(4);
    }
    
    /**
     * Set <wing> value
     *
     * @param int $value
     * @return \utilpb\HumanShow
     */
    public function setWing( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <fashion> has a value
     *
     * @return boolean
     */
    public function hasFashion(){
      return $this->_has(5);
    }
    
    /**
     * Clear <fashion> value
     *
     * @return \utilpb\HumanShow
     */
    public function clearFashion(){
      return $this->_clear(5);
    }
    
    /**
     * Get <fashion> value
     *
     * @return int
     */
    public function getFashion(){
      return $this->_get(5);
    }
    
    /**
     * Set <fashion> value
     *
     * @param int $value
     * @return \utilpb\HumanShow
     */
    public function setFashion( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <trinket> has a value
     *
     * @return boolean
     */
    public function hasTrinket(){
      return $this->_has(6);
    }
    
    /**
     * Clear <trinket> value
     *
     * @return \utilpb\HumanShow
     */
    public function clearTrinket(){
      return $this->_clear(6);
    }
    
    /**
     * Get <trinket> value
     *
     * @return int
     */
    public function getTrinket(){
      return $this->_get(6);
    }
    
    /**
     * Set <trinket> value
     *
     * @param int $value
     * @return \utilpb\HumanShow
     */
    public function setTrinket( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <sorcery> has a value
     *
     * @return boolean
     */
    public function hasSorcery(){
      return $this->_has(7);
    }
    
    /**
     * Clear <sorcery> value
     *
     * @return \utilpb\HumanShow
     */
    public function clearSorcery(){
      return $this->_clear(7);
    }
    
    /**
     * Get <sorcery> value
     *
     * @return int
     */
    public function getSorcery(){
      return $this->_get(7);
    }
    
    /**
     * Set <sorcery> value
     *
     * @param int $value
     * @return \utilpb\HumanShow
     */
    public function setSorcery( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <suit> has a value
     *
     * @return boolean
     */
    public function hasSuit(){
      return $this->_has(8);
    }
    
    /**
     * Clear <suit> value
     *
     * @return \utilpb\HumanShow
     */
    public function clearSuit(){
      return $this->_clear(8);
    }
    
    /**
     * Get <suit> value
     *
     * @return int
     */
    public function getSuit(){
      return $this->_get(8);
    }
    
    /**
     * Set <suit> value
     *
     * @param int $value
     * @return \utilpb\HumanShow
     */
    public function setSuit( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <yfSuit> has a value
     *
     * @return boolean
     */
    public function hasYfSuit(){
      return $this->_has(9);
    }
    
    /**
     * Clear <yfSuit> value
     *
     * @return \utilpb\HumanShow
     */
    public function clearYfSuit(){
      return $this->_clear(9);
    }
    
    /**
     * Get <yfSuit> value
     *
     * @return int
     */
    public function getYfSuit(){
      return $this->_get(9);
    }
    
    /**
     * Set <yfSuit> value
     *
     * @param int $value
     * @return \utilpb\HumanShow
     */
    public function setYfSuit( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <escort> has a value
     *
     * @return boolean
     */
    public function hasEscort(){
      return $this->_has(10);
    }
    
    /**
     * Clear <escort> value
     *
     * @return \utilpb\HumanShow
     */
    public function clearEscort(){
      return $this->_clear(10);
    }
    
    /**
     * Get <escort> value
     *
     * @return int
     */
    public function getEscort(){
      return $this->_get(10);
    }
    
    /**
     * Set <escort> value
     *
     * @param int $value
     * @return \utilpb\HumanShow
     */
    public function setEscort( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <mSuit> has a value
     *
     * @return boolean
     */
    public function hasMSuit(){
      return $this->_has(11);
    }
    
    /**
     * Clear <mSuit> value
     *
     * @return \utilpb\HumanShow
     */
    public function clearMSuit(){
      return $this->_clear(11);
    }
    
    /**
     * Get <mSuit> value
     *
     * @return int
     */
    public function getMSuit(){
      return $this->_get(11);
    }
    
    /**
     * Set <mSuit> value
     *
     * @param int $value
     * @return \utilpb\HumanShow
     */
    public function setMSuit( $value){
      return $this->_set(11, $value);
    }
  }
}

namespace utilpb {

  class Pos extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $x = null;
    
    /**  @var int */
    public $y = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.Pos');

      // REQUIRED INT32 x = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "x";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 y = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "y";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <x> has a value
     *
     * @return boolean
     */
    public function hasX(){
      return $this->_has(1);
    }
    
    /**
     * Clear <x> value
     *
     * @return \utilpb\Pos
     */
    public function clearX(){
      return $this->_clear(1);
    }
    
    /**
     * Get <x> value
     *
     * @return int
     */
    public function getX(){
      return $this->_get(1);
    }
    
    /**
     * Set <x> value
     *
     * @param int $value
     * @return \utilpb\Pos
     */
    public function setX( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <y> has a value
     *
     * @return boolean
     */
    public function hasY(){
      return $this->_has(2);
    }
    
    /**
     * Clear <y> value
     *
     * @return \utilpb\Pos
     */
    public function clearY(){
      return $this->_clear(2);
    }
    
    /**
     * Get <y> value
     *
     * @return int
     */
    public function getY(){
      return $this->_get(2);
    }
    
    /**
     * Set <y> value
     *
     * @param int $value
     * @return \utilpb\Pos
     */
    public function setY( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class IntComposeID extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $key = null;
    
    /**  @var \utilpb\ComposeID */
    public $objId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.IntComposeID');

      // REQUIRED INT32 key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE objId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "objId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \utilpb\IntComposeID
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return int
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param int $value
     * @return \utilpb\IntComposeID
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <objId> has a value
     *
     * @return boolean
     */
    public function hasObjId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <objId> value
     *
     * @return \utilpb\IntComposeID
     */
    public function clearObjId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <objId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getObjId(){
      return $this->_get(2);
    }
    
    /**
     * Set <objId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\IntComposeID
     */
    public function setObjId(\utilpb\ComposeID $value){
      return $this->_set(2, $value);
    }
  }
}

