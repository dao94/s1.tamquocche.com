<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/heart_devil.proto
//   Date: 2014-12-19 08:23:06

namespace utilpb {

  class ChallengeRank extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $objId = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $lv = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.ChallengeRank');

      // REQUIRED MESSAGE objId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "objId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 lv = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "lv";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <objId> has a value
     *
     * @return boolean
     */
    public function hasObjId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <objId> value
     *
     * @return \utilpb\ChallengeRank
     */
    public function clearObjId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <objId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getObjId(){
      return $this->_get(1);
    }
    
    /**
     * Set <objId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\ChallengeRank
     */
    public function setObjId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\ChallengeRank
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\ChallengeRank
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <lv> has a value
     *
     * @return boolean
     */
    public function hasLv(){
      return $this->_has(3);
    }
    
    /**
     * Clear <lv> value
     *
     * @return \utilpb\ChallengeRank
     */
    public function clearLv(){
      return $this->_clear(3);
    }
    
    /**
     * Get <lv> value
     *
     * @return int
     */
    public function getLv(){
      return $this->_get(3);
    }
    
    /**
     * Set <lv> value
     *
     * @param int $value
     * @return \utilpb\ChallengeRank
     */
    public function setLv( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class HeartDevil extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $lv = null;
    
    /**  @var \utilpb\ChallengeRank[]  */
    public $list = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.HeartDevil');

      // OPTIONAL INT32 lv = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "lv";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE list = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "list";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\ChallengeRank';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <lv> has a value
     *
     * @return boolean
     */
    public function hasLv(){
      return $this->_has(1);
    }
    
    /**
     * Clear <lv> value
     *
     * @return \utilpb\HeartDevil
     */
    public function clearLv(){
      return $this->_clear(1);
    }
    
    /**
     * Get <lv> value
     *
     * @return int
     */
    public function getLv(){
      return $this->_get(1);
    }
    
    /**
     * Set <lv> value
     *
     * @param int $value
     * @return \utilpb\HeartDevil
     */
    public function setLv( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <list> has a value
     *
     * @return boolean
     */
    public function hasList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <list> value
     *
     * @return \utilpb\HeartDevil
     */
    public function clearList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <list> value
     *
     * @param int $idx
     * @return \utilpb\ChallengeRank
     */
    public function getList($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <list> value
     *
     * @param \utilpb\ChallengeRank $value
     * @return \utilpb\HeartDevil
     */
    public function setList(\utilpb\ChallengeRank $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <list>
     *
     * @return \utilpb\ChallengeRank[]
     */
    public function getListList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <list>
     *
     * @param \utilpb\ChallengeRank $value
     * @return \utilpb\HeartDevil
     */
    public function addList(\utilpb\ChallengeRank $value){
     return $this->_add(2, $value);
    }
  }
}

