<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/human.proto
//   Date: 2014-12-19 08:23:07

namespace utilpb {

  class HumanAttr extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\BaseAttr */
    public $base = null;
    
    /**  @var \utilpb\AdvancedAttr */
    public $advanced = null;
    
    /**  @var \utilpb\CombatAttrAll */
    public $constattr = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.HumanAttr');

      // OPTIONAL MESSAGE base = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "base";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\BaseAttr';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE advanced = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "advanced";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\AdvancedAttr';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE constattr = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "constattr";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\CombatAttrAll';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <base> has a value
     *
     * @return boolean
     */
    public function hasBase(){
      return $this->_has(1);
    }
    
    /**
     * Clear <base> value
     *
     * @return \utilpb\HumanAttr
     */
    public function clearBase(){
      return $this->_clear(1);
    }
    
    /**
     * Get <base> value
     *
     * @return \utilpb\BaseAttr
     */
    public function getBase(){
      return $this->_get(1);
    }
    
    /**
     * Set <base> value
     *
     * @param \utilpb\BaseAttr $value
     * @return \utilpb\HumanAttr
     */
    public function setBase(\utilpb\BaseAttr $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <advanced> has a value
     *
     * @return boolean
     */
    public function hasAdvanced(){
      return $this->_has(2);
    }
    
    /**
     * Clear <advanced> value
     *
     * @return \utilpb\HumanAttr
     */
    public function clearAdvanced(){
      return $this->_clear(2);
    }
    
    /**
     * Get <advanced> value
     *
     * @return \utilpb\AdvancedAttr
     */
    public function getAdvanced(){
      return $this->_get(2);
    }
    
    /**
     * Set <advanced> value
     *
     * @param \utilpb\AdvancedAttr $value
     * @return \utilpb\HumanAttr
     */
    public function setAdvanced(\utilpb\AdvancedAttr $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <constattr> has a value
     *
     * @return boolean
     */
    public function hasConstattr(){
      return $this->_has(3);
    }
    
    /**
     * Clear <constattr> value
     *
     * @return \utilpb\HumanAttr
     */
    public function clearConstattr(){
      return $this->_clear(3);
    }
    
    /**
     * Get <constattr> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function getConstattr(){
      return $this->_get(3);
    }
    
    /**
     * Set <constattr> value
     *
     * @param \utilpb\CombatAttrAll $value
     * @return \utilpb\HumanAttr
     */
    public function setConstattr(\utilpb\CombatAttrAll $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class HumanOfflineInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\PartListInfo */
    public $equips = null;
    
    /**  @var \utilpb\HumanAttr */
    public $advanced = null;
    
    /**  @var \utilpb\ComposeID */
    public $id = null;
    
    /**  @var \utilpb\ComposeID */
    public $idR = null;
    
    /**  @var \utilpb\HumanShow */
    public $showInfo = null;
    
    /**  @var \utilpb\U2mPbSkillList */
    public $skillInfo = null;
    
    /**  @var \utilpb\U2mDesignation */
    public $title = null;
    
    /**  @var int */
    public $challengeLvl = null;
    
    /**  @var \utilpb\SoulDrugOffline */
    public $drug = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.HumanOfflineInfo');

      // OPTIONAL MESSAGE equips = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "equips";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\PartListInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE advanced = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "advanced";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\HumanAttr';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE idR = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "idR";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE showInfo = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "showInfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\HumanShow';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE skillInfo = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "skillInfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\U2mPbSkillList';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE title = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\U2mDesignation';
      $descriptor->addField($f);

      // OPTIONAL INT32 challengeLvl = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "challengeLvl";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE drug = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "drug";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\SoulDrugOffline';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <equips> has a value
     *
     * @return boolean
     */
    public function hasEquips(){
      return $this->_has(1);
    }
    
    /**
     * Clear <equips> value
     *
     * @return \utilpb\HumanOfflineInfo
     */
    public function clearEquips(){
      return $this->_clear(1);
    }
    
    /**
     * Get <equips> value
     *
     * @return \utilpb\PartListInfo
     */
    public function getEquips(){
      return $this->_get(1);
    }
    
    /**
     * Set <equips> value
     *
     * @param \utilpb\PartListInfo $value
     * @return \utilpb\HumanOfflineInfo
     */
    public function setEquips(\utilpb\PartListInfo $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <advanced> has a value
     *
     * @return boolean
     */
    public function hasAdvanced(){
      return $this->_has(2);
    }
    
    /**
     * Clear <advanced> value
     *
     * @return \utilpb\HumanOfflineInfo
     */
    public function clearAdvanced(){
      return $this->_clear(2);
    }
    
    /**
     * Get <advanced> value
     *
     * @return \utilpb\HumanAttr
     */
    public function getAdvanced(){
      return $this->_get(2);
    }
    
    /**
     * Set <advanced> value
     *
     * @param \utilpb\HumanAttr $value
     * @return \utilpb\HumanOfflineInfo
     */
    public function setAdvanced(\utilpb\HumanAttr $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\HumanOfflineInfo
     */
    public function clearId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(3);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\HumanOfflineInfo
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <idR> has a value
     *
     * @return boolean
     */
    public function hasIdR(){
      return $this->_has(4);
    }
    
    /**
     * Clear <idR> value
     *
     * @return \utilpb\HumanOfflineInfo
     */
    public function clearIdR(){
      return $this->_clear(4);
    }
    
    /**
     * Get <idR> value
     *
     * @return \utilpb\ComposeID
     */
    public function getIdR(){
      return $this->_get(4);
    }
    
    /**
     * Set <idR> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\HumanOfflineInfo
     */
    public function setIdR(\utilpb\ComposeID $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <showInfo> has a value
     *
     * @return boolean
     */
    public function hasShowInfo(){
      return $this->_has(5);
    }
    
    /**
     * Clear <showInfo> value
     *
     * @return \utilpb\HumanOfflineInfo
     */
    public function clearShowInfo(){
      return $this->_clear(5);
    }
    
    /**
     * Get <showInfo> value
     *
     * @return \utilpb\HumanShow
     */
    public function getShowInfo(){
      return $this->_get(5);
    }
    
    /**
     * Set <showInfo> value
     *
     * @param \utilpb\HumanShow $value
     * @return \utilpb\HumanOfflineInfo
     */
    public function setShowInfo(\utilpb\HumanShow $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <skillInfo> has a value
     *
     * @return boolean
     */
    public function hasSkillInfo(){
      return $this->_has(6);
    }
    
    /**
     * Clear <skillInfo> value
     *
     * @return \utilpb\HumanOfflineInfo
     */
    public function clearSkillInfo(){
      return $this->_clear(6);
    }
    
    /**
     * Get <skillInfo> value
     *
     * @return \utilpb\U2mPbSkillList
     */
    public function getSkillInfo(){
      return $this->_get(6);
    }
    
    /**
     * Set <skillInfo> value
     *
     * @param \utilpb\U2mPbSkillList $value
     * @return \utilpb\HumanOfflineInfo
     */
    public function setSkillInfo(\utilpb\U2mPbSkillList $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(7);
    }
    
    /**
     * Clear <title> value
     *
     * @return \utilpb\HumanOfflineInfo
     */
    public function clearTitle(){
      return $this->_clear(7);
    }
    
    /**
     * Get <title> value
     *
     * @return \utilpb\U2mDesignation
     */
    public function getTitle(){
      return $this->_get(7);
    }
    
    /**
     * Set <title> value
     *
     * @param \utilpb\U2mDesignation $value
     * @return \utilpb\HumanOfflineInfo
     */
    public function setTitle(\utilpb\U2mDesignation $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <challengeLvl> has a value
     *
     * @return boolean
     */
    public function hasChallengeLvl(){
      return $this->_has(8);
    }
    
    /**
     * Clear <challengeLvl> value
     *
     * @return \utilpb\HumanOfflineInfo
     */
    public function clearChallengeLvl(){
      return $this->_clear(8);
    }
    
    /**
     * Get <challengeLvl> value
     *
     * @return int
     */
    public function getChallengeLvl(){
      return $this->_get(8);
    }
    
    /**
     * Set <challengeLvl> value
     *
     * @param int $value
     * @return \utilpb\HumanOfflineInfo
     */
    public function setChallengeLvl( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <drug> has a value
     *
     * @return boolean
     */
    public function hasDrug(){
      return $this->_has(9);
    }
    
    /**
     * Clear <drug> value
     *
     * @return \utilpb\HumanOfflineInfo
     */
    public function clearDrug(){
      return $this->_clear(9);
    }
    
    /**
     * Get <drug> value
     *
     * @return \utilpb\SoulDrugOffline
     */
    public function getDrug(){
      return $this->_get(9);
    }
    
    /**
     * Set <drug> value
     *
     * @param \utilpb\SoulDrugOffline $value
     * @return \utilpb\HumanOfflineInfo
     */
    public function setDrug(\utilpb\SoulDrugOffline $value){
      return $this->_set(9, $value);
    }
  }
}

namespace utilpb {

  class U2mDesignation extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $faction = null;
    
    /**  @var string */
    public $factionid = null;
    
    /**  @var int */
    public $position = null;
    
    /**  @var int */
    public $vip = null;
    
    /**  @var int */
    public $camp = null;
    
    /**  @var string */
    public $lover = null;
    
    /**  @var int[]  */
    public $titles = array();
    
    /**  @var int */
    public $titleId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.U2mDesignation');

      // OPTIONAL STRING faction = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "faction";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING factionid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "factionid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 position = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "position";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 vip = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "vip";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 camp = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "camp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING lover = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "lover";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED INT32 titles = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "titles";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL INT32 titleId = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "titleId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <faction> has a value
     *
     * @return boolean
     */
    public function hasFaction(){
      return $this->_has(1);
    }
    
    /**
     * Clear <faction> value
     *
     * @return \utilpb\U2mDesignation
     */
    public function clearFaction(){
      return $this->_clear(1);
    }
    
    /**
     * Get <faction> value
     *
     * @return string
     */
    public function getFaction(){
      return $this->_get(1);
    }
    
    /**
     * Set <faction> value
     *
     * @param string $value
     * @return \utilpb\U2mDesignation
     */
    public function setFaction( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <factionid> has a value
     *
     * @return boolean
     */
    public function hasFactionid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <factionid> value
     *
     * @return \utilpb\U2mDesignation
     */
    public function clearFactionid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <factionid> value
     *
     * @return string
     */
    public function getFactionid(){
      return $this->_get(2);
    }
    
    /**
     * Set <factionid> value
     *
     * @param string $value
     * @return \utilpb\U2mDesignation
     */
    public function setFactionid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <position> has a value
     *
     * @return boolean
     */
    public function hasPosition(){
      return $this->_has(3);
    }
    
    /**
     * Clear <position> value
     *
     * @return \utilpb\U2mDesignation
     */
    public function clearPosition(){
      return $this->_clear(3);
    }
    
    /**
     * Get <position> value
     *
     * @return int
     */
    public function getPosition(){
      return $this->_get(3);
    }
    
    /**
     * Set <position> value
     *
     * @param int $value
     * @return \utilpb\U2mDesignation
     */
    public function setPosition( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <vip> has a value
     *
     * @return boolean
     */
    public function hasVip(){
      return $this->_has(4);
    }
    
    /**
     * Clear <vip> value
     *
     * @return \utilpb\U2mDesignation
     */
    public function clearVip(){
      return $this->_clear(4);
    }
    
    /**
     * Get <vip> value
     *
     * @return int
     */
    public function getVip(){
      return $this->_get(4);
    }
    
    /**
     * Set <vip> value
     *
     * @param int $value
     * @return \utilpb\U2mDesignation
     */
    public function setVip( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <camp> has a value
     *
     * @return boolean
     */
    public function hasCamp(){
      return $this->_has(5);
    }
    
    /**
     * Clear <camp> value
     *
     * @return \utilpb\U2mDesignation
     */
    public function clearCamp(){
      return $this->_clear(5);
    }
    
    /**
     * Get <camp> value
     *
     * @return int
     */
    public function getCamp(){
      return $this->_get(5);
    }
    
    /**
     * Set <camp> value
     *
     * @param int $value
     * @return \utilpb\U2mDesignation
     */
    public function setCamp( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <lover> has a value
     *
     * @return boolean
     */
    public function hasLover(){
      return $this->_has(6);
    }
    
    /**
     * Clear <lover> value
     *
     * @return \utilpb\U2mDesignation
     */
    public function clearLover(){
      return $this->_clear(6);
    }
    
    /**
     * Get <lover> value
     *
     * @return string
     */
    public function getLover(){
      return $this->_get(6);
    }
    
    /**
     * Set <lover> value
     *
     * @param string $value
     * @return \utilpb\U2mDesignation
     */
    public function setLover( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <titles> has a value
     *
     * @return boolean
     */
    public function hasTitles(){
      return $this->_has(7);
    }
    
    /**
     * Clear <titles> value
     *
     * @return \utilpb\U2mDesignation
     */
    public function clearTitles(){
      return $this->_clear(7);
    }
    
    /**
     * Get <titles> value
     *
     * @param int $idx
     * @return int
     */
    public function getTitles($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <titles> value
     *
     * @param int $value
     * @return \utilpb\U2mDesignation
     */
    public function setTitles( $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <titles>
     *
     * @return int[]
     */
    public function getTitlesList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <titles>
     *
     * @param int $value
     * @return \utilpb\U2mDesignation
     */
    public function addTitles( $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <titleId> has a value
     *
     * @return boolean
     */
    public function hasTitleId(){
      return $this->_has(8);
    }
    
    /**
     * Clear <titleId> value
     *
     * @return \utilpb\U2mDesignation
     */
    public function clearTitleId(){
      return $this->_clear(8);
    }
    
    /**
     * Get <titleId> value
     *
     * @return int
     */
    public function getTitleId(){
      return $this->_get(8);
    }
    
    /**
     * Set <titleId> value
     *
     * @param int $value
     * @return \utilpb\U2mDesignation
     */
    public function setTitleId( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace utilpb {

  class SkillObj extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var float */
    public $lastUsedTm = null;
    
    /**  @var int[]  */
    public $effects = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SkillObj');

      // REQUIRED UINT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE lastUsedTm = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "lastUsedTm";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED INT32 effects = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "effects";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\SkillObj
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \utilpb\SkillObj
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <lastUsedTm> has a value
     *
     * @return boolean
     */
    public function hasLastUsedTm(){
      return $this->_has(2);
    }
    
    /**
     * Clear <lastUsedTm> value
     *
     * @return \utilpb\SkillObj
     */
    public function clearLastUsedTm(){
      return $this->_clear(2);
    }
    
    /**
     * Get <lastUsedTm> value
     *
     * @return float
     */
    public function getLastUsedTm(){
      return $this->_get(2);
    }
    
    /**
     * Set <lastUsedTm> value
     *
     * @param float $value
     * @return \utilpb\SkillObj
     */
    public function setLastUsedTm( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <effects> has a value
     *
     * @return boolean
     */
    public function hasEffects(){
      return $this->_has(3);
    }
    
    /**
     * Clear <effects> value
     *
     * @return \utilpb\SkillObj
     */
    public function clearEffects(){
      return $this->_clear(3);
    }
    
    /**
     * Get <effects> value
     *
     * @param int $idx
     * @return int
     */
    public function getEffects($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <effects> value
     *
     * @param int $value
     * @return \utilpb\SkillObj
     */
    public function setEffects( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <effects>
     *
     * @return int[]
     */
    public function getEffectsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <effects>
     *
     * @param int $value
     * @return \utilpb\SkillObj
     */
    public function addEffects( $value){
     return $this->_add(3, $value);
    }
  }
}

namespace utilpb {

  class U2mPbSkillList extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\SkillObj[]  */
    public $list = array();
    
    /**  @var int */
    public $status = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.U2mPbSkillList');

      // REPEATED MESSAGE list = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "list";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\SkillObj';
      $descriptor->addField($f);

      // REQUIRED INT32 status = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <list> has a value
     *
     * @return boolean
     */
    public function hasList(){
      return $this->_has(1);
    }
    
    /**
     * Clear <list> value
     *
     * @return \utilpb\U2mPbSkillList
     */
    public function clearList(){
      return $this->_clear(1);
    }
    
    /**
     * Get <list> value
     *
     * @param int $idx
     * @return \utilpb\SkillObj
     */
    public function getList($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <list> value
     *
     * @param \utilpb\SkillObj $value
     * @return \utilpb\U2mPbSkillList
     */
    public function setList(\utilpb\SkillObj $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <list>
     *
     * @return \utilpb\SkillObj[]
     */
    public function getListList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <list>
     *
     * @param \utilpb\SkillObj $value
     * @return \utilpb\U2mPbSkillList
     */
    public function addList(\utilpb\SkillObj $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(2);
    }
    
    /**
     * Clear <status> value
     *
     * @return \utilpb\U2mPbSkillList
     */
    public function clearStatus(){
      return $this->_clear(2);
    }
    
    /**
     * Get <status> value
     *
     * @return int
     */
    public function getStatus(){
      return $this->_get(2);
    }
    
    /**
     * Set <status> value
     *
     * @param int $value
     * @return \utilpb\U2mPbSkillList
     */
    public function setStatus( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class RealtimeHumanOfflineInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $idR = null;
    
    /**  @var \utilpb\ComposeID */
    public $idN = null;
    
    /**  @var int */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.RealtimeHumanOfflineInfo');

      // REQUIRED MESSAGE idR = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "idR";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED MESSAGE idN = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "idN";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL INT32 type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <idR> has a value
     *
     * @return boolean
     */
    public function hasIdR(){
      return $this->_has(1);
    }
    
    /**
     * Clear <idR> value
     *
     * @return \utilpb\RealtimeHumanOfflineInfo
     */
    public function clearIdR(){
      return $this->_clear(1);
    }
    
    /**
     * Get <idR> value
     *
     * @return \utilpb\ComposeID
     */
    public function getIdR(){
      return $this->_get(1);
    }
    
    /**
     * Set <idR> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\RealtimeHumanOfflineInfo
     */
    public function setIdR(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <idN> has a value
     *
     * @return boolean
     */
    public function hasIdN(){
      return $this->_has(2);
    }
    
    /**
     * Clear <idN> value
     *
     * @return \utilpb\RealtimeHumanOfflineInfo
     */
    public function clearIdN(){
      return $this->_clear(2);
    }
    
    /**
     * Get <idN> value
     *
     * @return \utilpb\ComposeID
     */
    public function getIdN(){
      return $this->_get(2);
    }
    
    /**
     * Set <idN> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\RealtimeHumanOfflineInfo
     */
    public function setIdN(\utilpb\ComposeID $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\RealtimeHumanOfflineInfo
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\RealtimeHumanOfflineInfo
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class RealtimeSvHumanOfflineInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $id = null;
    
    /**  @var int */
    public $type = null;
    
    /**  @var \utilpb\TableInfo */
    public $param = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.RealtimeSvHumanOfflineInfo');

      // REQUIRED MESSAGE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL INT32 type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED MESSAGE param = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\TableInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\RealtimeSvHumanOfflineInfo
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\RealtimeSvHumanOfflineInfo
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\RealtimeSvHumanOfflineInfo
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\RealtimeSvHumanOfflineInfo
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(3);
    }
    
    /**
     * Clear <param> value
     *
     * @return \utilpb\RealtimeSvHumanOfflineInfo
     */
    public function clearParam(){
      return $this->_clear(3);
    }
    
    /**
     * Get <param> value
     *
     * @return \utilpb\TableInfo
     */
    public function getParam(){
      return $this->_get(3);
    }
    
    /**
     * Set <param> value
     *
     * @param \utilpb\TableInfo $value
     * @return \utilpb\RealtimeSvHumanOfflineInfo
     */
    public function setParam(\utilpb\TableInfo $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class CsHumanInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\HumanOfflineInfo */
    public $humanInfo = null;
    
    /**  @var int */
    public $type = 0;
    
    /**  @var \utilpb\ComposeID */
    public $id = null;
    
    /**  @var \utilpb\ComposeID */
    public $idR = null;
    
    /**  @var \utilpb\TableInfo */
    public $param = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CsHumanInfo');

      // REQUIRED MESSAGE humanInfo = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "humanInfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\HumanOfflineInfo';
      $descriptor->addField($f);

      // OPTIONAL INT32 type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE idR = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "idR";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE param = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "param";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\TableInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <humanInfo> has a value
     *
     * @return boolean
     */
    public function hasHumanInfo(){
      return $this->_has(1);
    }
    
    /**
     * Clear <humanInfo> value
     *
     * @return \utilpb\CsHumanInfo
     */
    public function clearHumanInfo(){
      return $this->_clear(1);
    }
    
    /**
     * Get <humanInfo> value
     *
     * @return \utilpb\HumanOfflineInfo
     */
    public function getHumanInfo(){
      return $this->_get(1);
    }
    
    /**
     * Set <humanInfo> value
     *
     * @param \utilpb\HumanOfflineInfo $value
     * @return \utilpb\CsHumanInfo
     */
    public function setHumanInfo(\utilpb\HumanOfflineInfo $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\CsHumanInfo
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\CsHumanInfo
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\CsHumanInfo
     */
    public function clearId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(3);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\CsHumanInfo
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <idR> has a value
     *
     * @return boolean
     */
    public function hasIdR(){
      return $this->_has(4);
    }
    
    /**
     * Clear <idR> value
     *
     * @return \utilpb\CsHumanInfo
     */
    public function clearIdR(){
      return $this->_clear(4);
    }
    
    /**
     * Get <idR> value
     *
     * @return \utilpb\ComposeID
     */
    public function getIdR(){
      return $this->_get(4);
    }
    
    /**
     * Set <idR> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\CsHumanInfo
     */
    public function setIdR(\utilpb\ComposeID $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <param> has a value
     *
     * @return boolean
     */
    public function hasParam(){
      return $this->_has(5);
    }
    
    /**
     * Clear <param> value
     *
     * @return \utilpb\CsHumanInfo
     */
    public function clearParam(){
      return $this->_clear(5);
    }
    
    /**
     * Get <param> value
     *
     * @return \utilpb\TableInfo
     */
    public function getParam(){
      return $this->_get(5);
    }
    
    /**
     * Set <param> value
     *
     * @param \utilpb\TableInfo $value
     * @return \utilpb\CsHumanInfo
     */
    public function setParam(\utilpb\TableInfo $value){
      return $this->_set(5, $value);
    }
  }
}

namespace utilpb {

  class SvGetHumanOffLine extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $id = null;
    
    /**  @var int */
    public $type = null;
    
    /**  @var int */
    public $lvl = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SvGetHumanOffLine');

      // REQUIRED MESSAGE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED INT32 type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 lvl = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "lvl";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\SvGetHumanOffLine
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\SvGetHumanOffLine
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\SvGetHumanOffLine
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\SvGetHumanOffLine
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <lvl> has a value
     *
     * @return boolean
     */
    public function hasLvl(){
      return $this->_has(3);
    }
    
    /**
     * Clear <lvl> value
     *
     * @return \utilpb\SvGetHumanOffLine
     */
    public function clearLvl(){
      return $this->_clear(3);
    }
    
    /**
     * Get <lvl> value
     *
     * @return int
     */
    public function getLvl(){
      return $this->_get(3);
    }
    
    /**
     * Set <lvl> value
     *
     * @param int $value
     * @return \utilpb\SvGetHumanOffLine
     */
    public function setLvl( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class SvSendHumanOffLine extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\HumanOfflineInfo */
    public $humanInfo = null;
    
    /**  @var \utilpb\ComposeID */
    public $id = null;
    
    /**  @var int */
    public $type = null;
    
    /**  @var int */
    public $level = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SvSendHumanOffLine');

      // REQUIRED MESSAGE humanInfo = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "humanInfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\HumanOfflineInfo';
      $descriptor->addField($f);

      // REQUIRED MESSAGE id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED INT32 type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 level = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <humanInfo> has a value
     *
     * @return boolean
     */
    public function hasHumanInfo(){
      return $this->_has(1);
    }
    
    /**
     * Clear <humanInfo> value
     *
     * @return \utilpb\SvSendHumanOffLine
     */
    public function clearHumanInfo(){
      return $this->_clear(1);
    }
    
    /**
     * Get <humanInfo> value
     *
     * @return \utilpb\HumanOfflineInfo
     */
    public function getHumanInfo(){
      return $this->_get(1);
    }
    
    /**
     * Set <humanInfo> value
     *
     * @param \utilpb\HumanOfflineInfo $value
     * @return \utilpb\SvSendHumanOffLine
     */
    public function setHumanInfo(\utilpb\HumanOfflineInfo $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\SvSendHumanOffLine
     */
    public function clearId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(2);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\SvSendHumanOffLine
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\SvSendHumanOffLine
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\SvSendHumanOffLine
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(4);
    }
    
    /**
     * Clear <level> value
     *
     * @return \utilpb\SvSendHumanOffLine
     */
    public function clearLevel(){
      return $this->_clear(4);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(4);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \utilpb\SvSendHumanOffLine
     */
    public function setLevel( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class U2cHumanOptAttr extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $spirit = null;
    
    /**  @var int */
    public $contribution = null;
    
    /**  @var int */
    public $exploit = null;
    
    /**  @var int */
    public $hunsoul = null;
    
    /**  @var int */
    public $xilianpoint = null;
    
    /**  @var int */
    public $prestige = null;
    
    /**  @var int */
    public $exploitExp = null;
    
    /**  @var int */
    public $leitaibi = null;
    
    /**  @var int */
    public $totaljade = null;
    
    /**  @var int */
    public $honor = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.U2cHumanOptAttr');

      // OPTIONAL INT32 spirit = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "spirit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 contribution = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "contribution";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 exploit = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "exploit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 hunsoul = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "hunsoul";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 xilianpoint = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "xilianpoint";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 prestige = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "prestige";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 exploitExp = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "exploitExp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 leitaibi = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "leitaibi";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 totaljade = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "totaljade";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 honor = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "honor";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <spirit> has a value
     *
     * @return boolean
     */
    public function hasSpirit(){
      return $this->_has(1);
    }
    
    /**
     * Clear <spirit> value
     *
     * @return \utilpb\U2cHumanOptAttr
     */
    public function clearSpirit(){
      return $this->_clear(1);
    }
    
    /**
     * Get <spirit> value
     *
     * @return int
     */
    public function getSpirit(){
      return $this->_get(1);
    }
    
    /**
     * Set <spirit> value
     *
     * @param int $value
     * @return \utilpb\U2cHumanOptAttr
     */
    public function setSpirit( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <contribution> has a value
     *
     * @return boolean
     */
    public function hasContribution(){
      return $this->_has(2);
    }
    
    /**
     * Clear <contribution> value
     *
     * @return \utilpb\U2cHumanOptAttr
     */
    public function clearContribution(){
      return $this->_clear(2);
    }
    
    /**
     * Get <contribution> value
     *
     * @return int
     */
    public function getContribution(){
      return $this->_get(2);
    }
    
    /**
     * Set <contribution> value
     *
     * @param int $value
     * @return \utilpb\U2cHumanOptAttr
     */
    public function setContribution( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <exploit> has a value
     *
     * @return boolean
     */
    public function hasExploit(){
      return $this->_has(3);
    }
    
    /**
     * Clear <exploit> value
     *
     * @return \utilpb\U2cHumanOptAttr
     */
    public function clearExploit(){
      return $this->_clear(3);
    }
    
    /**
     * Get <exploit> value
     *
     * @return int
     */
    public function getExploit(){
      return $this->_get(3);
    }
    
    /**
     * Set <exploit> value
     *
     * @param int $value
     * @return \utilpb\U2cHumanOptAttr
     */
    public function setExploit( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <hunsoul> has a value
     *
     * @return boolean
     */
    public function hasHunsoul(){
      return $this->_has(4);
    }
    
    /**
     * Clear <hunsoul> value
     *
     * @return \utilpb\U2cHumanOptAttr
     */
    public function clearHunsoul(){
      return $this->_clear(4);
    }
    
    /**
     * Get <hunsoul> value
     *
     * @return int
     */
    public function getHunsoul(){
      return $this->_get(4);
    }
    
    /**
     * Set <hunsoul> value
     *
     * @param int $value
     * @return \utilpb\U2cHumanOptAttr
     */
    public function setHunsoul( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <xilianpoint> has a value
     *
     * @return boolean
     */
    public function hasXilianpoint(){
      return $this->_has(5);
    }
    
    /**
     * Clear <xilianpoint> value
     *
     * @return \utilpb\U2cHumanOptAttr
     */
    public function clearXilianpoint(){
      return $this->_clear(5);
    }
    
    /**
     * Get <xilianpoint> value
     *
     * @return int
     */
    public function getXilianpoint(){
      return $this->_get(5);
    }
    
    /**
     * Set <xilianpoint> value
     *
     * @param int $value
     * @return \utilpb\U2cHumanOptAttr
     */
    public function setXilianpoint( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <prestige> has a value
     *
     * @return boolean
     */
    public function hasPrestige(){
      return $this->_has(6);
    }
    
    /**
     * Clear <prestige> value
     *
     * @return \utilpb\U2cHumanOptAttr
     */
    public function clearPrestige(){
      return $this->_clear(6);
    }
    
    /**
     * Get <prestige> value
     *
     * @return int
     */
    public function getPrestige(){
      return $this->_get(6);
    }
    
    /**
     * Set <prestige> value
     *
     * @param int $value
     * @return \utilpb\U2cHumanOptAttr
     */
    public function setPrestige( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <exploitExp> has a value
     *
     * @return boolean
     */
    public function hasExploitExp(){
      return $this->_has(7);
    }
    
    /**
     * Clear <exploitExp> value
     *
     * @return \utilpb\U2cHumanOptAttr
     */
    public function clearExploitExp(){
      return $this->_clear(7);
    }
    
    /**
     * Get <exploitExp> value
     *
     * @return int
     */
    public function getExploitExp(){
      return $this->_get(7);
    }
    
    /**
     * Set <exploitExp> value
     *
     * @param int $value
     * @return \utilpb\U2cHumanOptAttr
     */
    public function setExploitExp( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <leitaibi> has a value
     *
     * @return boolean
     */
    public function hasLeitaibi(){
      return $this->_has(8);
    }
    
    /**
     * Clear <leitaibi> value
     *
     * @return \utilpb\U2cHumanOptAttr
     */
    public function clearLeitaibi(){
      return $this->_clear(8);
    }
    
    /**
     * Get <leitaibi> value
     *
     * @return int
     */
    public function getLeitaibi(){
      return $this->_get(8);
    }
    
    /**
     * Set <leitaibi> value
     *
     * @param int $value
     * @return \utilpb\U2cHumanOptAttr
     */
    public function setLeitaibi( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <totaljade> has a value
     *
     * @return boolean
     */
    public function hasTotaljade(){
      return $this->_has(9);
    }
    
    /**
     * Clear <totaljade> value
     *
     * @return \utilpb\U2cHumanOptAttr
     */
    public function clearTotaljade(){
      return $this->_clear(9);
    }
    
    /**
     * Get <totaljade> value
     *
     * @return int
     */
    public function getTotaljade(){
      return $this->_get(9);
    }
    
    /**
     * Set <totaljade> value
     *
     * @param int $value
     * @return \utilpb\U2cHumanOptAttr
     */
    public function setTotaljade( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <honor> has a value
     *
     * @return boolean
     */
    public function hasHonor(){
      return $this->_has(10);
    }
    
    /**
     * Clear <honor> value
     *
     * @return \utilpb\U2cHumanOptAttr
     */
    public function clearHonor(){
      return $this->_clear(10);
    }
    
    /**
     * Get <honor> value
     *
     * @return int
     */
    public function getHonor(){
      return $this->_get(10);
    }
    
    /**
     * Set <honor> value
     *
     * @param int $value
     * @return \utilpb\U2cHumanOptAttr
     */
    public function setHonor( $value){
      return $this->_set(10, $value);
    }
  }
}

namespace utilpb {

  class S2cTeamInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\HumanOfflineInfo[]  */
    public $humanInfo = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.S2cTeamInfo');

      // REPEATED MESSAGE humanInfo = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "humanInfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\HumanOfflineInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <humanInfo> has a value
     *
     * @return boolean
     */
    public function hasHumanInfo(){
      return $this->_has(1);
    }
    
    /**
     * Clear <humanInfo> value
     *
     * @return \utilpb\S2cTeamInfo
     */
    public function clearHumanInfo(){
      return $this->_clear(1);
    }
    
    /**
     * Get <humanInfo> value
     *
     * @param int $idx
     * @return \utilpb\HumanOfflineInfo
     */
    public function getHumanInfo($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <humanInfo> value
     *
     * @param \utilpb\HumanOfflineInfo $value
     * @return \utilpb\S2cTeamInfo
     */
    public function setHumanInfo(\utilpb\HumanOfflineInfo $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <humanInfo>
     *
     * @return \utilpb\HumanOfflineInfo[]
     */
    public function getHumanInfoList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <humanInfo>
     *
     * @param \utilpb\HumanOfflineInfo $value
     * @return \utilpb\S2cTeamInfo
     */
    public function addHumanInfo(\utilpb\HumanOfflineInfo $value){
     return $this->_add(1, $value);
    }
  }
}

namespace utilpb {

  class DrugInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $drugId = null;
    
    /**  @var int */
    public $num = null;
    
    /**  @var int */
    public $daylimit = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.DrugInfo');

      // REQUIRED INT32 drugId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "drugId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 num = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "num";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 daylimit = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "daylimit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <drugId> has a value
     *
     * @return boolean
     */
    public function hasDrugId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <drugId> value
     *
     * @return \utilpb\DrugInfo
     */
    public function clearDrugId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <drugId> value
     *
     * @return int
     */
    public function getDrugId(){
      return $this->_get(1);
    }
    
    /**
     * Set <drugId> value
     *
     * @param int $value
     * @return \utilpb\DrugInfo
     */
    public function setDrugId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <num> has a value
     *
     * @return boolean
     */
    public function hasNum(){
      return $this->_has(2);
    }
    
    /**
     * Clear <num> value
     *
     * @return \utilpb\DrugInfo
     */
    public function clearNum(){
      return $this->_clear(2);
    }
    
    /**
     * Get <num> value
     *
     * @return int
     */
    public function getNum(){
      return $this->_get(2);
    }
    
    /**
     * Set <num> value
     *
     * @param int $value
     * @return \utilpb\DrugInfo
     */
    public function setNum( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <daylimit> has a value
     *
     * @return boolean
     */
    public function hasDaylimit(){
      return $this->_has(3);
    }
    
    /**
     * Clear <daylimit> value
     *
     * @return \utilpb\DrugInfo
     */
    public function clearDaylimit(){
      return $this->_clear(3);
    }
    
    /**
     * Get <daylimit> value
     *
     * @return int
     */
    public function getDaylimit(){
      return $this->_get(3);
    }
    
    /**
     * Set <daylimit> value
     *
     * @param int $value
     * @return \utilpb\DrugInfo
     */
    public function setDaylimit( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class SoulDrugOffline extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\CombatAttrCombat */
    public $attr = null;
    
    /**  @var \utilpb\DrugInfo[]  */
    public $info = array();
    
    /**  @var int */
    public $soulLv = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SoulDrugOffline');

      // OPTIONAL MESSAGE attr = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "attr";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\CombatAttrCombat';
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\DrugInfo';
      $descriptor->addField($f);

      // OPTIONAL INT32 soulLv = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "soulLv";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <attr> has a value
     *
     * @return boolean
     */
    public function hasAttr(){
      return $this->_has(1);
    }
    
    /**
     * Clear <attr> value
     *
     * @return \utilpb\SoulDrugOffline
     */
    public function clearAttr(){
      return $this->_clear(1);
    }
    
    /**
     * Get <attr> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function getAttr(){
      return $this->_get(1);
    }
    
    /**
     * Set <attr> value
     *
     * @param \utilpb\CombatAttrCombat $value
     * @return \utilpb\SoulDrugOffline
     */
    public function setAttr(\utilpb\CombatAttrCombat $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(2);
    }
    
    /**
     * Clear <info> value
     *
     * @return \utilpb\SoulDrugOffline
     */
    public function clearInfo(){
      return $this->_clear(2);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \utilpb\DrugInfo
     */
    public function getInfo($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \utilpb\DrugInfo $value
     * @return \utilpb\SoulDrugOffline
     */
    public function setInfo(\utilpb\DrugInfo $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \utilpb\DrugInfo[]
     */
    public function getInfoList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \utilpb\DrugInfo $value
     * @return \utilpb\SoulDrugOffline
     */
    public function addInfo(\utilpb\DrugInfo $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <soulLv> has a value
     *
     * @return boolean
     */
    public function hasSoulLv(){
      return $this->_has(3);
    }
    
    /**
     * Clear <soulLv> value
     *
     * @return \utilpb\SoulDrugOffline
     */
    public function clearSoulLv(){
      return $this->_clear(3);
    }
    
    /**
     * Get <soulLv> value
     *
     * @return int
     */
    public function getSoulLv(){
      return $this->_get(3);
    }
    
    /**
     * Set <soulLv> value
     *
     * @param int $value
     * @return \utilpb\SoulDrugOffline
     */
    public function setSoulLv( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class Vvip extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $lvl1 = null;
    
    /**  @var int */
    public $lvl2 = null;
    
    /**  @var int */
    public $lvl3 = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.Vvip');

      // OPTIONAL INT32 lvl1 = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "lvl1";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 lvl2 = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "lvl2";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 lvl3 = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "lvl3";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <lvl1> has a value
     *
     * @return boolean
     */
    public function hasLvl1(){
      return $this->_has(1);
    }
    
    /**
     * Clear <lvl1> value
     *
     * @return \utilpb\Vvip
     */
    public function clearLvl1(){
      return $this->_clear(1);
    }
    
    /**
     * Get <lvl1> value
     *
     * @return int
     */
    public function getLvl1(){
      return $this->_get(1);
    }
    
    /**
     * Set <lvl1> value
     *
     * @param int $value
     * @return \utilpb\Vvip
     */
    public function setLvl1( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <lvl2> has a value
     *
     * @return boolean
     */
    public function hasLvl2(){
      return $this->_has(2);
    }
    
    /**
     * Clear <lvl2> value
     *
     * @return \utilpb\Vvip
     */
    public function clearLvl2(){
      return $this->_clear(2);
    }
    
    /**
     * Get <lvl2> value
     *
     * @return int
     */
    public function getLvl2(){
      return $this->_get(2);
    }
    
    /**
     * Set <lvl2> value
     *
     * @param int $value
     * @return \utilpb\Vvip
     */
    public function setLvl2( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <lvl3> has a value
     *
     * @return boolean
     */
    public function hasLvl3(){
      return $this->_has(3);
    }
    
    /**
     * Clear <lvl3> value
     *
     * @return \utilpb\Vvip
     */
    public function clearLvl3(){
      return $this->_clear(3);
    }
    
    /**
     * Get <lvl3> value
     *
     * @return int
     */
    public function getLvl3(){
      return $this->_get(3);
    }
    
    /**
     * Set <lvl3> value
     *
     * @param int $value
     * @return \utilpb\Vvip
     */
    public function setLvl3( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class FashionOpenList extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\IdInt[]  */
    public $swichList = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.FashionOpenList');

      // REPEATED MESSAGE swichList = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "swichList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\IdInt';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <swichList> has a value
     *
     * @return boolean
     */
    public function hasSwichList(){
      return $this->_has(1);
    }
    
    /**
     * Clear <swichList> value
     *
     * @return \utilpb\FashionOpenList
     */
    public function clearSwichList(){
      return $this->_clear(1);
    }
    
    /**
     * Get <swichList> value
     *
     * @param int $idx
     * @return \utilpb\IdInt
     */
    public function getSwichList($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <swichList> value
     *
     * @param \utilpb\IdInt $value
     * @return \utilpb\FashionOpenList
     */
    public function setSwichList(\utilpb\IdInt $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <swichList>
     *
     * @return \utilpb\IdInt[]
     */
    public function getSwichListList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <swichList>
     *
     * @param \utilpb\IdInt $value
     * @return \utilpb\FashionOpenList
     */
    public function addSwichList(\utilpb\IdInt $value){
     return $this->_add(1, $value);
    }
  }
}

namespace utilpb {

  class MagicArmorInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\MagicArmorPart[]  */
    public $info = array();
    
    /**  @var int */
    public $exteriorId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.MagicArmorInfo');

      // REPEATED MESSAGE info = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\MagicArmorPart';
      $descriptor->addField($f);

      // OPTIONAL INT32 exteriorId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "exteriorId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(1);
    }
    
    /**
     * Clear <info> value
     *
     * @return \utilpb\MagicArmorInfo
     */
    public function clearInfo(){
      return $this->_clear(1);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \utilpb\MagicArmorPart
     */
    public function getInfo($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \utilpb\MagicArmorPart $value
     * @return \utilpb\MagicArmorInfo
     */
    public function setInfo(\utilpb\MagicArmorPart $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \utilpb\MagicArmorPart[]
     */
    public function getInfoList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \utilpb\MagicArmorPart $value
     * @return \utilpb\MagicArmorInfo
     */
    public function addInfo(\utilpb\MagicArmorPart $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <exteriorId> has a value
     *
     * @return boolean
     */
    public function hasExteriorId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <exteriorId> value
     *
     * @return \utilpb\MagicArmorInfo
     */
    public function clearExteriorId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <exteriorId> value
     *
     * @return int
     */
    public function getExteriorId(){
      return $this->_get(2);
    }
    
    /**
     * Set <exteriorId> value
     *
     * @param int $value
     * @return \utilpb\MagicArmorInfo
     */
    public function setExteriorId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class MagicArmorPart extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $star = null;
    
    /**  @var int */
    public $part = null;
    
    /**  @var float */
    public $tm = null;
    
    /**  @var \utilpb\ComposeID */
    public $objId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.MagicArmorPart');

      // OPTIONAL INT32 star = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "star";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 part = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "part";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE tm = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "tm";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE objId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "objId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <star> has a value
     *
     * @return boolean
     */
    public function hasStar(){
      return $this->_has(1);
    }
    
    /**
     * Clear <star> value
     *
     * @return \utilpb\MagicArmorPart
     */
    public function clearStar(){
      return $this->_clear(1);
    }
    
    /**
     * Get <star> value
     *
     * @return int
     */
    public function getStar(){
      return $this->_get(1);
    }
    
    /**
     * Set <star> value
     *
     * @param int $value
     * @return \utilpb\MagicArmorPart
     */
    public function setStar( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <part> has a value
     *
     * @return boolean
     */
    public function hasPart(){
      return $this->_has(2);
    }
    
    /**
     * Clear <part> value
     *
     * @return \utilpb\MagicArmorPart
     */
    public function clearPart(){
      return $this->_clear(2);
    }
    
    /**
     * Get <part> value
     *
     * @return int
     */
    public function getPart(){
      return $this->_get(2);
    }
    
    /**
     * Set <part> value
     *
     * @param int $value
     * @return \utilpb\MagicArmorPart
     */
    public function setPart( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <tm> has a value
     *
     * @return boolean
     */
    public function hasTm(){
      return $this->_has(3);
    }
    
    /**
     * Clear <tm> value
     *
     * @return \utilpb\MagicArmorPart
     */
    public function clearTm(){
      return $this->_clear(3);
    }
    
    /**
     * Get <tm> value
     *
     * @return float
     */
    public function getTm(){
      return $this->_get(3);
    }
    
    /**
     * Set <tm> value
     *
     * @param float $value
     * @return \utilpb\MagicArmorPart
     */
    public function setTm( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <objId> has a value
     *
     * @return boolean
     */
    public function hasObjId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <objId> value
     *
     * @return \utilpb\MagicArmorPart
     */
    public function clearObjId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <objId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getObjId(){
      return $this->_get(4);
    }
    
    /**
     * Set <objId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\MagicArmorPart
     */
    public function setObjId(\utilpb\ComposeID $value){
      return $this->_set(4, $value);
    }
  }
}

