<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/multipk.proto
//   Date: 2014-12-19 08:23:07

namespace utilpb {

  class MultiPkInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $stage = null;
    
    /**  @var int */
    public $flag = null;
    
    /**  @var \utilpb\StageInfo */
    public $info = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.MultiPkInfo');

      // REQUIRED INT32 stage = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "stage";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 flag = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE info = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\StageInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <stage> has a value
     *
     * @return boolean
     */
    public function hasStage(){
      return $this->_has(1);
    }
    
    /**
     * Clear <stage> value
     *
     * @return \utilpb\MultiPkInfo
     */
    public function clearStage(){
      return $this->_clear(1);
    }
    
    /**
     * Get <stage> value
     *
     * @return int
     */
    public function getStage(){
      return $this->_get(1);
    }
    
    /**
     * Set <stage> value
     *
     * @param int $value
     * @return \utilpb\MultiPkInfo
     */
    public function setStage( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(2);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\MultiPkInfo
     */
    public function clearFlag(){
      return $this->_clear(2);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(2);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\MultiPkInfo
     */
    public function setFlag( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(3);
    }
    
    /**
     * Clear <info> value
     *
     * @return \utilpb\MultiPkInfo
     */
    public function clearInfo(){
      return $this->_clear(3);
    }
    
    /**
     * Get <info> value
     *
     * @return \utilpb\StageInfo
     */
    public function getInfo(){
      return $this->_get(3);
    }
    
    /**
     * Set <info> value
     *
     * @param \utilpb\StageInfo $value
     * @return \utilpb\MultiPkInfo
     */
    public function setInfo(\utilpb\StageInfo $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class StageInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\SignUpInfo */
    public $signUp = null;
    
    /**  @var \utilpb\KnockoutInfo */
    public $knockout = null;
    
    /**  @var \utilpb\ChallengeInfo */
    public $challenge = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.StageInfo');

      // OPTIONAL MESSAGE signUp = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "signUp";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\SignUpInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE knockout = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "knockout";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\KnockoutInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE challenge = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "challenge";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ChallengeInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <signUp> has a value
     *
     * @return boolean
     */
    public function hasSignUp(){
      return $this->_has(1);
    }
    
    /**
     * Clear <signUp> value
     *
     * @return \utilpb\StageInfo
     */
    public function clearSignUp(){
      return $this->_clear(1);
    }
    
    /**
     * Get <signUp> value
     *
     * @return \utilpb\SignUpInfo
     */
    public function getSignUp(){
      return $this->_get(1);
    }
    
    /**
     * Set <signUp> value
     *
     * @param \utilpb\SignUpInfo $value
     * @return \utilpb\StageInfo
     */
    public function setSignUp(\utilpb\SignUpInfo $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <knockout> has a value
     *
     * @return boolean
     */
    public function hasKnockout(){
      return $this->_has(2);
    }
    
    /**
     * Clear <knockout> value
     *
     * @return \utilpb\StageInfo
     */
    public function clearKnockout(){
      return $this->_clear(2);
    }
    
    /**
     * Get <knockout> value
     *
     * @return \utilpb\KnockoutInfo
     */
    public function getKnockout(){
      return $this->_get(2);
    }
    
    /**
     * Set <knockout> value
     *
     * @param \utilpb\KnockoutInfo $value
     * @return \utilpb\StageInfo
     */
    public function setKnockout(\utilpb\KnockoutInfo $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <challenge> has a value
     *
     * @return boolean
     */
    public function hasChallenge(){
      return $this->_has(3);
    }
    
    /**
     * Clear <challenge> value
     *
     * @return \utilpb\StageInfo
     */
    public function clearChallenge(){
      return $this->_clear(3);
    }
    
    /**
     * Get <challenge> value
     *
     * @return \utilpb\ChallengeInfo
     */
    public function getChallenge(){
      return $this->_get(3);
    }
    
    /**
     * Set <challenge> value
     *
     * @param \utilpb\ChallengeInfo $value
     * @return \utilpb\StageInfo
     */
    public function setChallenge(\utilpb\ChallengeInfo $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class SignUpInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $count = null;
    
    /**  @var int */
    public $overTime = null;
    
    /**  @var string[]  */
    public $name = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SignUpInfo');

      // REQUIRED INT32 count = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 overTime = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "overTime";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED STRING name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(1);
    }
    
    /**
     * Clear <count> value
     *
     * @return \utilpb\SignUpInfo
     */
    public function clearCount(){
      return $this->_clear(1);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(1);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \utilpb\SignUpInfo
     */
    public function setCount( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <overTime> has a value
     *
     * @return boolean
     */
    public function hasOverTime(){
      return $this->_has(2);
    }
    
    /**
     * Clear <overTime> value
     *
     * @return \utilpb\SignUpInfo
     */
    public function clearOverTime(){
      return $this->_clear(2);
    }
    
    /**
     * Get <overTime> value
     *
     * @return int
     */
    public function getOverTime(){
      return $this->_get(2);
    }
    
    /**
     * Set <overTime> value
     *
     * @param int $value
     * @return \utilpb\SignUpInfo
     */
    public function setOverTime( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\SignUpInfo
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return string
     */
    public function getName($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\SignUpInfo
     */
    public function setName( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return string[]
     */
    public function getNameList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param string $value
     * @return \utilpb\SignUpInfo
     */
    public function addName( $value){
     return $this->_add(3, $value);
    }
  }
}

namespace utilpb {

  class RtSignUp extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $code = null;
    
    /**  @var int */
    public $flag = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.RtSignUp');

      // REQUIRED INT32 code = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 flag = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <code> value
     *
     * @return \utilpb\RtSignUp
     */
    public function clearCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <code> value
     *
     * @return int
     */
    public function getCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <code> value
     *
     * @param int $value
     * @return \utilpb\RtSignUp
     */
    public function setCode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(2);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\RtSignUp
     */
    public function clearFlag(){
      return $this->_clear(2);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(2);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\RtSignUp
     */
    public function setFlag( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class CompetitorInfo extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $fight = null;
    
    /**  @var int */
    public $occ = null;
    
    /**  @var int */
    public $level = null;
    
    /**  @var string */
    public $platId = null;
    
    /**  @var int */
    public $serverId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CompetitorInfo');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 fight = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "fight";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 occ = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "occ";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 level = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING platId = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "platId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 serverId = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "serverId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\CompetitorInfo
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\CompetitorInfo
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <fight> has a value
     *
     * @return boolean
     */
    public function hasFight(){
      return $this->_has(2);
    }
    
    /**
     * Clear <fight> value
     *
     * @return \utilpb\CompetitorInfo
     */
    public function clearFight(){
      return $this->_clear(2);
    }
    
    /**
     * Get <fight> value
     *
     * @return int
     */
    public function getFight(){
      return $this->_get(2);
    }
    
    /**
     * Set <fight> value
     *
     * @param int $value
     * @return \utilpb\CompetitorInfo
     */
    public function setFight( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <occ> has a value
     *
     * @return boolean
     */
    public function hasOcc(){
      return $this->_has(3);
    }
    
    /**
     * Clear <occ> value
     *
     * @return \utilpb\CompetitorInfo
     */
    public function clearOcc(){
      return $this->_clear(3);
    }
    
    /**
     * Get <occ> value
     *
     * @return int
     */
    public function getOcc(){
      return $this->_get(3);
    }
    
    /**
     * Set <occ> value
     *
     * @param int $value
     * @return \utilpb\CompetitorInfo
     */
    public function setOcc( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(4);
    }
    
    /**
     * Clear <level> value
     *
     * @return \utilpb\CompetitorInfo
     */
    public function clearLevel(){
      return $this->_clear(4);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(4);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \utilpb\CompetitorInfo
     */
    public function setLevel( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <platId> has a value
     *
     * @return boolean
     */
    public function hasPlatId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <platId> value
     *
     * @return \utilpb\CompetitorInfo
     */
    public function clearPlatId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <platId> value
     *
     * @return string
     */
    public function getPlatId(){
      return $this->_get(5);
    }
    
    /**
     * Set <platId> value
     *
     * @param string $value
     * @return \utilpb\CompetitorInfo
     */
    public function setPlatId( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <serverId> has a value
     *
     * @return boolean
     */
    public function hasServerId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <serverId> value
     *
     * @return \utilpb\CompetitorInfo
     */
    public function clearServerId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <serverId> value
     *
     * @return int
     */
    public function getServerId(){
      return $this->_get(6);
    }
    
    /**
     * Set <serverId> value
     *
     * @param int $value
     * @return \utilpb\CompetitorInfo
     */
    public function setServerId( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace utilpb {

  class KnockoutInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $round = null;
    
    /**  @var int */
    public $status = null;
    
    /**  @var int */
    public $overTime = null;
    
    /**  @var \utilpb\PartitionInfo[]  */
    public $info = array();
    
    /**  @var \utilpb\CompetitorInfo[]  */
    public $winner = array();
    
    /**  @var \utilpb\CompetitorInfo[]  */
    public $loser = array();
    
    /**  @var \utilpb\LogList */
    public $log = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.KnockoutInfo');

      // REQUIRED INT32 round = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "round";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 status = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 overTime = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "overTime";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\PartitionInfo';
      $descriptor->addField($f);

      // REPEATED MESSAGE winner = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "winner";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\CompetitorInfo';
      $descriptor->addField($f);

      // REPEATED MESSAGE loser = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "loser";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\CompetitorInfo';
      $descriptor->addField($f);

      // REQUIRED MESSAGE log = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "log";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\LogList';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <round> has a value
     *
     * @return boolean
     */
    public function hasRound(){
      return $this->_has(1);
    }
    
    /**
     * Clear <round> value
     *
     * @return \utilpb\KnockoutInfo
     */
    public function clearRound(){
      return $this->_clear(1);
    }
    
    /**
     * Get <round> value
     *
     * @return int
     */
    public function getRound(){
      return $this->_get(1);
    }
    
    /**
     * Set <round> value
     *
     * @param int $value
     * @return \utilpb\KnockoutInfo
     */
    public function setRound( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(2);
    }
    
    /**
     * Clear <status> value
     *
     * @return \utilpb\KnockoutInfo
     */
    public function clearStatus(){
      return $this->_clear(2);
    }
    
    /**
     * Get <status> value
     *
     * @return int
     */
    public function getStatus(){
      return $this->_get(2);
    }
    
    /**
     * Set <status> value
     *
     * @param int $value
     * @return \utilpb\KnockoutInfo
     */
    public function setStatus( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <overTime> has a value
     *
     * @return boolean
     */
    public function hasOverTime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <overTime> value
     *
     * @return \utilpb\KnockoutInfo
     */
    public function clearOverTime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <overTime> value
     *
     * @return int
     */
    public function getOverTime(){
      return $this->_get(3);
    }
    
    /**
     * Set <overTime> value
     *
     * @param int $value
     * @return \utilpb\KnockoutInfo
     */
    public function setOverTime( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(4);
    }
    
    /**
     * Clear <info> value
     *
     * @return \utilpb\KnockoutInfo
     */
    public function clearInfo(){
      return $this->_clear(4);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \utilpb\PartitionInfo
     */
    public function getInfo($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \utilpb\PartitionInfo $value
     * @return \utilpb\KnockoutInfo
     */
    public function setInfo(\utilpb\PartitionInfo $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \utilpb\PartitionInfo[]
     */
    public function getInfoList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \utilpb\PartitionInfo $value
     * @return \utilpb\KnockoutInfo
     */
    public function addInfo(\utilpb\PartitionInfo $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <winner> has a value
     *
     * @return boolean
     */
    public function hasWinner(){
      return $this->_has(5);
    }
    
    /**
     * Clear <winner> value
     *
     * @return \utilpb\KnockoutInfo
     */
    public function clearWinner(){
      return $this->_clear(5);
    }
    
    /**
     * Get <winner> value
     *
     * @param int $idx
     * @return \utilpb\CompetitorInfo
     */
    public function getWinner($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <winner> value
     *
     * @param \utilpb\CompetitorInfo $value
     * @return \utilpb\KnockoutInfo
     */
    public function setWinner(\utilpb\CompetitorInfo $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <winner>
     *
     * @return \utilpb\CompetitorInfo[]
     */
    public function getWinnerList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <winner>
     *
     * @param \utilpb\CompetitorInfo $value
     * @return \utilpb\KnockoutInfo
     */
    public function addWinner(\utilpb\CompetitorInfo $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <loser> has a value
     *
     * @return boolean
     */
    public function hasLoser(){
      return $this->_has(6);
    }
    
    /**
     * Clear <loser> value
     *
     * @return \utilpb\KnockoutInfo
     */
    public function clearLoser(){
      return $this->_clear(6);
    }
    
    /**
     * Get <loser> value
     *
     * @param int $idx
     * @return \utilpb\CompetitorInfo
     */
    public function getLoser($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <loser> value
     *
     * @param \utilpb\CompetitorInfo $value
     * @return \utilpb\KnockoutInfo
     */
    public function setLoser(\utilpb\CompetitorInfo $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <loser>
     *
     * @return \utilpb\CompetitorInfo[]
     */
    public function getLoserList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <loser>
     *
     * @param \utilpb\CompetitorInfo $value
     * @return \utilpb\KnockoutInfo
     */
    public function addLoser(\utilpb\CompetitorInfo $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <log> has a value
     *
     * @return boolean
     */
    public function hasLog(){
      return $this->_has(7);
    }
    
    /**
     * Clear <log> value
     *
     * @return \utilpb\KnockoutInfo
     */
    public function clearLog(){
      return $this->_clear(7);
    }
    
    /**
     * Get <log> value
     *
     * @return \utilpb\LogList
     */
    public function getLog(){
      return $this->_get(7);
    }
    
    /**
     * Set <log> value
     *
     * @param \utilpb\LogList $value
     * @return \utilpb\KnockoutInfo
     */
    public function setLog(\utilpb\LogList $value){
      return $this->_set(7, $value);
    }
  }
}

namespace utilpb {

  class PkGroup extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $a = null;
    
    /**  @var string */
    public $b = null;
    
    /**  @var int */
    public $id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PkGroup');

      // OPTIONAL STRING a = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "a";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING b = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "b";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED INT32 id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <a> has a value
     *
     * @return boolean
     */
    public function hasA(){
      return $this->_has(1);
    }
    
    /**
     * Clear <a> value
     *
     * @return \utilpb\PkGroup
     */
    public function clearA(){
      return $this->_clear(1);
    }
    
    /**
     * Get <a> value
     *
     * @return string
     */
    public function getA(){
      return $this->_get(1);
    }
    
    /**
     * Set <a> value
     *
     * @param string $value
     * @return \utilpb\PkGroup
     */
    public function setA( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <b> has a value
     *
     * @return boolean
     */
    public function hasB(){
      return $this->_has(2);
    }
    
    /**
     * Clear <b> value
     *
     * @return \utilpb\PkGroup
     */
    public function clearB(){
      return $this->_clear(2);
    }
    
    /**
     * Get <b> value
     *
     * @return string
     */
    public function getB(){
      return $this->_get(2);
    }
    
    /**
     * Set <b> value
     *
     * @param string $value
     * @return \utilpb\PkGroup
     */
    public function setB( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\PkGroup
     */
    public function clearId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(3);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \utilpb\PkGroup
     */
    public function setId( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class RoundInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $roundIdx = null;
    
    /**  @var \utilpb\PkGroup[]  */
    public $group = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.RoundInfo');

      // REQUIRED INT32 roundIdx = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "roundIdx";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE group = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "group";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\PkGroup';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <roundIdx> has a value
     *
     * @return boolean
     */
    public function hasRoundIdx(){
      return $this->_has(1);
    }
    
    /**
     * Clear <roundIdx> value
     *
     * @return \utilpb\RoundInfo
     */
    public function clearRoundIdx(){
      return $this->_clear(1);
    }
    
    /**
     * Get <roundIdx> value
     *
     * @return int
     */
    public function getRoundIdx(){
      return $this->_get(1);
    }
    
    /**
     * Set <roundIdx> value
     *
     * @param int $value
     * @return \utilpb\RoundInfo
     */
    public function setRoundIdx( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <group> has a value
     *
     * @return boolean
     */
    public function hasGroup(){
      return $this->_has(2);
    }
    
    /**
     * Clear <group> value
     *
     * @return \utilpb\RoundInfo
     */
    public function clearGroup(){
      return $this->_clear(2);
    }
    
    /**
     * Get <group> value
     *
     * @param int $idx
     * @return \utilpb\PkGroup
     */
    public function getGroup($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <group> value
     *
     * @param \utilpb\PkGroup $value
     * @return \utilpb\RoundInfo
     */
    public function setGroup(\utilpb\PkGroup $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <group>
     *
     * @return \utilpb\PkGroup[]
     */
    public function getGroupList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <group>
     *
     * @param \utilpb\PkGroup $value
     * @return \utilpb\RoundInfo
     */
    public function addGroup(\utilpb\PkGroup $value){
     return $this->_add(2, $value);
    }
  }
}

namespace utilpb {

  class PartitionInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $index = null;
    
    /**  @var \utilpb\RoundInfo[]  */
    public $info = array();
    
    /**  @var string */
    public $king = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PartitionInfo');

      // REQUIRED INT32 index = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\RoundInfo';
      $descriptor->addField($f);

      // OPTIONAL STRING king = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "king";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(1);
    }
    
    /**
     * Clear <index> value
     *
     * @return \utilpb\PartitionInfo
     */
    public function clearIndex(){
      return $this->_clear(1);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(1);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \utilpb\PartitionInfo
     */
    public function setIndex( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(2);
    }
    
    /**
     * Clear <info> value
     *
     * @return \utilpb\PartitionInfo
     */
    public function clearInfo(){
      return $this->_clear(2);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \utilpb\RoundInfo
     */
    public function getInfo($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \utilpb\RoundInfo $value
     * @return \utilpb\PartitionInfo
     */
    public function setInfo(\utilpb\RoundInfo $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \utilpb\RoundInfo[]
     */
    public function getInfoList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \utilpb\RoundInfo $value
     * @return \utilpb\PartitionInfo
     */
    public function addInfo(\utilpb\RoundInfo $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <king> has a value
     *
     * @return boolean
     */
    public function hasKing(){
      return $this->_has(3);
    }
    
    /**
     * Clear <king> value
     *
     * @return \utilpb\PartitionInfo
     */
    public function clearKing(){
      return $this->_clear(3);
    }
    
    /**
     * Get <king> value
     *
     * @return string
     */
    public function getKing(){
      return $this->_get(3);
    }
    
    /**
     * Set <king> value
     *
     * @param string $value
     * @return \utilpb\PartitionInfo
     */
    public function setKing( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class ChallengeInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $stage = null;
    
    /**  @var int */
    public $status = null;
    
    /**  @var int */
    public $overTime = null;
    
    /**  @var \utilpb\ChallengeGroup[]  */
    public $group = array();
    
    /**  @var \utilpb\CompetitorInfo[]  */
    public $winner = array();
    
    /**  @var \utilpb\CompetitorInfo[]  */
    public $loser = array();
    
    /**  @var \utilpb\LogList */
    public $log = null;
    
    /**  @var int */
    public $betFlag = null;
    
    /**  @var int */
    public $watchFlag = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.ChallengeInfo');

      // REQUIRED INT32 stage = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "stage";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 status = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 overTime = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "overTime";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE group = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "group";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\ChallengeGroup';
      $descriptor->addField($f);

      // REPEATED MESSAGE winner = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "winner";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\CompetitorInfo';
      $descriptor->addField($f);

      // REPEATED MESSAGE loser = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "loser";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\CompetitorInfo';
      $descriptor->addField($f);

      // REQUIRED MESSAGE log = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "log";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\LogList';
      $descriptor->addField($f);

      // OPTIONAL INT32 betFlag = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "betFlag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 watchFlag = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "watchFlag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <stage> has a value
     *
     * @return boolean
     */
    public function hasStage(){
      return $this->_has(1);
    }
    
    /**
     * Clear <stage> value
     *
     * @return \utilpb\ChallengeInfo
     */
    public function clearStage(){
      return $this->_clear(1);
    }
    
    /**
     * Get <stage> value
     *
     * @return int
     */
    public function getStage(){
      return $this->_get(1);
    }
    
    /**
     * Set <stage> value
     *
     * @param int $value
     * @return \utilpb\ChallengeInfo
     */
    public function setStage( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(2);
    }
    
    /**
     * Clear <status> value
     *
     * @return \utilpb\ChallengeInfo
     */
    public function clearStatus(){
      return $this->_clear(2);
    }
    
    /**
     * Get <status> value
     *
     * @return int
     */
    public function getStatus(){
      return $this->_get(2);
    }
    
    /**
     * Set <status> value
     *
     * @param int $value
     * @return \utilpb\ChallengeInfo
     */
    public function setStatus( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <overTime> has a value
     *
     * @return boolean
     */
    public function hasOverTime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <overTime> value
     *
     * @return \utilpb\ChallengeInfo
     */
    public function clearOverTime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <overTime> value
     *
     * @return int
     */
    public function getOverTime(){
      return $this->_get(3);
    }
    
    /**
     * Set <overTime> value
     *
     * @param int $value
     * @return \utilpb\ChallengeInfo
     */
    public function setOverTime( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <group> has a value
     *
     * @return boolean
     */
    public function hasGroup(){
      return $this->_has(4);
    }
    
    /**
     * Clear <group> value
     *
     * @return \utilpb\ChallengeInfo
     */
    public function clearGroup(){
      return $this->_clear(4);
    }
    
    /**
     * Get <group> value
     *
     * @param int $idx
     * @return \utilpb\ChallengeGroup
     */
    public function getGroup($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <group> value
     *
     * @param \utilpb\ChallengeGroup $value
     * @return \utilpb\ChallengeInfo
     */
    public function setGroup(\utilpb\ChallengeGroup $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <group>
     *
     * @return \utilpb\ChallengeGroup[]
     */
    public function getGroupList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <group>
     *
     * @param \utilpb\ChallengeGroup $value
     * @return \utilpb\ChallengeInfo
     */
    public function addGroup(\utilpb\ChallengeGroup $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <winner> has a value
     *
     * @return boolean
     */
    public function hasWinner(){
      return $this->_has(5);
    }
    
    /**
     * Clear <winner> value
     *
     * @return \utilpb\ChallengeInfo
     */
    public function clearWinner(){
      return $this->_clear(5);
    }
    
    /**
     * Get <winner> value
     *
     * @param int $idx
     * @return \utilpb\CompetitorInfo
     */
    public function getWinner($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <winner> value
     *
     * @param \utilpb\CompetitorInfo $value
     * @return \utilpb\ChallengeInfo
     */
    public function setWinner(\utilpb\CompetitorInfo $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <winner>
     *
     * @return \utilpb\CompetitorInfo[]
     */
    public function getWinnerList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <winner>
     *
     * @param \utilpb\CompetitorInfo $value
     * @return \utilpb\ChallengeInfo
     */
    public function addWinner(\utilpb\CompetitorInfo $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <loser> has a value
     *
     * @return boolean
     */
    public function hasLoser(){
      return $this->_has(6);
    }
    
    /**
     * Clear <loser> value
     *
     * @return \utilpb\ChallengeInfo
     */
    public function clearLoser(){
      return $this->_clear(6);
    }
    
    /**
     * Get <loser> value
     *
     * @param int $idx
     * @return \utilpb\CompetitorInfo
     */
    public function getLoser($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <loser> value
     *
     * @param \utilpb\CompetitorInfo $value
     * @return \utilpb\ChallengeInfo
     */
    public function setLoser(\utilpb\CompetitorInfo $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <loser>
     *
     * @return \utilpb\CompetitorInfo[]
     */
    public function getLoserList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <loser>
     *
     * @param \utilpb\CompetitorInfo $value
     * @return \utilpb\ChallengeInfo
     */
    public function addLoser(\utilpb\CompetitorInfo $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <log> has a value
     *
     * @return boolean
     */
    public function hasLog(){
      return $this->_has(7);
    }
    
    /**
     * Clear <log> value
     *
     * @return \utilpb\ChallengeInfo
     */
    public function clearLog(){
      return $this->_clear(7);
    }
    
    /**
     * Get <log> value
     *
     * @return \utilpb\LogList
     */
    public function getLog(){
      return $this->_get(7);
    }
    
    /**
     * Set <log> value
     *
     * @param \utilpb\LogList $value
     * @return \utilpb\ChallengeInfo
     */
    public function setLog(\utilpb\LogList $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <betFlag> has a value
     *
     * @return boolean
     */
    public function hasBetFlag(){
      return $this->_has(8);
    }
    
    /**
     * Clear <betFlag> value
     *
     * @return \utilpb\ChallengeInfo
     */
    public function clearBetFlag(){
      return $this->_clear(8);
    }
    
    /**
     * Get <betFlag> value
     *
     * @return int
     */
    public function getBetFlag(){
      return $this->_get(8);
    }
    
    /**
     * Set <betFlag> value
     *
     * @param int $value
     * @return \utilpb\ChallengeInfo
     */
    public function setBetFlag( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <watchFlag> has a value
     *
     * @return boolean
     */
    public function hasWatchFlag(){
      return $this->_has(9);
    }
    
    /**
     * Clear <watchFlag> value
     *
     * @return \utilpb\ChallengeInfo
     */
    public function clearWatchFlag(){
      return $this->_clear(9);
    }
    
    /**
     * Get <watchFlag> value
     *
     * @return int
     */
    public function getWatchFlag(){
      return $this->_get(9);
    }
    
    /**
     * Set <watchFlag> value
     *
     * @param int $value
     * @return \utilpb\ChallengeInfo
     */
    public function setWatchFlag( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace utilpb {

  class ChallengeGroup extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $a = null;
    
    /**  @var string[]  */
    public $bList = array();
    
    /**  @var int */
    public $id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.ChallengeGroup');

      // OPTIONAL STRING a = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "a";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING bList = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "bList";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REQUIRED INT32 id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <a> has a value
     *
     * @return boolean
     */
    public function hasA(){
      return $this->_has(1);
    }
    
    /**
     * Clear <a> value
     *
     * @return \utilpb\ChallengeGroup
     */
    public function clearA(){
      return $this->_clear(1);
    }
    
    /**
     * Get <a> value
     *
     * @return string
     */
    public function getA(){
      return $this->_get(1);
    }
    
    /**
     * Set <a> value
     *
     * @param string $value
     * @return \utilpb\ChallengeGroup
     */
    public function setA( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <bList> has a value
     *
     * @return boolean
     */
    public function hasBList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <bList> value
     *
     * @return \utilpb\ChallengeGroup
     */
    public function clearBList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <bList> value
     *
     * @param int $idx
     * @return string
     */
    public function getBList($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <bList> value
     *
     * @param string $value
     * @return \utilpb\ChallengeGroup
     */
    public function setBList( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <bList>
     *
     * @return string[]
     */
    public function getBListList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <bList>
     *
     * @param string $value
     * @return \utilpb\ChallengeGroup
     */
    public function addBList( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\ChallengeGroup
     */
    public function clearId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(3);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \utilpb\ChallengeGroup
     */
    public function setId( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class ChallengeBet extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $groupId = null;
    
    /**  @var int */
    public $index = null;
    
    /**  @var int */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.ChallengeBet');

      // REQUIRED INT32 groupId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "groupId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 index = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <groupId> has a value
     *
     * @return boolean
     */
    public function hasGroupId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <groupId> value
     *
     * @return \utilpb\ChallengeBet
     */
    public function clearGroupId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <groupId> value
     *
     * @return int
     */
    public function getGroupId(){
      return $this->_get(1);
    }
    
    /**
     * Set <groupId> value
     *
     * @param int $value
     * @return \utilpb\ChallengeBet
     */
    public function setGroupId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(2);
    }
    
    /**
     * Clear <index> value
     *
     * @return \utilpb\ChallengeBet
     */
    public function clearIndex(){
      return $this->_clear(2);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(2);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \utilpb\ChallengeBet
     */
    public function setIndex( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\ChallengeBet
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\ChallengeBet
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class RankInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $index = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $gender = null;
    
    /**  @var int */
    public $occ = null;
    
    /**  @var int */
    public $record = null;
    
    /**  @var int */
    public $time = null;
    
    /**  @var string */
    public $platId = null;
    
    /**  @var int */
    public $serverId = null;
    
    /**  @var float */
    public $charid = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.RankInfo');

      // REQUIRED INT32 index = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 gender = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "gender";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 occ = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "occ";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 record = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "record";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 time = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING platId = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "platId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 serverId = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "serverId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE charid = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "charid";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(1);
    }
    
    /**
     * Clear <index> value
     *
     * @return \utilpb\RankInfo
     */
    public function clearIndex(){
      return $this->_clear(1);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(1);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \utilpb\RankInfo
     */
    public function setIndex( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\RankInfo
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\RankInfo
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <gender> has a value
     *
     * @return boolean
     */
    public function hasGender(){
      return $this->_has(3);
    }
    
    /**
     * Clear <gender> value
     *
     * @return \utilpb\RankInfo
     */
    public function clearGender(){
      return $this->_clear(3);
    }
    
    /**
     * Get <gender> value
     *
     * @return int
     */
    public function getGender(){
      return $this->_get(3);
    }
    
    /**
     * Set <gender> value
     *
     * @param int $value
     * @return \utilpb\RankInfo
     */
    public function setGender( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <occ> has a value
     *
     * @return boolean
     */
    public function hasOcc(){
      return $this->_has(4);
    }
    
    /**
     * Clear <occ> value
     *
     * @return \utilpb\RankInfo
     */
    public function clearOcc(){
      return $this->_clear(4);
    }
    
    /**
     * Get <occ> value
     *
     * @return int
     */
    public function getOcc(){
      return $this->_get(4);
    }
    
    /**
     * Set <occ> value
     *
     * @param int $value
     * @return \utilpb\RankInfo
     */
    public function setOcc( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <record> has a value
     *
     * @return boolean
     */
    public function hasRecord(){
      return $this->_has(5);
    }
    
    /**
     * Clear <record> value
     *
     * @return \utilpb\RankInfo
     */
    public function clearRecord(){
      return $this->_clear(5);
    }
    
    /**
     * Get <record> value
     *
     * @return int
     */
    public function getRecord(){
      return $this->_get(5);
    }
    
    /**
     * Set <record> value
     *
     * @param int $value
     * @return \utilpb\RankInfo
     */
    public function setRecord( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(6);
    }
    
    /**
     * Clear <time> value
     *
     * @return \utilpb\RankInfo
     */
    public function clearTime(){
      return $this->_clear(6);
    }
    
    /**
     * Get <time> value
     *
     * @return int
     */
    public function getTime(){
      return $this->_get(6);
    }
    
    /**
     * Set <time> value
     *
     * @param int $value
     * @return \utilpb\RankInfo
     */
    public function setTime( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <platId> has a value
     *
     * @return boolean
     */
    public function hasPlatId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <platId> value
     *
     * @return \utilpb\RankInfo
     */
    public function clearPlatId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <platId> value
     *
     * @return string
     */
    public function getPlatId(){
      return $this->_get(7);
    }
    
    /**
     * Set <platId> value
     *
     * @param string $value
     * @return \utilpb\RankInfo
     */
    public function setPlatId( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <serverId> has a value
     *
     * @return boolean
     */
    public function hasServerId(){
      return $this->_has(8);
    }
    
    /**
     * Clear <serverId> value
     *
     * @return \utilpb\RankInfo
     */
    public function clearServerId(){
      return $this->_clear(8);
    }
    
    /**
     * Get <serverId> value
     *
     * @return int
     */
    public function getServerId(){
      return $this->_get(8);
    }
    
    /**
     * Set <serverId> value
     *
     * @param int $value
     * @return \utilpb\RankInfo
     */
    public function setServerId( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <charid> has a value
     *
     * @return boolean
     */
    public function hasCharid(){
      return $this->_has(9);
    }
    
    /**
     * Clear <charid> value
     *
     * @return \utilpb\RankInfo
     */
    public function clearCharid(){
      return $this->_clear(9);
    }
    
    /**
     * Get <charid> value
     *
     * @return float
     */
    public function getCharid(){
      return $this->_get(9);
    }
    
    /**
     * Set <charid> value
     *
     * @param float $value
     * @return \utilpb\RankInfo
     */
    public function setCharid( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace utilpb {

  class MultiPkRank extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\RankInfo[]  */
    public $rank = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.MultiPkRank');

      // REPEATED MESSAGE rank = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "rank";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\RankInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <rank> has a value
     *
     * @return boolean
     */
    public function hasRank(){
      return $this->_has(1);
    }
    
    /**
     * Clear <rank> value
     *
     * @return \utilpb\MultiPkRank
     */
    public function clearRank(){
      return $this->_clear(1);
    }
    
    /**
     * Get <rank> value
     *
     * @param int $idx
     * @return \utilpb\RankInfo
     */
    public function getRank($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <rank> value
     *
     * @param \utilpb\RankInfo $value
     * @return \utilpb\MultiPkRank
     */
    public function setRank(\utilpb\RankInfo $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <rank>
     *
     * @return \utilpb\RankInfo[]
     */
    public function getRankList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <rank>
     *
     * @param \utilpb\RankInfo $value
     * @return \utilpb\MultiPkRank
     */
    public function addRank(\utilpb\RankInfo $value){
     return $this->_add(1, $value);
    }
  }
}

namespace utilpb {

  class LogItem extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $winner = array();
    
    /**  @var string[]  */
    public $loser = array();
    
    /**  @var int */
    public $time = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.LogItem');

      // REPEATED STRING winner = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "winner";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING loser = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "loser";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REQUIRED INT32 time = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <winner> has a value
     *
     * @return boolean
     */
    public function hasWinner(){
      return $this->_has(1);
    }
    
    /**
     * Clear <winner> value
     *
     * @return \utilpb\LogItem
     */
    public function clearWinner(){
      return $this->_clear(1);
    }
    
    /**
     * Get <winner> value
     *
     * @param int $idx
     * @return string
     */
    public function getWinner($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <winner> value
     *
     * @param string $value
     * @return \utilpb\LogItem
     */
    public function setWinner( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <winner>
     *
     * @return string[]
     */
    public function getWinnerList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <winner>
     *
     * @param string $value
     * @return \utilpb\LogItem
     */
    public function addWinner( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <loser> has a value
     *
     * @return boolean
     */
    public function hasLoser(){
      return $this->_has(2);
    }
    
    /**
     * Clear <loser> value
     *
     * @return \utilpb\LogItem
     */
    public function clearLoser(){
      return $this->_clear(2);
    }
    
    /**
     * Get <loser> value
     *
     * @param int $idx
     * @return string
     */
    public function getLoser($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <loser> value
     *
     * @param string $value
     * @return \utilpb\LogItem
     */
    public function setLoser( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <loser>
     *
     * @return string[]
     */
    public function getLoserList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <loser>
     *
     * @param string $value
     * @return \utilpb\LogItem
     */
    public function addLoser( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <time> value
     *
     * @return \utilpb\LogItem
     */
    public function clearTime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <time> value
     *
     * @return int
     */
    public function getTime(){
      return $this->_get(3);
    }
    
    /**
     * Set <time> value
     *
     * @param int $value
     * @return \utilpb\LogItem
     */
    public function setTime( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class LogList extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\LogItem[]  */
    public $log = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.LogList');

      // REPEATED MESSAGE log = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "log";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\LogItem';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <log> has a value
     *
     * @return boolean
     */
    public function hasLog(){
      return $this->_has(1);
    }
    
    /**
     * Clear <log> value
     *
     * @return \utilpb\LogList
     */
    public function clearLog(){
      return $this->_clear(1);
    }
    
    /**
     * Get <log> value
     *
     * @param int $idx
     * @return \utilpb\LogItem
     */
    public function getLog($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <log> value
     *
     * @param \utilpb\LogItem $value
     * @return \utilpb\LogList
     */
    public function setLog(\utilpb\LogItem $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <log>
     *
     * @return \utilpb\LogItem[]
     */
    public function getLogList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <log>
     *
     * @param \utilpb\LogItem $value
     * @return \utilpb\LogList
     */
    public function addLog(\utilpb\LogItem $value){
     return $this->_add(1, $value);
    }
  }
}

namespace utilpb {

  class CombatResult extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $flag = null;
    
    /**  @var int */
    public $schedule = null;
    
    /**  @var int */
    public $stage = null;
    
    /**  @var int */
    public $time = null;
    
    /**  @var int */
    public $competitor = null;
    
    /**  @var int */
    public $nextSchedule = null;
    
    /**  @var int */
    public $nextStage = null;
    
    /**  @var int */
    public $rise = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CombatResult');

      // REQUIRED INT32 flag = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 schedule = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "schedule";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 stage = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "stage";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 time = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 competitor = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "competitor";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 nextSchedule = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "nextSchedule";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 nextStage = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "nextStage";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 rise = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "rise";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(1);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\CombatResult
     */
    public function clearFlag(){
      return $this->_clear(1);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(1);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\CombatResult
     */
    public function setFlag( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <schedule> has a value
     *
     * @return boolean
     */
    public function hasSchedule(){
      return $this->_has(2);
    }
    
    /**
     * Clear <schedule> value
     *
     * @return \utilpb\CombatResult
     */
    public function clearSchedule(){
      return $this->_clear(2);
    }
    
    /**
     * Get <schedule> value
     *
     * @return int
     */
    public function getSchedule(){
      return $this->_get(2);
    }
    
    /**
     * Set <schedule> value
     *
     * @param int $value
     * @return \utilpb\CombatResult
     */
    public function setSchedule( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <stage> has a value
     *
     * @return boolean
     */
    public function hasStage(){
      return $this->_has(3);
    }
    
    /**
     * Clear <stage> value
     *
     * @return \utilpb\CombatResult
     */
    public function clearStage(){
      return $this->_clear(3);
    }
    
    /**
     * Get <stage> value
     *
     * @return int
     */
    public function getStage(){
      return $this->_get(3);
    }
    
    /**
     * Set <stage> value
     *
     * @param int $value
     * @return \utilpb\CombatResult
     */
    public function setStage( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(4);
    }
    
    /**
     * Clear <time> value
     *
     * @return \utilpb\CombatResult
     */
    public function clearTime(){
      return $this->_clear(4);
    }
    
    /**
     * Get <time> value
     *
     * @return int
     */
    public function getTime(){
      return $this->_get(4);
    }
    
    /**
     * Set <time> value
     *
     * @param int $value
     * @return \utilpb\CombatResult
     */
    public function setTime( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <competitor> has a value
     *
     * @return boolean
     */
    public function hasCompetitor(){
      return $this->_has(5);
    }
    
    /**
     * Clear <competitor> value
     *
     * @return \utilpb\CombatResult
     */
    public function clearCompetitor(){
      return $this->_clear(5);
    }
    
    /**
     * Get <competitor> value
     *
     * @return int
     */
    public function getCompetitor(){
      return $this->_get(5);
    }
    
    /**
     * Set <competitor> value
     *
     * @param int $value
     * @return \utilpb\CombatResult
     */
    public function setCompetitor( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <nextSchedule> has a value
     *
     * @return boolean
     */
    public function hasNextSchedule(){
      return $this->_has(6);
    }
    
    /**
     * Clear <nextSchedule> value
     *
     * @return \utilpb\CombatResult
     */
    public function clearNextSchedule(){
      return $this->_clear(6);
    }
    
    /**
     * Get <nextSchedule> value
     *
     * @return int
     */
    public function getNextSchedule(){
      return $this->_get(6);
    }
    
    /**
     * Set <nextSchedule> value
     *
     * @param int $value
     * @return \utilpb\CombatResult
     */
    public function setNextSchedule( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <nextStage> has a value
     *
     * @return boolean
     */
    public function hasNextStage(){
      return $this->_has(7);
    }
    
    /**
     * Clear <nextStage> value
     *
     * @return \utilpb\CombatResult
     */
    public function clearNextStage(){
      return $this->_clear(7);
    }
    
    /**
     * Get <nextStage> value
     *
     * @return int
     */
    public function getNextStage(){
      return $this->_get(7);
    }
    
    /**
     * Set <nextStage> value
     *
     * @param int $value
     * @return \utilpb\CombatResult
     */
    public function setNextStage( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <rise> has a value
     *
     * @return boolean
     */
    public function hasRise(){
      return $this->_has(8);
    }
    
    /**
     * Clear <rise> value
     *
     * @return \utilpb\CombatResult
     */
    public function clearRise(){
      return $this->_clear(8);
    }
    
    /**
     * Get <rise> value
     *
     * @return int
     */
    public function getRise(){
      return $this->_get(8);
    }
    
    /**
     * Set <rise> value
     *
     * @param int $value
     * @return \utilpb\CombatResult
     */
    public function setRise( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace utilpb {

  class PkGroupTips extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $schedule = null;
    
    /**  @var int */
    public $stage = null;
    
    /**  @var \utilpb\CompetitorInfo */
    public $cmpA = null;
    
    /**  @var \utilpb\CompetitorInfo[]  */
    public $cmpBList = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PkGroupTips');

      // REQUIRED INT32 schedule = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "schedule";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 stage = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "stage";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE cmpA = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cmpA";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\CompetitorInfo';
      $descriptor->addField($f);

      // REPEATED MESSAGE cmpBList = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "cmpBList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\CompetitorInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <schedule> has a value
     *
     * @return boolean
     */
    public function hasSchedule(){
      return $this->_has(1);
    }
    
    /**
     * Clear <schedule> value
     *
     * @return \utilpb\PkGroupTips
     */
    public function clearSchedule(){
      return $this->_clear(1);
    }
    
    /**
     * Get <schedule> value
     *
     * @return int
     */
    public function getSchedule(){
      return $this->_get(1);
    }
    
    /**
     * Set <schedule> value
     *
     * @param int $value
     * @return \utilpb\PkGroupTips
     */
    public function setSchedule( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <stage> has a value
     *
     * @return boolean
     */
    public function hasStage(){
      return $this->_has(2);
    }
    
    /**
     * Clear <stage> value
     *
     * @return \utilpb\PkGroupTips
     */
    public function clearStage(){
      return $this->_clear(2);
    }
    
    /**
     * Get <stage> value
     *
     * @return int
     */
    public function getStage(){
      return $this->_get(2);
    }
    
    /**
     * Set <stage> value
     *
     * @param int $value
     * @return \utilpb\PkGroupTips
     */
    public function setStage( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cmpA> has a value
     *
     * @return boolean
     */
    public function hasCmpA(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cmpA> value
     *
     * @return \utilpb\PkGroupTips
     */
    public function clearCmpA(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cmpA> value
     *
     * @return \utilpb\CompetitorInfo
     */
    public function getCmpA(){
      return $this->_get(3);
    }
    
    /**
     * Set <cmpA> value
     *
     * @param \utilpb\CompetitorInfo $value
     * @return \utilpb\PkGroupTips
     */
    public function setCmpA(\utilpb\CompetitorInfo $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <cmpBList> has a value
     *
     * @return boolean
     */
    public function hasCmpBList(){
      return $this->_has(4);
    }
    
    /**
     * Clear <cmpBList> value
     *
     * @return \utilpb\PkGroupTips
     */
    public function clearCmpBList(){
      return $this->_clear(4);
    }
    
    /**
     * Get <cmpBList> value
     *
     * @param int $idx
     * @return \utilpb\CompetitorInfo
     */
    public function getCmpBList($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <cmpBList> value
     *
     * @param \utilpb\CompetitorInfo $value
     * @return \utilpb\PkGroupTips
     */
    public function setCmpBList(\utilpb\CompetitorInfo $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <cmpBList>
     *
     * @return \utilpb\CompetitorInfo[]
     */
    public function getCmpBListList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <cmpBList>
     *
     * @param \utilpb\CompetitorInfo $value
     * @return \utilpb\PkGroupTips
     */
    public function addCmpBList(\utilpb\CompetitorInfo $value){
     return $this->_add(4, $value);
    }
  }
}

namespace utilpb {

  class WatchingPk extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $groupId = null;
    
    /**  @var int */
    public $flag = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.WatchingPk');

      // REQUIRED INT32 groupId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "groupId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 flag = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <groupId> has a value
     *
     * @return boolean
     */
    public function hasGroupId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <groupId> value
     *
     * @return \utilpb\WatchingPk
     */
    public function clearGroupId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <groupId> value
     *
     * @return int
     */
    public function getGroupId(){
      return $this->_get(1);
    }
    
    /**
     * Set <groupId> value
     *
     * @param int $value
     * @return \utilpb\WatchingPk
     */
    public function setGroupId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(2);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\WatchingPk
     */
    public function clearFlag(){
      return $this->_clear(2);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(2);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\WatchingPk
     */
    public function setFlag( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class EnterWatch extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $uuid = null;
    
    /**  @var float */
    public $watch = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.EnterWatch');

      // REQUIRED STRING uuid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "uuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE watch = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "watch";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <uuid> has a value
     *
     * @return boolean
     */
    public function hasUuid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <uuid> value
     *
     * @return \utilpb\EnterWatch
     */
    public function clearUuid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <uuid> value
     *
     * @return string
     */
    public function getUuid(){
      return $this->_get(1);
    }
    
    /**
     * Set <uuid> value
     *
     * @param string $value
     * @return \utilpb\EnterWatch
     */
    public function setUuid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <watch> has a value
     *
     * @return boolean
     */
    public function hasWatch(){
      return $this->_has(2);
    }
    
    /**
     * Clear <watch> value
     *
     * @return \utilpb\EnterWatch
     */
    public function clearWatch(){
      return $this->_clear(2);
    }
    
    /**
     * Get <watch> value
     *
     * @return float
     */
    public function getWatch(){
      return $this->_get(2);
    }
    
    /**
     * Set <watch> value
     *
     * @param float $value
     * @return \utilpb\EnterWatch
     */
    public function setWatch( $value){
      return $this->_set(2, $value);
    }
  }
}

