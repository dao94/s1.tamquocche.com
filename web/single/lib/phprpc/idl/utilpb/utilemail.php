<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/utilemail.proto
//   Date: 2014-12-19 08:23:10

namespace utilpb {

  class EmailAddition extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $contribution = null;
    
    /**  @var float */
    public $exp = null;
    
    /**  @var int */
    public $exploit = null;
    
    /**  @var float */
    public $arenaPoint = null;
    
    /**  @var float */
    public $leitaibi = null;
    
    /**  @var float */
    public $honor = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.EmailAddition');

      // OPTIONAL DOUBLE contribution = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "contribution";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE exp = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "exp";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 exploit = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "exploit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE arenaPoint = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "arenaPoint";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE leitaibi = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "leitaibi";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE honor = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "honor";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <contribution> has a value
     *
     * @return boolean
     */
    public function hasContribution(){
      return $this->_has(1);
    }
    
    /**
     * Clear <contribution> value
     *
     * @return \utilpb\EmailAddition
     */
    public function clearContribution(){
      return $this->_clear(1);
    }
    
    /**
     * Get <contribution> value
     *
     * @return float
     */
    public function getContribution(){
      return $this->_get(1);
    }
    
    /**
     * Set <contribution> value
     *
     * @param float $value
     * @return \utilpb\EmailAddition
     */
    public function setContribution( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <exp> has a value
     *
     * @return boolean
     */
    public function hasExp(){
      return $this->_has(2);
    }
    
    /**
     * Clear <exp> value
     *
     * @return \utilpb\EmailAddition
     */
    public function clearExp(){
      return $this->_clear(2);
    }
    
    /**
     * Get <exp> value
     *
     * @return float
     */
    public function getExp(){
      return $this->_get(2);
    }
    
    /**
     * Set <exp> value
     *
     * @param float $value
     * @return \utilpb\EmailAddition
     */
    public function setExp( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <exploit> has a value
     *
     * @return boolean
     */
    public function hasExploit(){
      return $this->_has(3);
    }
    
    /**
     * Clear <exploit> value
     *
     * @return \utilpb\EmailAddition
     */
    public function clearExploit(){
      return $this->_clear(3);
    }
    
    /**
     * Get <exploit> value
     *
     * @return int
     */
    public function getExploit(){
      return $this->_get(3);
    }
    
    /**
     * Set <exploit> value
     *
     * @param int $value
     * @return \utilpb\EmailAddition
     */
    public function setExploit( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <arenaPoint> has a value
     *
     * @return boolean
     */
    public function hasArenaPoint(){
      return $this->_has(4);
    }
    
    /**
     * Clear <arenaPoint> value
     *
     * @return \utilpb\EmailAddition
     */
    public function clearArenaPoint(){
      return $this->_clear(4);
    }
    
    /**
     * Get <arenaPoint> value
     *
     * @return float
     */
    public function getArenaPoint(){
      return $this->_get(4);
    }
    
    /**
     * Set <arenaPoint> value
     *
     * @param float $value
     * @return \utilpb\EmailAddition
     */
    public function setArenaPoint( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <leitaibi> has a value
     *
     * @return boolean
     */
    public function hasLeitaibi(){
      return $this->_has(5);
    }
    
    /**
     * Clear <leitaibi> value
     *
     * @return \utilpb\EmailAddition
     */
    public function clearLeitaibi(){
      return $this->_clear(5);
    }
    
    /**
     * Get <leitaibi> value
     *
     * @return float
     */
    public function getLeitaibi(){
      return $this->_get(5);
    }
    
    /**
     * Set <leitaibi> value
     *
     * @param float $value
     * @return \utilpb\EmailAddition
     */
    public function setLeitaibi( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <honor> has a value
     *
     * @return boolean
     */
    public function hasHonor(){
      return $this->_has(6);
    }
    
    /**
     * Clear <honor> value
     *
     * @return \utilpb\EmailAddition
     */
    public function clearHonor(){
      return $this->_clear(6);
    }
    
    /**
     * Get <honor> value
     *
     * @return float
     */
    public function getHonor(){
      return $this->_get(6);
    }
    
    /**
     * Set <honor> value
     *
     * @param float $value
     * @return \utilpb\EmailAddition
     */
    public function setHonor( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace utilpb {

  class SvEmail extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID[]  */
    public $recvId = array();
    
    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $content = null;
    
    /**  @var \utilpb\UtilItem[]  */
    public $itemList = array();
    
    /**  @var \utilpb\UtilMoney */
    public $moneyList = null;
    
    /**  @var \utilpb\EmailAddition */
    public $other = null;
    
    /**  @var int */
    public $emailtype = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SvEmail');

      // REPEATED MESSAGE recvId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "recvId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED STRING title = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING content = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE itemList = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "itemList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\UtilItem';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE moneyList = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "moneyList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\UtilMoney';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE other = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "other";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\EmailAddition';
      $descriptor->addField($f);

      // OPTIONAL INT32 emailtype = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "emailtype";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <recvId> has a value
     *
     * @return boolean
     */
    public function hasRecvId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <recvId> value
     *
     * @return \utilpb\SvEmail
     */
    public function clearRecvId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <recvId> value
     *
     * @param int $idx
     * @return \utilpb\ComposeID
     */
    public function getRecvId($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <recvId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\SvEmail
     */
    public function setRecvId(\utilpb\ComposeID $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <recvId>
     *
     * @return \utilpb\ComposeID[]
     */
    public function getRecvIdList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <recvId>
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\SvEmail
     */
    public function addRecvId(\utilpb\ComposeID $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(3);
    }
    
    /**
     * Clear <title> value
     *
     * @return \utilpb\SvEmail
     */
    public function clearTitle(){
      return $this->_clear(3);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(3);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \utilpb\SvEmail
     */
    public function setTitle( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(4);
    }
    
    /**
     * Clear <content> value
     *
     * @return \utilpb\SvEmail
     */
    public function clearContent(){
      return $this->_clear(4);
    }
    
    /**
     * Get <content> value
     *
     * @return string
     */
    public function getContent(){
      return $this->_get(4);
    }
    
    /**
     * Set <content> value
     *
     * @param string $value
     * @return \utilpb\SvEmail
     */
    public function setContent( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <itemList> has a value
     *
     * @return boolean
     */
    public function hasItemList(){
      return $this->_has(5);
    }
    
    /**
     * Clear <itemList> value
     *
     * @return \utilpb\SvEmail
     */
    public function clearItemList(){
      return $this->_clear(5);
    }
    
    /**
     * Get <itemList> value
     *
     * @param int $idx
     * @return \utilpb\UtilItem
     */
    public function getItemList($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <itemList> value
     *
     * @param \utilpb\UtilItem $value
     * @return \utilpb\SvEmail
     */
    public function setItemList(\utilpb\UtilItem $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <itemList>
     *
     * @return \utilpb\UtilItem[]
     */
    public function getItemListList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <itemList>
     *
     * @param \utilpb\UtilItem $value
     * @return \utilpb\SvEmail
     */
    public function addItemList(\utilpb\UtilItem $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <moneyList> has a value
     *
     * @return boolean
     */
    public function hasMoneyList(){
      return $this->_has(6);
    }
    
    /**
     * Clear <moneyList> value
     *
     * @return \utilpb\SvEmail
     */
    public function clearMoneyList(){
      return $this->_clear(6);
    }
    
    /**
     * Get <moneyList> value
     *
     * @return \utilpb\UtilMoney
     */
    public function getMoneyList(){
      return $this->_get(6);
    }
    
    /**
     * Set <moneyList> value
     *
     * @param \utilpb\UtilMoney $value
     * @return \utilpb\SvEmail
     */
    public function setMoneyList(\utilpb\UtilMoney $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <other> has a value
     *
     * @return boolean
     */
    public function hasOther(){
      return $this->_has(7);
    }
    
    /**
     * Clear <other> value
     *
     * @return \utilpb\SvEmail
     */
    public function clearOther(){
      return $this->_clear(7);
    }
    
    /**
     * Get <other> value
     *
     * @return \utilpb\EmailAddition
     */
    public function getOther(){
      return $this->_get(7);
    }
    
    /**
     * Set <other> value
     *
     * @param \utilpb\EmailAddition $value
     * @return \utilpb\SvEmail
     */
    public function setOther(\utilpb\EmailAddition $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <emailtype> has a value
     *
     * @return boolean
     */
    public function hasEmailtype(){
      return $this->_has(8);
    }
    
    /**
     * Clear <emailtype> value
     *
     * @return \utilpb\SvEmail
     */
    public function clearEmailtype(){
      return $this->_clear(8);
    }
    
    /**
     * Get <emailtype> value
     *
     * @return int
     */
    public function getEmailtype(){
      return $this->_get(8);
    }
    
    /**
     * Set <emailtype> value
     *
     * @param int $value
     * @return \utilpb\SvEmail
     */
    public function setEmailtype( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace utilpb {

  class SvEmailList extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\SvEmail[]  */
    public $email = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SvEmailList');

      // REPEATED MESSAGE email = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "email";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\SvEmail';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <email> has a value
     *
     * @return boolean
     */
    public function hasEmail(){
      return $this->_has(1);
    }
    
    /**
     * Clear <email> value
     *
     * @return \utilpb\SvEmailList
     */
    public function clearEmail(){
      return $this->_clear(1);
    }
    
    /**
     * Get <email> value
     *
     * @param int $idx
     * @return \utilpb\SvEmail
     */
    public function getEmail($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <email> value
     *
     * @param \utilpb\SvEmail $value
     * @return \utilpb\SvEmailList
     */
    public function setEmail(\utilpb\SvEmail $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <email>
     *
     * @return \utilpb\SvEmail[]
     */
    public function getEmailList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <email>
     *
     * @param \utilpb\SvEmail $value
     * @return \utilpb\SvEmailList
     */
    public function addEmail(\utilpb\SvEmail $value){
     return $this->_add(1, $value);
    }
  }
}

namespace utilpb {

  class BackStageEmail extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\charList[]  */
    public $list = array();
    
    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $content = null;
    
    /**  @var \utilpb\UtilItem[]  */
    public $itemList = array();
    
    /**  @var \utilpb\UtilMoney */
    public $moneyList = null;
    
    /**  @var \utilpb\EmailAddition */
    public $other = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.BackStageEmail');

      // REPEATED MESSAGE list = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "list";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\charList';
      $descriptor->addField($f);

      // REQUIRED STRING title = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING content = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE itemList = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "itemList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\UtilItem';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE moneyList = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "moneyList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\UtilMoney';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE other = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "other";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\EmailAddition';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <list> has a value
     *
     * @return boolean
     */
    public function hasList(){
      return $this->_has(1);
    }
    
    /**
     * Clear <list> value
     *
     * @return \utilpb\BackStageEmail
     */
    public function clearList(){
      return $this->_clear(1);
    }
    
    /**
     * Get <list> value
     *
     * @param int $idx
     * @return \utilpb\charList
     */
    public function getList($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <list> value
     *
     * @param \utilpb\charList $value
     * @return \utilpb\BackStageEmail
     */
    public function setList(\utilpb\charList $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <list>
     *
     * @return \utilpb\charList[]
     */
    public function getListList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <list>
     *
     * @param \utilpb\charList $value
     * @return \utilpb\BackStageEmail
     */
    public function addList(\utilpb\charList $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <title> value
     *
     * @return \utilpb\BackStageEmail
     */
    public function clearTitle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(2);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \utilpb\BackStageEmail
     */
    public function setTitle( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(3);
    }
    
    /**
     * Clear <content> value
     *
     * @return \utilpb\BackStageEmail
     */
    public function clearContent(){
      return $this->_clear(3);
    }
    
    /**
     * Get <content> value
     *
     * @return string
     */
    public function getContent(){
      return $this->_get(3);
    }
    
    /**
     * Set <content> value
     *
     * @param string $value
     * @return \utilpb\BackStageEmail
     */
    public function setContent( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <itemList> has a value
     *
     * @return boolean
     */
    public function hasItemList(){
      return $this->_has(4);
    }
    
    /**
     * Clear <itemList> value
     *
     * @return \utilpb\BackStageEmail
     */
    public function clearItemList(){
      return $this->_clear(4);
    }
    
    /**
     * Get <itemList> value
     *
     * @param int $idx
     * @return \utilpb\UtilItem
     */
    public function getItemList($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <itemList> value
     *
     * @param \utilpb\UtilItem $value
     * @return \utilpb\BackStageEmail
     */
    public function setItemList(\utilpb\UtilItem $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <itemList>
     *
     * @return \utilpb\UtilItem[]
     */
    public function getItemListList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <itemList>
     *
     * @param \utilpb\UtilItem $value
     * @return \utilpb\BackStageEmail
     */
    public function addItemList(\utilpb\UtilItem $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <moneyList> has a value
     *
     * @return boolean
     */
    public function hasMoneyList(){
      return $this->_has(5);
    }
    
    /**
     * Clear <moneyList> value
     *
     * @return \utilpb\BackStageEmail
     */
    public function clearMoneyList(){
      return $this->_clear(5);
    }
    
    /**
     * Get <moneyList> value
     *
     * @return \utilpb\UtilMoney
     */
    public function getMoneyList(){
      return $this->_get(5);
    }
    
    /**
     * Set <moneyList> value
     *
     * @param \utilpb\UtilMoney $value
     * @return \utilpb\BackStageEmail
     */
    public function setMoneyList(\utilpb\UtilMoney $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <other> has a value
     *
     * @return boolean
     */
    public function hasOther(){
      return $this->_has(6);
    }
    
    /**
     * Clear <other> value
     *
     * @return \utilpb\BackStageEmail
     */
    public function clearOther(){
      return $this->_clear(6);
    }
    
    /**
     * Get <other> value
     *
     * @return \utilpb\EmailAddition
     */
    public function getOther(){
      return $this->_get(6);
    }
    
    /**
     * Set <other> value
     *
     * @param \utilpb\EmailAddition $value
     * @return \utilpb\BackStageEmail
     */
    public function setOther(\utilpb\EmailAddition $value){
      return $this->_set(6, $value);
    }
  }
}

namespace utilpb {

  class charList extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $charId = null;
    
    /**  @var string */
    public $emailId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.charList');

      // REQUIRED DOUBLE charId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "charId";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING emailId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "emailId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <charId> has a value
     *
     * @return boolean
     */
    public function hasCharId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <charId> value
     *
     * @return \utilpb\charList
     */
    public function clearCharId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <charId> value
     *
     * @return float
     */
    public function getCharId(){
      return $this->_get(1);
    }
    
    /**
     * Set <charId> value
     *
     * @param float $value
     * @return \utilpb\charList
     */
    public function setCharId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <emailId> has a value
     *
     * @return boolean
     */
    public function hasEmailId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <emailId> value
     *
     * @return \utilpb\charList
     */
    public function clearEmailId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <emailId> value
     *
     * @return string
     */
    public function getEmailId(){
      return $this->_get(2);
    }
    
    /**
     * Set <emailId> value
     *
     * @param string $value
     * @return \utilpb\charList
     */
    public function setEmailId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class BackStageEmailList extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\BackStageEmail[]  */
    public $email = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.BackStageEmailList');

      // REPEATED MESSAGE email = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "email";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\BackStageEmail';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <email> has a value
     *
     * @return boolean
     */
    public function hasEmail(){
      return $this->_has(1);
    }
    
    /**
     * Clear <email> value
     *
     * @return \utilpb\BackStageEmailList
     */
    public function clearEmail(){
      return $this->_clear(1);
    }
    
    /**
     * Get <email> value
     *
     * @param int $idx
     * @return \utilpb\BackStageEmail
     */
    public function getEmail($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <email> value
     *
     * @param \utilpb\BackStageEmail $value
     * @return \utilpb\BackStageEmailList
     */
    public function setEmail(\utilpb\BackStageEmail $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <email>
     *
     * @return \utilpb\BackStageEmail[]
     */
    public function getEmailList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <email>
     *
     * @param \utilpb\BackStageEmail $value
     * @return \utilpb\BackStageEmailList
     */
    public function addEmail(\utilpb\BackStageEmail $value){
     return $this->_add(1, $value);
    }
  }
}

namespace utilpb {

  class BackSendEmail extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var int */
    public $state = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.BackSendEmail');

      // REQUIRED STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 state = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\BackSendEmail
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \utilpb\BackSendEmail
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(2);
    }
    
    /**
     * Clear <state> value
     *
     * @return \utilpb\BackSendEmail
     */
    public function clearState(){
      return $this->_clear(2);
    }
    
    /**
     * Get <state> value
     *
     * @return int
     */
    public function getState(){
      return $this->_get(2);
    }
    
    /**
     * Set <state> value
     *
     * @param int $value
     * @return \utilpb\BackSendEmail
     */
    public function setState( $value){
      return $this->_set(2, $value);
    }
  }
}

