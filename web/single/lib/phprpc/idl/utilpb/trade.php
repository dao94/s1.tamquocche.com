<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/trade.proto
//   Date: 2014-12-19 08:23:09

namespace utilpb {

  class TradeToSv extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\UtilItem[]  */
    public $uItem = array();
    
    /**  @var \utilpb\UtilMoney */
    public $money = null;
    
    /**  @var int */
    public $code = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.TradeToSv');

      // REPEATED MESSAGE uItem = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "uItem";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\UtilItem';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE money = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "money";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\UtilMoney';
      $descriptor->addField($f);

      // REQUIRED INT32 code = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <uItem> has a value
     *
     * @return boolean
     */
    public function hasUItem(){
      return $this->_has(1);
    }
    
    /**
     * Clear <uItem> value
     *
     * @return \utilpb\TradeToSv
     */
    public function clearUItem(){
      return $this->_clear(1);
    }
    
    /**
     * Get <uItem> value
     *
     * @param int $idx
     * @return \utilpb\UtilItem
     */
    public function getUItem($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <uItem> value
     *
     * @param \utilpb\UtilItem $value
     * @return \utilpb\TradeToSv
     */
    public function setUItem(\utilpb\UtilItem $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <uItem>
     *
     * @return \utilpb\UtilItem[]
     */
    public function getUItemList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <uItem>
     *
     * @param \utilpb\UtilItem $value
     * @return \utilpb\TradeToSv
     */
    public function addUItem(\utilpb\UtilItem $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <money> has a value
     *
     * @return boolean
     */
    public function hasMoney(){
      return $this->_has(2);
    }
    
    /**
     * Clear <money> value
     *
     * @return \utilpb\TradeToSv
     */
    public function clearMoney(){
      return $this->_clear(2);
    }
    
    /**
     * Get <money> value
     *
     * @return \utilpb\UtilMoney
     */
    public function getMoney(){
      return $this->_get(2);
    }
    
    /**
     * Set <money> value
     *
     * @param \utilpb\UtilMoney $value
     * @return \utilpb\TradeToSv
     */
    public function setMoney(\utilpb\UtilMoney $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(3);
    }
    
    /**
     * Clear <code> value
     *
     * @return \utilpb\TradeToSv
     */
    public function clearCode(){
      return $this->_clear(3);
    }
    
    /**
     * Get <code> value
     *
     * @return int
     */
    public function getCode(){
      return $this->_get(3);
    }
    
    /**
     * Set <code> value
     *
     * @param int $value
     * @return \utilpb\TradeToSv
     */
    public function setCode( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class TradeToClient extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var \utilpb\UtilItem[]  */
    public $uItem = array();
    
    /**  @var \utilpb\UtilMoney */
    public $money = null;
    
    /**  @var int */
    public $flag = null;
    
    /**  @var int */
    public $level = null;
    
    /**  @var int */
    public $gender = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.TradeToClient');

      // REQUIRED MESSAGE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE uItem = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "uItem";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\UtilItem';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE money = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "money";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\UtilMoney';
      $descriptor->addField($f);

      // REQUIRED INT32 flag = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 level = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 gender = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "gender";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\TradeToClient
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\TradeToClient
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\TradeToClient
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\TradeToClient
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <uItem> has a value
     *
     * @return boolean
     */
    public function hasUItem(){
      return $this->_has(3);
    }
    
    /**
     * Clear <uItem> value
     *
     * @return \utilpb\TradeToClient
     */
    public function clearUItem(){
      return $this->_clear(3);
    }
    
    /**
     * Get <uItem> value
     *
     * @param int $idx
     * @return \utilpb\UtilItem
     */
    public function getUItem($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <uItem> value
     *
     * @param \utilpb\UtilItem $value
     * @return \utilpb\TradeToClient
     */
    public function setUItem(\utilpb\UtilItem $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <uItem>
     *
     * @return \utilpb\UtilItem[]
     */
    public function getUItemList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <uItem>
     *
     * @param \utilpb\UtilItem $value
     * @return \utilpb\TradeToClient
     */
    public function addUItem(\utilpb\UtilItem $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <money> has a value
     *
     * @return boolean
     */
    public function hasMoney(){
      return $this->_has(4);
    }
    
    /**
     * Clear <money> value
     *
     * @return \utilpb\TradeToClient
     */
    public function clearMoney(){
      return $this->_clear(4);
    }
    
    /**
     * Get <money> value
     *
     * @return \utilpb\UtilMoney
     */
    public function getMoney(){
      return $this->_get(4);
    }
    
    /**
     * Set <money> value
     *
     * @param \utilpb\UtilMoney $value
     * @return \utilpb\TradeToClient
     */
    public function setMoney(\utilpb\UtilMoney $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(5);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\TradeToClient
     */
    public function clearFlag(){
      return $this->_clear(5);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(5);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\TradeToClient
     */
    public function setFlag( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(6);
    }
    
    /**
     * Clear <level> value
     *
     * @return \utilpb\TradeToClient
     */
    public function clearLevel(){
      return $this->_clear(6);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(6);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \utilpb\TradeToClient
     */
    public function setLevel( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <gender> has a value
     *
     * @return boolean
     */
    public function hasGender(){
      return $this->_has(7);
    }
    
    /**
     * Clear <gender> value
     *
     * @return \utilpb\TradeToClient
     */
    public function clearGender(){
      return $this->_clear(7);
    }
    
    /**
     * Get <gender> value
     *
     * @return int
     */
    public function getGender(){
      return $this->_get(7);
    }
    
    /**
     * Set <gender> value
     *
     * @param int $value
     * @return \utilpb\TradeToClient
     */
    public function setGender( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace utilpb {

  class TradeToClientList extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\TradeList[]  */
    public $list = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.TradeToClientList');

      // REPEATED MESSAGE list = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "list";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\TradeList';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <list> has a value
     *
     * @return boolean
     */
    public function hasList(){
      return $this->_has(1);
    }
    
    /**
     * Clear <list> value
     *
     * @return \utilpb\TradeToClientList
     */
    public function clearList(){
      return $this->_clear(1);
    }
    
    /**
     * Get <list> value
     *
     * @param int $idx
     * @return \utilpb\TradeList
     */
    public function getList($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <list> value
     *
     * @param \utilpb\TradeList $value
     * @return \utilpb\TradeToClientList
     */
    public function setList(\utilpb\TradeList $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <list>
     *
     * @return \utilpb\TradeList[]
     */
    public function getListList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <list>
     *
     * @param \utilpb\TradeList $value
     * @return \utilpb\TradeToClientList
     */
    public function addList(\utilpb\TradeList $value){
     return $this->_add(1, $value);
    }
  }
}

namespace utilpb {

  class TradeList extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $level = null;
    
    /**  @var int */
    public $sex = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.TradeList');

      // REQUIRED MESSAGE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 level = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 sex = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "sex";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\TradeList
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\TradeList
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\TradeList
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\TradeList
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(3);
    }
    
    /**
     * Clear <level> value
     *
     * @return \utilpb\TradeList
     */
    public function clearLevel(){
      return $this->_clear(3);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(3);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \utilpb\TradeList
     */
    public function setLevel( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <sex> has a value
     *
     * @return boolean
     */
    public function hasSex(){
      return $this->_has(4);
    }
    
    /**
     * Clear <sex> value
     *
     * @return \utilpb\TradeList
     */
    public function clearSex(){
      return $this->_clear(4);
    }
    
    /**
     * Get <sex> value
     *
     * @return int
     */
    public function getSex(){
      return $this->_get(4);
    }
    
    /**
     * Set <sex> value
     *
     * @param int $value
     * @return \utilpb\TradeList
     */
    public function setSex( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class TradeCheck extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\UtilItem[]  */
    public $myUitem = array();
    
    /**  @var \utilpb\UtilMoney */
    public $money = null;
    
    /**  @var \utilpb\UtilItem[]  */
    public $otherUitem = array();
    
    /**  @var \utilpb\UtilMoney */
    public $otherMoney = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.TradeCheck');

      // REPEATED MESSAGE myUitem = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "myUitem";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\UtilItem';
      $descriptor->addField($f);

      // REQUIRED MESSAGE money = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "money";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\UtilMoney';
      $descriptor->addField($f);

      // REPEATED MESSAGE otherUitem = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "otherUitem";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\UtilItem';
      $descriptor->addField($f);

      // REQUIRED MESSAGE otherMoney = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "otherMoney";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\UtilMoney';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <myUitem> has a value
     *
     * @return boolean
     */
    public function hasMyUitem(){
      return $this->_has(1);
    }
    
    /**
     * Clear <myUitem> value
     *
     * @return \utilpb\TradeCheck
     */
    public function clearMyUitem(){
      return $this->_clear(1);
    }
    
    /**
     * Get <myUitem> value
     *
     * @param int $idx
     * @return \utilpb\UtilItem
     */
    public function getMyUitem($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <myUitem> value
     *
     * @param \utilpb\UtilItem $value
     * @return \utilpb\TradeCheck
     */
    public function setMyUitem(\utilpb\UtilItem $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <myUitem>
     *
     * @return \utilpb\UtilItem[]
     */
    public function getMyUitemList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <myUitem>
     *
     * @param \utilpb\UtilItem $value
     * @return \utilpb\TradeCheck
     */
    public function addMyUitem(\utilpb\UtilItem $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <money> has a value
     *
     * @return boolean
     */
    public function hasMoney(){
      return $this->_has(2);
    }
    
    /**
     * Clear <money> value
     *
     * @return \utilpb\TradeCheck
     */
    public function clearMoney(){
      return $this->_clear(2);
    }
    
    /**
     * Get <money> value
     *
     * @return \utilpb\UtilMoney
     */
    public function getMoney(){
      return $this->_get(2);
    }
    
    /**
     * Set <money> value
     *
     * @param \utilpb\UtilMoney $value
     * @return \utilpb\TradeCheck
     */
    public function setMoney(\utilpb\UtilMoney $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <otherUitem> has a value
     *
     * @return boolean
     */
    public function hasOtherUitem(){
      return $this->_has(3);
    }
    
    /**
     * Clear <otherUitem> value
     *
     * @return \utilpb\TradeCheck
     */
    public function clearOtherUitem(){
      return $this->_clear(3);
    }
    
    /**
     * Get <otherUitem> value
     *
     * @param int $idx
     * @return \utilpb\UtilItem
     */
    public function getOtherUitem($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <otherUitem> value
     *
     * @param \utilpb\UtilItem $value
     * @return \utilpb\TradeCheck
     */
    public function setOtherUitem(\utilpb\UtilItem $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <otherUitem>
     *
     * @return \utilpb\UtilItem[]
     */
    public function getOtherUitemList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <otherUitem>
     *
     * @param \utilpb\UtilItem $value
     * @return \utilpb\TradeCheck
     */
    public function addOtherUitem(\utilpb\UtilItem $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <otherMoney> has a value
     *
     * @return boolean
     */
    public function hasOtherMoney(){
      return $this->_has(4);
    }
    
    /**
     * Clear <otherMoney> value
     *
     * @return \utilpb\TradeCheck
     */
    public function clearOtherMoney(){
      return $this->_clear(4);
    }
    
    /**
     * Get <otherMoney> value
     *
     * @return \utilpb\UtilMoney
     */
    public function getOtherMoney(){
      return $this->_get(4);
    }
    
    /**
     * Set <otherMoney> value
     *
     * @param \utilpb\UtilMoney $value
     * @return \utilpb\TradeCheck
     */
    public function setOtherMoney(\utilpb\UtilMoney $value){
      return $this->_set(4, $value);
    }
  }
}

