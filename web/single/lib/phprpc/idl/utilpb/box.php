<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/box.proto
//   Date: 2014-12-19 08:23:05

namespace utilpb {

  class BoxStart extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $type = null;
    
    /**  @var int */
    public $count = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.BoxStart');

      // REQUIRED INT32 type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 count = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\BoxStart
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\BoxStart
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(2);
    }
    
    /**
     * Clear <count> value
     *
     * @return \utilpb\BoxStart
     */
    public function clearCount(){
      return $this->_clear(2);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(2);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \utilpb\BoxStart
     */
    public function setCount( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class Broadcast extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $type = null;
    
    /**  @var \utilpb\UtilItem */
    public $item = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.Broadcast');

      // REQUIRED MESSAGE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE item = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "item";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\UtilItem';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\Broadcast
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\Broadcast
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\Broadcast
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\Broadcast
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\Broadcast
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\Broadcast
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <item> has a value
     *
     * @return boolean
     */
    public function hasItem(){
      return $this->_has(4);
    }
    
    /**
     * Clear <item> value
     *
     * @return \utilpb\Broadcast
     */
    public function clearItem(){
      return $this->_clear(4);
    }
    
    /**
     * Get <item> value
     *
     * @return \utilpb\UtilItem
     */
    public function getItem(){
      return $this->_get(4);
    }
    
    /**
     * Set <item> value
     *
     * @param \utilpb\UtilItem $value
     * @return \utilpb\Broadcast
     */
    public function setItem(\utilpb\UtilItem $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class BroadcastList extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\Broadcast[]  */
    public $bd = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.BroadcastList');

      // REPEATED MESSAGE bd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bd";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\Broadcast';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <bd> has a value
     *
     * @return boolean
     */
    public function hasBd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bd> value
     *
     * @return \utilpb\BroadcastList
     */
    public function clearBd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bd> value
     *
     * @param int $idx
     * @return \utilpb\Broadcast
     */
    public function getBd($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <bd> value
     *
     * @param \utilpb\Broadcast $value
     * @return \utilpb\BroadcastList
     */
    public function setBd(\utilpb\Broadcast $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <bd>
     *
     * @return \utilpb\Broadcast[]
     */
    public function getBdList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <bd>
     *
     * @param \utilpb\Broadcast $value
     * @return \utilpb\BroadcastList
     */
    public function addBd(\utilpb\Broadcast $value){
     return $this->_add(1, $value);
    }
  }
}

namespace utilpb {

  class MyStoreBroadcast extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $itemId = null;
    
    /**  @var int */
    public $money = null;
    
    /**  @var int */
    public $moneyType = null;
    
    /**  @var int */
    public $number = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.MyStoreBroadcast');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING itemId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "itemId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 money = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "money";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 moneyType = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "moneyType";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 number = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\MyStoreBroadcast
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\MyStoreBroadcast
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <itemId> has a value
     *
     * @return boolean
     */
    public function hasItemId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <itemId> value
     *
     * @return \utilpb\MyStoreBroadcast
     */
    public function clearItemId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <itemId> value
     *
     * @return string
     */
    public function getItemId(){
      return $this->_get(2);
    }
    
    /**
     * Set <itemId> value
     *
     * @param string $value
     * @return \utilpb\MyStoreBroadcast
     */
    public function setItemId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <money> has a value
     *
     * @return boolean
     */
    public function hasMoney(){
      return $this->_has(3);
    }
    
    /**
     * Clear <money> value
     *
     * @return \utilpb\MyStoreBroadcast
     */
    public function clearMoney(){
      return $this->_clear(3);
    }
    
    /**
     * Get <money> value
     *
     * @return int
     */
    public function getMoney(){
      return $this->_get(3);
    }
    
    /**
     * Set <money> value
     *
     * @param int $value
     * @return \utilpb\MyStoreBroadcast
     */
    public function setMoney( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <moneyType> has a value
     *
     * @return boolean
     */
    public function hasMoneyType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <moneyType> value
     *
     * @return \utilpb\MyStoreBroadcast
     */
    public function clearMoneyType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <moneyType> value
     *
     * @return int
     */
    public function getMoneyType(){
      return $this->_get(4);
    }
    
    /**
     * Set <moneyType> value
     *
     * @param int $value
     * @return \utilpb\MyStoreBroadcast
     */
    public function setMoneyType( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <number> has a value
     *
     * @return boolean
     */
    public function hasNumber(){
      return $this->_has(5);
    }
    
    /**
     * Clear <number> value
     *
     * @return \utilpb\MyStoreBroadcast
     */
    public function clearNumber(){
      return $this->_clear(5);
    }
    
    /**
     * Get <number> value
     *
     * @return int
     */
    public function getNumber(){
      return $this->_get(5);
    }
    
    /**
     * Set <number> value
     *
     * @param int $value
     * @return \utilpb\MyStoreBroadcast
     */
    public function setNumber( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace utilpb {

  class MyStoreBroadcastList extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\MyStoreBroadcast[]  */
    public $bd = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.MyStoreBroadcastList');

      // REPEATED MESSAGE bd = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bd";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\MyStoreBroadcast';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <bd> has a value
     *
     * @return boolean
     */
    public function hasBd(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bd> value
     *
     * @return \utilpb\MyStoreBroadcastList
     */
    public function clearBd(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bd> value
     *
     * @param int $idx
     * @return \utilpb\MyStoreBroadcast
     */
    public function getBd($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <bd> value
     *
     * @param \utilpb\MyStoreBroadcast $value
     * @return \utilpb\MyStoreBroadcastList
     */
    public function setBd(\utilpb\MyStoreBroadcast $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <bd>
     *
     * @return \utilpb\MyStoreBroadcast[]
     */
    public function getBdList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <bd>
     *
     * @param \utilpb\MyStoreBroadcast $value
     * @return \utilpb\MyStoreBroadcastList
     */
    public function addBd(\utilpb\MyStoreBroadcast $value){
     return $this->_add(1, $value);
    }
  }
}

