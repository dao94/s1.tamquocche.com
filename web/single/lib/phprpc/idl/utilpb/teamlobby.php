<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/teamlobby.proto
//   Date: 2014-12-19 08:23:09

namespace utilpb {

  class CrossTeam extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $teamId = null;
    
    /**  @var \utilpb\Member[]  */
    public $mList = array();
    
    /**  @var \utilpb\ComposeID */
    public $leader = null;
    
    /**  @var int */
    public $fighting = null;
    
    /**  @var int[]  */
    public $flag = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CrossTeam');

      // REQUIRED STRING teamId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "teamId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE mList = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\Member';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE leader = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "leader";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL INT32 fighting = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "fighting";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED INT32 flag = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <teamId> has a value
     *
     * @return boolean
     */
    public function hasTeamId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <teamId> value
     *
     * @return \utilpb\CrossTeam
     */
    public function clearTeamId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <teamId> value
     *
     * @return string
     */
    public function getTeamId(){
      return $this->_get(1);
    }
    
    /**
     * Set <teamId> value
     *
     * @param string $value
     * @return \utilpb\CrossTeam
     */
    public function setTeamId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <mList> has a value
     *
     * @return boolean
     */
    public function hasMList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <mList> value
     *
     * @return \utilpb\CrossTeam
     */
    public function clearMList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <mList> value
     *
     * @param int $idx
     * @return \utilpb\Member
     */
    public function getMList($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <mList> value
     *
     * @param \utilpb\Member $value
     * @return \utilpb\CrossTeam
     */
    public function setMList(\utilpb\Member $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <mList>
     *
     * @return \utilpb\Member[]
     */
    public function getMListList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <mList>
     *
     * @param \utilpb\Member $value
     * @return \utilpb\CrossTeam
     */
    public function addMList(\utilpb\Member $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <leader> has a value
     *
     * @return boolean
     */
    public function hasLeader(){
      return $this->_has(3);
    }
    
    /**
     * Clear <leader> value
     *
     * @return \utilpb\CrossTeam
     */
    public function clearLeader(){
      return $this->_clear(3);
    }
    
    /**
     * Get <leader> value
     *
     * @return \utilpb\ComposeID
     */
    public function getLeader(){
      return $this->_get(3);
    }
    
    /**
     * Set <leader> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\CrossTeam
     */
    public function setLeader(\utilpb\ComposeID $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <fighting> has a value
     *
     * @return boolean
     */
    public function hasFighting(){
      return $this->_has(4);
    }
    
    /**
     * Clear <fighting> value
     *
     * @return \utilpb\CrossTeam
     */
    public function clearFighting(){
      return $this->_clear(4);
    }
    
    /**
     * Get <fighting> value
     *
     * @return int
     */
    public function getFighting(){
      return $this->_get(4);
    }
    
    /**
     * Set <fighting> value
     *
     * @param int $value
     * @return \utilpb\CrossTeam
     */
    public function setFighting( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(5);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\CrossTeam
     */
    public function clearFlag(){
      return $this->_clear(5);
    }
    
    /**
     * Get <flag> value
     *
     * @param int $idx
     * @return int
     */
    public function getFlag($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\CrossTeam
     */
    public function setFlag( $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <flag>
     *
     * @return int[]
     */
    public function getFlagList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <flag>
     *
     * @param int $value
     * @return \utilpb\CrossTeam
     */
    public function addFlag( $value){
     return $this->_add(5, $value);
    }
  }
}

namespace utilpb {

  class SimpleTeamInfo extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $teamId = null;
    
    /**  @var string */
    public $leaderName = null;
    
    /**  @var \utilpb\ComposeID */
    public $leader = null;
    
    /**  @var int */
    public $num = null;
    
    /**  @var int */
    public $fighting = null;
    
    /**  @var int */
    public $maxNum = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SimpleTeamInfo');

      // REQUIRED STRING teamId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "teamId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING leaderName = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "leaderName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE leader = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "leader";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED INT32 num = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "num";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 fighting = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "fighting";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 maxNum = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "maxNum";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <teamId> has a value
     *
     * @return boolean
     */
    public function hasTeamId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <teamId> value
     *
     * @return \utilpb\SimpleTeamInfo
     */
    public function clearTeamId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <teamId> value
     *
     * @return string
     */
    public function getTeamId(){
      return $this->_get(1);
    }
    
    /**
     * Set <teamId> value
     *
     * @param string $value
     * @return \utilpb\SimpleTeamInfo
     */
    public function setTeamId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <leaderName> has a value
     *
     * @return boolean
     */
    public function hasLeaderName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <leaderName> value
     *
     * @return \utilpb\SimpleTeamInfo
     */
    public function clearLeaderName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <leaderName> value
     *
     * @return string
     */
    public function getLeaderName(){
      return $this->_get(2);
    }
    
    /**
     * Set <leaderName> value
     *
     * @param string $value
     * @return \utilpb\SimpleTeamInfo
     */
    public function setLeaderName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <leader> has a value
     *
     * @return boolean
     */
    public function hasLeader(){
      return $this->_has(3);
    }
    
    /**
     * Clear <leader> value
     *
     * @return \utilpb\SimpleTeamInfo
     */
    public function clearLeader(){
      return $this->_clear(3);
    }
    
    /**
     * Get <leader> value
     *
     * @return \utilpb\ComposeID
     */
    public function getLeader(){
      return $this->_get(3);
    }
    
    /**
     * Set <leader> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\SimpleTeamInfo
     */
    public function setLeader(\utilpb\ComposeID $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <num> has a value
     *
     * @return boolean
     */
    public function hasNum(){
      return $this->_has(4);
    }
    
    /**
     * Clear <num> value
     *
     * @return \utilpb\SimpleTeamInfo
     */
    public function clearNum(){
      return $this->_clear(4);
    }
    
    /**
     * Get <num> value
     *
     * @return int
     */
    public function getNum(){
      return $this->_get(4);
    }
    
    /**
     * Set <num> value
     *
     * @param int $value
     * @return \utilpb\SimpleTeamInfo
     */
    public function setNum( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <fighting> has a value
     *
     * @return boolean
     */
    public function hasFighting(){
      return $this->_has(5);
    }
    
    /**
     * Clear <fighting> value
     *
     * @return \utilpb\SimpleTeamInfo
     */
    public function clearFighting(){
      return $this->_clear(5);
    }
    
    /**
     * Get <fighting> value
     *
     * @return int
     */
    public function getFighting(){
      return $this->_get(5);
    }
    
    /**
     * Set <fighting> value
     *
     * @param int $value
     * @return \utilpb\SimpleTeamInfo
     */
    public function setFighting( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <maxNum> has a value
     *
     * @return boolean
     */
    public function hasMaxNum(){
      return $this->_has(6);
    }
    
    /**
     * Clear <maxNum> value
     *
     * @return \utilpb\SimpleTeamInfo
     */
    public function clearMaxNum(){
      return $this->_clear(6);
    }
    
    /**
     * Get <maxNum> value
     *
     * @return int
     */
    public function getMaxNum(){
      return $this->_get(6);
    }
    
    /**
     * Set <maxNum> value
     *
     * @param int $value
     * @return \utilpb\SimpleTeamInfo
     */
    public function setMaxNum( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace utilpb {

  class FbCrossLobbyInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\RetCode */
    public $ret = null;
    
    /**  @var int */
    public $entryId = null;
    
    /**  @var \utilpb\SimpleTeamInfo[]  */
    public $lobbyInfo = array();
    
    /**  @var \utilpb\CrossTeam */
    public $teamInfo = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.FbCrossLobbyInfo');

      // REQUIRED MESSAGE ret = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "ret";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\RetCode';
      $descriptor->addField($f);

      // REQUIRED INT32 entryId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "entryId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE lobbyInfo = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "lobbyInfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\SimpleTeamInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE teamInfo = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "teamInfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\CrossTeam';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <ret> has a value
     *
     * @return boolean
     */
    public function hasRet(){
      return $this->_has(1);
    }
    
    /**
     * Clear <ret> value
     *
     * @return \utilpb\FbCrossLobbyInfo
     */
    public function clearRet(){
      return $this->_clear(1);
    }
    
    /**
     * Get <ret> value
     *
     * @return \utilpb\RetCode
     */
    public function getRet(){
      return $this->_get(1);
    }
    
    /**
     * Set <ret> value
     *
     * @param \utilpb\RetCode $value
     * @return \utilpb\FbCrossLobbyInfo
     */
    public function setRet(\utilpb\RetCode $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <entryId> has a value
     *
     * @return boolean
     */
    public function hasEntryId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <entryId> value
     *
     * @return \utilpb\FbCrossLobbyInfo
     */
    public function clearEntryId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <entryId> value
     *
     * @return int
     */
    public function getEntryId(){
      return $this->_get(2);
    }
    
    /**
     * Set <entryId> value
     *
     * @param int $value
     * @return \utilpb\FbCrossLobbyInfo
     */
    public function setEntryId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <lobbyInfo> has a value
     *
     * @return boolean
     */
    public function hasLobbyInfo(){
      return $this->_has(3);
    }
    
    /**
     * Clear <lobbyInfo> value
     *
     * @return \utilpb\FbCrossLobbyInfo
     */
    public function clearLobbyInfo(){
      return $this->_clear(3);
    }
    
    /**
     * Get <lobbyInfo> value
     *
     * @param int $idx
     * @return \utilpb\SimpleTeamInfo
     */
    public function getLobbyInfo($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <lobbyInfo> value
     *
     * @param \utilpb\SimpleTeamInfo $value
     * @return \utilpb\FbCrossLobbyInfo
     */
    public function setLobbyInfo(\utilpb\SimpleTeamInfo $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <lobbyInfo>
     *
     * @return \utilpb\SimpleTeamInfo[]
     */
    public function getLobbyInfoList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <lobbyInfo>
     *
     * @param \utilpb\SimpleTeamInfo $value
     * @return \utilpb\FbCrossLobbyInfo
     */
    public function addLobbyInfo(\utilpb\SimpleTeamInfo $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <teamInfo> has a value
     *
     * @return boolean
     */
    public function hasTeamInfo(){
      return $this->_has(4);
    }
    
    /**
     * Clear <teamInfo> value
     *
     * @return \utilpb\FbCrossLobbyInfo
     */
    public function clearTeamInfo(){
      return $this->_clear(4);
    }
    
    /**
     * Get <teamInfo> value
     *
     * @return \utilpb\CrossTeam
     */
    public function getTeamInfo(){
      return $this->_get(4);
    }
    
    /**
     * Set <teamInfo> value
     *
     * @param \utilpb\CrossTeam $value
     * @return \utilpb\FbCrossLobbyInfo
     */
    public function setTeamInfo(\utilpb\CrossTeam $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class FbCrossTeamSetting extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $entryId = null;
    
    /**  @var int */
    public $fighting = null;
    
    /**  @var int[]  */
    public $flag = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.FbCrossTeamSetting');

      // REQUIRED INT32 entryId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entryId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 fighting = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "fighting";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED INT32 flag = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entryId> has a value
     *
     * @return boolean
     */
    public function hasEntryId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entryId> value
     *
     * @return \utilpb\FbCrossTeamSetting
     */
    public function clearEntryId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entryId> value
     *
     * @return int
     */
    public function getEntryId(){
      return $this->_get(1);
    }
    
    /**
     * Set <entryId> value
     *
     * @param int $value
     * @return \utilpb\FbCrossTeamSetting
     */
    public function setEntryId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <fighting> has a value
     *
     * @return boolean
     */
    public function hasFighting(){
      return $this->_has(2);
    }
    
    /**
     * Clear <fighting> value
     *
     * @return \utilpb\FbCrossTeamSetting
     */
    public function clearFighting(){
      return $this->_clear(2);
    }
    
    /**
     * Get <fighting> value
     *
     * @return int
     */
    public function getFighting(){
      return $this->_get(2);
    }
    
    /**
     * Set <fighting> value
     *
     * @param int $value
     * @return \utilpb\FbCrossTeamSetting
     */
    public function setFighting( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(3);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\FbCrossTeamSetting
     */
    public function clearFlag(){
      return $this->_clear(3);
    }
    
    /**
     * Get <flag> value
     *
     * @param int $idx
     * @return int
     */
    public function getFlag($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\FbCrossTeamSetting
     */
    public function setFlag( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <flag>
     *
     * @return int[]
     */
    public function getFlagList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <flag>
     *
     * @param int $value
     * @return \utilpb\FbCrossTeamSetting
     */
    public function addFlag( $value){
     return $this->_add(3, $value);
    }
  }
}

namespace utilpb {

  class FbCrossChooseInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $entryId = null;
    
    /**  @var string */
    public $teamId = null;
    
    /**  @var \utilpb\Member */
    public $member = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.FbCrossChooseInfo');

      // REQUIRED INT32 entryId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entryId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING teamId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "teamId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE member = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "member";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\Member';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entryId> has a value
     *
     * @return boolean
     */
    public function hasEntryId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entryId> value
     *
     * @return \utilpb\FbCrossChooseInfo
     */
    public function clearEntryId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entryId> value
     *
     * @return int
     */
    public function getEntryId(){
      return $this->_get(1);
    }
    
    /**
     * Set <entryId> value
     *
     * @param int $value
     * @return \utilpb\FbCrossChooseInfo
     */
    public function setEntryId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <teamId> has a value
     *
     * @return boolean
     */
    public function hasTeamId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <teamId> value
     *
     * @return \utilpb\FbCrossChooseInfo
     */
    public function clearTeamId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <teamId> value
     *
     * @return string
     */
    public function getTeamId(){
      return $this->_get(2);
    }
    
    /**
     * Set <teamId> value
     *
     * @param string $value
     * @return \utilpb\FbCrossChooseInfo
     */
    public function setTeamId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <member> has a value
     *
     * @return boolean
     */
    public function hasMember(){
      return $this->_has(3);
    }
    
    /**
     * Clear <member> value
     *
     * @return \utilpb\FbCrossChooseInfo
     */
    public function clearMember(){
      return $this->_clear(3);
    }
    
    /**
     * Get <member> value
     *
     * @return \utilpb\Member
     */
    public function getMember(){
      return $this->_get(3);
    }
    
    /**
     * Set <member> value
     *
     * @param \utilpb\Member $value
     * @return \utilpb\FbCrossChooseInfo
     */
    public function setMember(\utilpb\Member $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class FbCrossTeamCreate extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $entryId = null;
    
    /**  @var \utilpb\Member */
    public $member = null;
    
    /**  @var int */
    public $fighting = null;
    
    /**  @var int */
    public $minNum = null;
    
    /**  @var int */
    public $maxNum = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.FbCrossTeamCreate');

      // REQUIRED INT32 entryId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entryId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE member = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "member";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\Member';
      $descriptor->addField($f);

      // OPTIONAL INT32 fighting = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "fighting";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 minNum = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "minNum";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 maxNum = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "maxNum";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entryId> has a value
     *
     * @return boolean
     */
    public function hasEntryId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entryId> value
     *
     * @return \utilpb\FbCrossTeamCreate
     */
    public function clearEntryId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entryId> value
     *
     * @return int
     */
    public function getEntryId(){
      return $this->_get(1);
    }
    
    /**
     * Set <entryId> value
     *
     * @param int $value
     * @return \utilpb\FbCrossTeamCreate
     */
    public function setEntryId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <member> has a value
     *
     * @return boolean
     */
    public function hasMember(){
      return $this->_has(2);
    }
    
    /**
     * Clear <member> value
     *
     * @return \utilpb\FbCrossTeamCreate
     */
    public function clearMember(){
      return $this->_clear(2);
    }
    
    /**
     * Get <member> value
     *
     * @return \utilpb\Member
     */
    public function getMember(){
      return $this->_get(2);
    }
    
    /**
     * Set <member> value
     *
     * @param \utilpb\Member $value
     * @return \utilpb\FbCrossTeamCreate
     */
    public function setMember(\utilpb\Member $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <fighting> has a value
     *
     * @return boolean
     */
    public function hasFighting(){
      return $this->_has(3);
    }
    
    /**
     * Clear <fighting> value
     *
     * @return \utilpb\FbCrossTeamCreate
     */
    public function clearFighting(){
      return $this->_clear(3);
    }
    
    /**
     * Get <fighting> value
     *
     * @return int
     */
    public function getFighting(){
      return $this->_get(3);
    }
    
    /**
     * Set <fighting> value
     *
     * @param int $value
     * @return \utilpb\FbCrossTeamCreate
     */
    public function setFighting( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <minNum> has a value
     *
     * @return boolean
     */
    public function hasMinNum(){
      return $this->_has(4);
    }
    
    /**
     * Clear <minNum> value
     *
     * @return \utilpb\FbCrossTeamCreate
     */
    public function clearMinNum(){
      return $this->_clear(4);
    }
    
    /**
     * Get <minNum> value
     *
     * @return int
     */
    public function getMinNum(){
      return $this->_get(4);
    }
    
    /**
     * Set <minNum> value
     *
     * @param int $value
     * @return \utilpb\FbCrossTeamCreate
     */
    public function setMinNum( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <maxNum> has a value
     *
     * @return boolean
     */
    public function hasMaxNum(){
      return $this->_has(5);
    }
    
    /**
     * Clear <maxNum> value
     *
     * @return \utilpb\FbCrossTeamCreate
     */
    public function clearMaxNum(){
      return $this->_clear(5);
    }
    
    /**
     * Get <maxNum> value
     *
     * @return int
     */
    public function getMaxNum(){
      return $this->_get(5);
    }
    
    /**
     * Set <maxNum> value
     *
     * @param int $value
     * @return \utilpb\FbCrossTeamCreate
     */
    public function setMaxNum( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace utilpb {

  class FbCrossReplyIn extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $entryId = null;
    
    /**  @var int */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.FbCrossReplyIn');

      // OPTIONAL INT32 entryId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entryId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entryId> has a value
     *
     * @return boolean
     */
    public function hasEntryId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entryId> value
     *
     * @return \utilpb\FbCrossReplyIn
     */
    public function clearEntryId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entryId> value
     *
     * @return int
     */
    public function getEntryId(){
      return $this->_get(1);
    }
    
    /**
     * Set <entryId> value
     *
     * @param int $value
     * @return \utilpb\FbCrossReplyIn
     */
    public function setEntryId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\FbCrossReplyIn
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\FbCrossReplyIn
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class FBCrossTeamLobbyQueryIn extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $entryId = null;
    
    /**  @var string */
    public $leaderName = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.FBCrossTeamLobbyQueryIn');

      // REQUIRED INT32 entryId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entryId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING leaderName = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "leaderName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entryId> has a value
     *
     * @return boolean
     */
    public function hasEntryId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entryId> value
     *
     * @return \utilpb\FBCrossTeamLobbyQueryIn
     */
    public function clearEntryId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entryId> value
     *
     * @return int
     */
    public function getEntryId(){
      return $this->_get(1);
    }
    
    /**
     * Set <entryId> value
     *
     * @param int $value
     * @return \utilpb\FBCrossTeamLobbyQueryIn
     */
    public function setEntryId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <leaderName> has a value
     *
     * @return boolean
     */
    public function hasLeaderName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <leaderName> value
     *
     * @return \utilpb\FBCrossTeamLobbyQueryIn
     */
    public function clearLeaderName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <leaderName> value
     *
     * @return string
     */
    public function getLeaderName(){
      return $this->_get(2);
    }
    
    /**
     * Set <leaderName> value
     *
     * @param string $value
     * @return \utilpb\FBCrossTeamLobbyQueryIn
     */
    public function setLeaderName( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class FbCrossInvite extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $entryId = null;
    
    /**  @var string */
    public $teamId = null;
    
    /**  @var string */
    public $name1 = null;
    
    /**  @var \utilpb\ComposeID */
    public $id1 = null;
    
    /**  @var string */
    public $name2 = null;
    
    /**  @var \utilpb\ComposeID */
    public $id2 = null;
    
    /**  @var string */
    public $copyName = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.FbCrossInvite');

      // OPTIONAL INT32 entryId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entryId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING teamId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "teamId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name1 = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name1";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE id1 = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "id1";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL STRING name2 = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "name2";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE id2 = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "id2";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL STRING copyName = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "copyName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entryId> has a value
     *
     * @return boolean
     */
    public function hasEntryId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entryId> value
     *
     * @return \utilpb\FbCrossInvite
     */
    public function clearEntryId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entryId> value
     *
     * @return int
     */
    public function getEntryId(){
      return $this->_get(1);
    }
    
    /**
     * Set <entryId> value
     *
     * @param int $value
     * @return \utilpb\FbCrossInvite
     */
    public function setEntryId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <teamId> has a value
     *
     * @return boolean
     */
    public function hasTeamId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <teamId> value
     *
     * @return \utilpb\FbCrossInvite
     */
    public function clearTeamId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <teamId> value
     *
     * @return string
     */
    public function getTeamId(){
      return $this->_get(2);
    }
    
    /**
     * Set <teamId> value
     *
     * @param string $value
     * @return \utilpb\FbCrossInvite
     */
    public function setTeamId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <name1> has a value
     *
     * @return boolean
     */
    public function hasName1(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name1> value
     *
     * @return \utilpb\FbCrossInvite
     */
    public function clearName1(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name1> value
     *
     * @return string
     */
    public function getName1(){
      return $this->_get(3);
    }
    
    /**
     * Set <name1> value
     *
     * @param string $value
     * @return \utilpb\FbCrossInvite
     */
    public function setName1( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <id1> has a value
     *
     * @return boolean
     */
    public function hasId1(){
      return $this->_has(4);
    }
    
    /**
     * Clear <id1> value
     *
     * @return \utilpb\FbCrossInvite
     */
    public function clearId1(){
      return $this->_clear(4);
    }
    
    /**
     * Get <id1> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId1(){
      return $this->_get(4);
    }
    
    /**
     * Set <id1> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\FbCrossInvite
     */
    public function setId1(\utilpb\ComposeID $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <name2> has a value
     *
     * @return boolean
     */
    public function hasName2(){
      return $this->_has(5);
    }
    
    /**
     * Clear <name2> value
     *
     * @return \utilpb\FbCrossInvite
     */
    public function clearName2(){
      return $this->_clear(5);
    }
    
    /**
     * Get <name2> value
     *
     * @return string
     */
    public function getName2(){
      return $this->_get(5);
    }
    
    /**
     * Set <name2> value
     *
     * @param string $value
     * @return \utilpb\FbCrossInvite
     */
    public function setName2( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <id2> has a value
     *
     * @return boolean
     */
    public function hasId2(){
      return $this->_has(6);
    }
    
    /**
     * Clear <id2> value
     *
     * @return \utilpb\FbCrossInvite
     */
    public function clearId2(){
      return $this->_clear(6);
    }
    
    /**
     * Get <id2> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId2(){
      return $this->_get(6);
    }
    
    /**
     * Set <id2> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\FbCrossInvite
     */
    public function setId2(\utilpb\ComposeID $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <copyName> has a value
     *
     * @return boolean
     */
    public function hasCopyName(){
      return $this->_has(7);
    }
    
    /**
     * Clear <copyName> value
     *
     * @return \utilpb\FbCrossInvite
     */
    public function clearCopyName(){
      return $this->_clear(7);
    }
    
    /**
     * Get <copyName> value
     *
     * @return string
     */
    public function getCopyName(){
      return $this->_get(7);
    }
    
    /**
     * Set <copyName> value
     *
     * @param string $value
     * @return \utilpb\FbCrossInvite
     */
    public function setCopyName( $value){
      return $this->_set(7, $value);
    }
  }
}

