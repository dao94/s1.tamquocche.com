<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/territory.proto
//   Date: 2014-12-19 08:23:09

namespace utilpb {

  class PbTerritory extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $entryId = null;
    
    /**  @var string */
    public $lastFactionName = null;
    
    /**  @var string */
    public $presidentName = null;
    
    /**  @var string */
    public $lastFactionId = null;
    
    /**  @var \utilpb\ComposeID */
    public $presidentId = null;
    
    /**  @var float */
    public $lastOccupyTm = null;
    
    /**  @var int */
    public $flag = null;
    
    /**  @var int */
    public $state = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbTerritory');

      // REQUIRED INT32 entryId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entryId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING lastFactionName = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "lastFactionName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING presidentName = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "presidentName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING lastFactionId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "lastFactionId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE presidentId = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "presidentId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL DOUBLE lastOccupyTm = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "lastOccupyTm";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 flag = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 state = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entryId> has a value
     *
     * @return boolean
     */
    public function hasEntryId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entryId> value
     *
     * @return \utilpb\PbTerritory
     */
    public function clearEntryId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entryId> value
     *
     * @return int
     */
    public function getEntryId(){
      return $this->_get(1);
    }
    
    /**
     * Set <entryId> value
     *
     * @param int $value
     * @return \utilpb\PbTerritory
     */
    public function setEntryId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <lastFactionName> has a value
     *
     * @return boolean
     */
    public function hasLastFactionName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <lastFactionName> value
     *
     * @return \utilpb\PbTerritory
     */
    public function clearLastFactionName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <lastFactionName> value
     *
     * @return string
     */
    public function getLastFactionName(){
      return $this->_get(2);
    }
    
    /**
     * Set <lastFactionName> value
     *
     * @param string $value
     * @return \utilpb\PbTerritory
     */
    public function setLastFactionName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <presidentName> has a value
     *
     * @return boolean
     */
    public function hasPresidentName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <presidentName> value
     *
     * @return \utilpb\PbTerritory
     */
    public function clearPresidentName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <presidentName> value
     *
     * @return string
     */
    public function getPresidentName(){
      return $this->_get(3);
    }
    
    /**
     * Set <presidentName> value
     *
     * @param string $value
     * @return \utilpb\PbTerritory
     */
    public function setPresidentName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <lastFactionId> has a value
     *
     * @return boolean
     */
    public function hasLastFactionId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <lastFactionId> value
     *
     * @return \utilpb\PbTerritory
     */
    public function clearLastFactionId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <lastFactionId> value
     *
     * @return string
     */
    public function getLastFactionId(){
      return $this->_get(4);
    }
    
    /**
     * Set <lastFactionId> value
     *
     * @param string $value
     * @return \utilpb\PbTerritory
     */
    public function setLastFactionId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <presidentId> has a value
     *
     * @return boolean
     */
    public function hasPresidentId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <presidentId> value
     *
     * @return \utilpb\PbTerritory
     */
    public function clearPresidentId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <presidentId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPresidentId(){
      return $this->_get(5);
    }
    
    /**
     * Set <presidentId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PbTerritory
     */
    public function setPresidentId(\utilpb\ComposeID $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <lastOccupyTm> has a value
     *
     * @return boolean
     */
    public function hasLastOccupyTm(){
      return $this->_has(6);
    }
    
    /**
     * Clear <lastOccupyTm> value
     *
     * @return \utilpb\PbTerritory
     */
    public function clearLastOccupyTm(){
      return $this->_clear(6);
    }
    
    /**
     * Get <lastOccupyTm> value
     *
     * @return float
     */
    public function getLastOccupyTm(){
      return $this->_get(6);
    }
    
    /**
     * Set <lastOccupyTm> value
     *
     * @param float $value
     * @return \utilpb\PbTerritory
     */
    public function setLastOccupyTm( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(7);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\PbTerritory
     */
    public function clearFlag(){
      return $this->_clear(7);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(7);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\PbTerritory
     */
    public function setFlag( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(8);
    }
    
    /**
     * Clear <state> value
     *
     * @return \utilpb\PbTerritory
     */
    public function clearState(){
      return $this->_clear(8);
    }
    
    /**
     * Get <state> value
     *
     * @return int
     */
    public function getState(){
      return $this->_get(8);
    }
    
    /**
     * Set <state> value
     *
     * @param int $value
     * @return \utilpb\PbTerritory
     */
    public function setState( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace utilpb {

  class PbTerritoryInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\PbTerritory[]  */
    public $territory = array();
    
    /**  @var float */
    public $nextOpenTm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbTerritoryInfo');

      // REPEATED MESSAGE territory = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "territory";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\PbTerritory';
      $descriptor->addField($f);

      // REQUIRED DOUBLE nextOpenTm = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "nextOpenTm";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <territory> has a value
     *
     * @return boolean
     */
    public function hasTerritory(){
      return $this->_has(1);
    }
    
    /**
     * Clear <territory> value
     *
     * @return \utilpb\PbTerritoryInfo
     */
    public function clearTerritory(){
      return $this->_clear(1);
    }
    
    /**
     * Get <territory> value
     *
     * @param int $idx
     * @return \utilpb\PbTerritory
     */
    public function getTerritory($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <territory> value
     *
     * @param \utilpb\PbTerritory $value
     * @return \utilpb\PbTerritoryInfo
     */
    public function setTerritory(\utilpb\PbTerritory $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <territory>
     *
     * @return \utilpb\PbTerritory[]
     */
    public function getTerritoryList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <territory>
     *
     * @param \utilpb\PbTerritory $value
     * @return \utilpb\PbTerritoryInfo
     */
    public function addTerritory(\utilpb\PbTerritory $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <nextOpenTm> has a value
     *
     * @return boolean
     */
    public function hasNextOpenTm(){
      return $this->_has(2);
    }
    
    /**
     * Clear <nextOpenTm> value
     *
     * @return \utilpb\PbTerritoryInfo
     */
    public function clearNextOpenTm(){
      return $this->_clear(2);
    }
    
    /**
     * Get <nextOpenTm> value
     *
     * @return float
     */
    public function getNextOpenTm(){
      return $this->_get(2);
    }
    
    /**
     * Set <nextOpenTm> value
     *
     * @param float $value
     * @return \utilpb\PbTerritoryInfo
     */
    public function setNextOpenTm( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class PbTerritoryInside extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $entryId = null;
    
    /**  @var float */
    public $endTm = null;
    
    /**  @var string */
    public $curFactionName = null;
    
    /**  @var \utilpb\Pos */
    public $pos = null;
    
    /**  @var int */
    public $exp = null;
    
    /**  @var int */
    public $liveTm = null;
    
    /**  @var float */
    public $curOccupyTm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbTerritoryInside');

      // REQUIRED INT32 entryId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entryId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE endTm = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "endTm";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING curFactionName = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "curFactionName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE pos = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "pos";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\Pos';
      $descriptor->addField($f);

      // OPTIONAL INT32 exp = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "exp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 liveTm = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "liveTm";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE curOccupyTm = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "curOccupyTm";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entryId> has a value
     *
     * @return boolean
     */
    public function hasEntryId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entryId> value
     *
     * @return \utilpb\PbTerritoryInside
     */
    public function clearEntryId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entryId> value
     *
     * @return int
     */
    public function getEntryId(){
      return $this->_get(1);
    }
    
    /**
     * Set <entryId> value
     *
     * @param int $value
     * @return \utilpb\PbTerritoryInside
     */
    public function setEntryId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <endTm> has a value
     *
     * @return boolean
     */
    public function hasEndTm(){
      return $this->_has(2);
    }
    
    /**
     * Clear <endTm> value
     *
     * @return \utilpb\PbTerritoryInside
     */
    public function clearEndTm(){
      return $this->_clear(2);
    }
    
    /**
     * Get <endTm> value
     *
     * @return float
     */
    public function getEndTm(){
      return $this->_get(2);
    }
    
    /**
     * Set <endTm> value
     *
     * @param float $value
     * @return \utilpb\PbTerritoryInside
     */
    public function setEndTm( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <curFactionName> has a value
     *
     * @return boolean
     */
    public function hasCurFactionName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <curFactionName> value
     *
     * @return \utilpb\PbTerritoryInside
     */
    public function clearCurFactionName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <curFactionName> value
     *
     * @return string
     */
    public function getCurFactionName(){
      return $this->_get(3);
    }
    
    /**
     * Set <curFactionName> value
     *
     * @param string $value
     * @return \utilpb\PbTerritoryInside
     */
    public function setCurFactionName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <pos> has a value
     *
     * @return boolean
     */
    public function hasPos(){
      return $this->_has(4);
    }
    
    /**
     * Clear <pos> value
     *
     * @return \utilpb\PbTerritoryInside
     */
    public function clearPos(){
      return $this->_clear(4);
    }
    
    /**
     * Get <pos> value
     *
     * @return \utilpb\Pos
     */
    public function getPos(){
      return $this->_get(4);
    }
    
    /**
     * Set <pos> value
     *
     * @param \utilpb\Pos $value
     * @return \utilpb\PbTerritoryInside
     */
    public function setPos(\utilpb\Pos $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <exp> has a value
     *
     * @return boolean
     */
    public function hasExp(){
      return $this->_has(5);
    }
    
    /**
     * Clear <exp> value
     *
     * @return \utilpb\PbTerritoryInside
     */
    public function clearExp(){
      return $this->_clear(5);
    }
    
    /**
     * Get <exp> value
     *
     * @return int
     */
    public function getExp(){
      return $this->_get(5);
    }
    
    /**
     * Set <exp> value
     *
     * @param int $value
     * @return \utilpb\PbTerritoryInside
     */
    public function setExp( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <liveTm> has a value
     *
     * @return boolean
     */
    public function hasLiveTm(){
      return $this->_has(6);
    }
    
    /**
     * Clear <liveTm> value
     *
     * @return \utilpb\PbTerritoryInside
     */
    public function clearLiveTm(){
      return $this->_clear(6);
    }
    
    /**
     * Get <liveTm> value
     *
     * @return int
     */
    public function getLiveTm(){
      return $this->_get(6);
    }
    
    /**
     * Set <liveTm> value
     *
     * @param int $value
     * @return \utilpb\PbTerritoryInside
     */
    public function setLiveTm( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <curOccupyTm> has a value
     *
     * @return boolean
     */
    public function hasCurOccupyTm(){
      return $this->_has(7);
    }
    
    /**
     * Clear <curOccupyTm> value
     *
     * @return \utilpb\PbTerritoryInside
     */
    public function clearCurOccupyTm(){
      return $this->_clear(7);
    }
    
    /**
     * Get <curOccupyTm> value
     *
     * @return float
     */
    public function getCurOccupyTm(){
      return $this->_get(7);
    }
    
    /**
     * Set <curOccupyTm> value
     *
     * @param float $value
     * @return \utilpb\PbTerritoryInside
     */
    public function setCurOccupyTm( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace utilpb {

  class PbTerritoryLiveTm extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $id = null;
    
    /**  @var int */
    public $liveTm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbTerritoryLiveTm');

      // REQUIRED MESSAGE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED INT32 liveTm = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "liveTm";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\PbTerritoryLiveTm
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PbTerritoryLiveTm
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <liveTm> has a value
     *
     * @return boolean
     */
    public function hasLiveTm(){
      return $this->_has(2);
    }
    
    /**
     * Clear <liveTm> value
     *
     * @return \utilpb\PbTerritoryLiveTm
     */
    public function clearLiveTm(){
      return $this->_clear(2);
    }
    
    /**
     * Get <liveTm> value
     *
     * @return int
     */
    public function getLiveTm(){
      return $this->_get(2);
    }
    
    /**
     * Set <liveTm> value
     *
     * @param int $value
     * @return \utilpb\PbTerritoryLiveTm
     */
    public function setLiveTm( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class PbTerritoryLiveTmList extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\PbTerritoryLiveTm[]  */
    public $territoryLiveTm = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbTerritoryLiveTmList');

      // REPEATED MESSAGE territoryLiveTm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "territoryLiveTm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\PbTerritoryLiveTm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <territoryLiveTm> has a value
     *
     * @return boolean
     */
    public function hasTerritoryLiveTm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <territoryLiveTm> value
     *
     * @return \utilpb\PbTerritoryLiveTmList
     */
    public function clearTerritoryLiveTm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <territoryLiveTm> value
     *
     * @param int $idx
     * @return \utilpb\PbTerritoryLiveTm
     */
    public function getTerritoryLiveTm($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <territoryLiveTm> value
     *
     * @param \utilpb\PbTerritoryLiveTm $value
     * @return \utilpb\PbTerritoryLiveTmList
     */
    public function setTerritoryLiveTm(\utilpb\PbTerritoryLiveTm $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <territoryLiveTm>
     *
     * @return \utilpb\PbTerritoryLiveTm[]
     */
    public function getTerritoryLiveTmList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <territoryLiveTm>
     *
     * @param \utilpb\PbTerritoryLiveTm $value
     * @return \utilpb\PbTerritoryLiveTmList
     */
    public function addTerritoryLiveTm(\utilpb\PbTerritoryLiveTm $value){
     return $this->_add(1, $value);
    }
  }
}

