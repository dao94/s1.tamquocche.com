<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/ride.proto
//   Date: 2014-12-19 08:23:08

namespace utilpb {

  class RideEquip extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $uuid = null;
    
    /**  @var float */
    public $itemId = null;
    
    /**  @var int */
    public $number = null;
    
    /**  @var int */
    public $bind = 0;
    
    /**  @var string */
    public $iMsg = null;
    
    /**  @var float */
    public $startTime = null;
    
    /**  @var float */
    public $lastTime = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.RideEquip');

      // REQUIRED STRING uuid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "uuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE itemId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "itemId";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 number = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 bind = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "bind";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING iMsg = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "iMsg";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE startTime = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "startTime";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE lastTime = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "lastTime";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <uuid> has a value
     *
     * @return boolean
     */
    public function hasUuid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <uuid> value
     *
     * @return \utilpb\RideEquip
     */
    public function clearUuid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <uuid> value
     *
     * @return string
     */
    public function getUuid(){
      return $this->_get(1);
    }
    
    /**
     * Set <uuid> value
     *
     * @param string $value
     * @return \utilpb\RideEquip
     */
    public function setUuid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <itemId> has a value
     *
     * @return boolean
     */
    public function hasItemId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <itemId> value
     *
     * @return \utilpb\RideEquip
     */
    public function clearItemId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <itemId> value
     *
     * @return float
     */
    public function getItemId(){
      return $this->_get(2);
    }
    
    /**
     * Set <itemId> value
     *
     * @param float $value
     * @return \utilpb\RideEquip
     */
    public function setItemId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <number> has a value
     *
     * @return boolean
     */
    public function hasNumber(){
      return $this->_has(3);
    }
    
    /**
     * Clear <number> value
     *
     * @return \utilpb\RideEquip
     */
    public function clearNumber(){
      return $this->_clear(3);
    }
    
    /**
     * Get <number> value
     *
     * @return int
     */
    public function getNumber(){
      return $this->_get(3);
    }
    
    /**
     * Set <number> value
     *
     * @param int $value
     * @return \utilpb\RideEquip
     */
    public function setNumber( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <bind> has a value
     *
     * @return boolean
     */
    public function hasBind(){
      return $this->_has(4);
    }
    
    /**
     * Clear <bind> value
     *
     * @return \utilpb\RideEquip
     */
    public function clearBind(){
      return $this->_clear(4);
    }
    
    /**
     * Get <bind> value
     *
     * @return int
     */
    public function getBind(){
      return $this->_get(4);
    }
    
    /**
     * Set <bind> value
     *
     * @param int $value
     * @return \utilpb\RideEquip
     */
    public function setBind( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <iMsg> has a value
     *
     * @return boolean
     */
    public function hasIMsg(){
      return $this->_has(5);
    }
    
    /**
     * Clear <iMsg> value
     *
     * @return \utilpb\RideEquip
     */
    public function clearIMsg(){
      return $this->_clear(5);
    }
    
    /**
     * Get <iMsg> value
     *
     * @return string
     */
    public function getIMsg(){
      return $this->_get(5);
    }
    
    /**
     * Set <iMsg> value
     *
     * @param string $value
     * @return \utilpb\RideEquip
     */
    public function setIMsg( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <startTime> has a value
     *
     * @return boolean
     */
    public function hasStartTime(){
      return $this->_has(6);
    }
    
    /**
     * Clear <startTime> value
     *
     * @return \utilpb\RideEquip
     */
    public function clearStartTime(){
      return $this->_clear(6);
    }
    
    /**
     * Get <startTime> value
     *
     * @return float
     */
    public function getStartTime(){
      return $this->_get(6);
    }
    
    /**
     * Set <startTime> value
     *
     * @param float $value
     * @return \utilpb\RideEquip
     */
    public function setStartTime( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <lastTime> has a value
     *
     * @return boolean
     */
    public function hasLastTime(){
      return $this->_has(7);
    }
    
    /**
     * Clear <lastTime> value
     *
     * @return \utilpb\RideEquip
     */
    public function clearLastTime(){
      return $this->_clear(7);
    }
    
    /**
     * Get <lastTime> value
     *
     * @return float
     */
    public function getLastTime(){
      return $this->_get(7);
    }
    
    /**
     * Set <lastTime> value
     *
     * @param float $value
     * @return \utilpb\RideEquip
     */
    public function setLastTime( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace utilpb {

  class RideInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $model = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var \utilpb\CombatAttrCombat */
    public $attr = null;
    
    /**  @var int[]  */
    public $skillId = array();
    
    /**  @var \utilpb\RideEquip[]  */
    public $equip = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.RideInfo');

      // REQUIRED INT32 model = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "model";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE attr = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "attr";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\CombatAttrCombat';
      $descriptor->addField($f);

      // REPEATED INT32 skillId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "skillId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE equip = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "equip";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\RideEquip';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <model> has a value
     *
     * @return boolean
     */
    public function hasModel(){
      return $this->_has(1);
    }
    
    /**
     * Clear <model> value
     *
     * @return \utilpb\RideInfo
     */
    public function clearModel(){
      return $this->_clear(1);
    }
    
    /**
     * Get <model> value
     *
     * @return int
     */
    public function getModel(){
      return $this->_get(1);
    }
    
    /**
     * Set <model> value
     *
     * @param int $value
     * @return \utilpb\RideInfo
     */
    public function setModel( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\RideInfo
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\RideInfo
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <attr> has a value
     *
     * @return boolean
     */
    public function hasAttr(){
      return $this->_has(3);
    }
    
    /**
     * Clear <attr> value
     *
     * @return \utilpb\RideInfo
     */
    public function clearAttr(){
      return $this->_clear(3);
    }
    
    /**
     * Get <attr> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function getAttr(){
      return $this->_get(3);
    }
    
    /**
     * Set <attr> value
     *
     * @param \utilpb\CombatAttrCombat $value
     * @return \utilpb\RideInfo
     */
    public function setAttr(\utilpb\CombatAttrCombat $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <skillId> has a value
     *
     * @return boolean
     */
    public function hasSkillId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <skillId> value
     *
     * @return \utilpb\RideInfo
     */
    public function clearSkillId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <skillId> value
     *
     * @param int $idx
     * @return int
     */
    public function getSkillId($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <skillId> value
     *
     * @param int $value
     * @return \utilpb\RideInfo
     */
    public function setSkillId( $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <skillId>
     *
     * @return int[]
     */
    public function getSkillIdList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <skillId>
     *
     * @param int $value
     * @return \utilpb\RideInfo
     */
    public function addSkillId( $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <equip> has a value
     *
     * @return boolean
     */
    public function hasEquip(){
      return $this->_has(5);
    }
    
    /**
     * Clear <equip> value
     *
     * @return \utilpb\RideInfo
     */
    public function clearEquip(){
      return $this->_clear(5);
    }
    
    /**
     * Get <equip> value
     *
     * @param int $idx
     * @return \utilpb\RideEquip
     */
    public function getEquip($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <equip> value
     *
     * @param \utilpb\RideEquip $value
     * @return \utilpb\RideInfo
     */
    public function setEquip(\utilpb\RideEquip $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <equip>
     *
     * @return \utilpb\RideEquip[]
     */
    public function getEquipList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <equip>
     *
     * @param \utilpb\RideEquip $value
     * @return \utilpb\RideInfo
     */
    public function addEquip(\utilpb\RideEquip $value){
     return $this->_add(5, $value);
    }
  }
}

namespace utilpb {

  class RealtimeRideOfflineInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $id = null;
    
    /**  @var \utilpb\ComposeID */
    public $ownerId = null;
    
    /**  @var int */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.RealtimeRideOfflineInfo');

      // REQUIRED MESSAGE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED MESSAGE ownerId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "ownerId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED INT32 type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\RealtimeRideOfflineInfo
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\RealtimeRideOfflineInfo
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <ownerId> has a value
     *
     * @return boolean
     */
    public function hasOwnerId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <ownerId> value
     *
     * @return \utilpb\RealtimeRideOfflineInfo
     */
    public function clearOwnerId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <ownerId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getOwnerId(){
      return $this->_get(2);
    }
    
    /**
     * Set <ownerId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\RealtimeRideOfflineInfo
     */
    public function setOwnerId(\utilpb\ComposeID $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\RealtimeRideOfflineInfo
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\RealtimeRideOfflineInfo
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class SvRideInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\RealtimeRideOfflineInfo */
    public $id = null;
    
    /**  @var \utilpb\RideInfo */
    public $info = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SvRideInfo');

      // REQUIRED MESSAGE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\RealtimeRideOfflineInfo';
      $descriptor->addField($f);

      // REQUIRED MESSAGE info = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\RideInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\SvRideInfo
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\RealtimeRideOfflineInfo
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\RealtimeRideOfflineInfo $value
     * @return \utilpb\SvRideInfo
     */
    public function setId(\utilpb\RealtimeRideOfflineInfo $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(2);
    }
    
    /**
     * Clear <info> value
     *
     * @return \utilpb\SvRideInfo
     */
    public function clearInfo(){
      return $this->_clear(2);
    }
    
    /**
     * Get <info> value
     *
     * @return \utilpb\RideInfo
     */
    public function getInfo(){
      return $this->_get(2);
    }
    
    /**
     * Set <info> value
     *
     * @param \utilpb\RideInfo $value
     * @return \utilpb\SvRideInfo
     */
    public function setInfo(\utilpb\RideInfo $value){
      return $this->_set(2, $value);
    }
  }
}

