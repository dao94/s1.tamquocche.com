<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/hotspring.proto
//   Date: 2014-12-19 08:23:06

namespace utilpb {

  class PbHotSpringOp extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $flag = null;
    
    /**  @var \utilpb\ComposeID */
    public $srcId = null;
    
    /**  @var \utilpb\ComposeID */
    public $desId = null;
    
    /**  @var boolean */
    public $opDir = null;
    
    /**  @var \utilpb\RetCode */
    public $ret = null;
    
    /**  @var int */
    public $index = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbHotSpringOp');

      // REQUIRED INT32 flag = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE srcId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "srcId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED MESSAGE desId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "desId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL BOOL opDir = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "opDir";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE ret = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "ret";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\RetCode';
      $descriptor->addField($f);

      // OPTIONAL INT32 index = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(1);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\PbHotSpringOp
     */
    public function clearFlag(){
      return $this->_clear(1);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(1);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\PbHotSpringOp
     */
    public function setFlag( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <srcId> has a value
     *
     * @return boolean
     */
    public function hasSrcId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <srcId> value
     *
     * @return \utilpb\PbHotSpringOp
     */
    public function clearSrcId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <srcId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getSrcId(){
      return $this->_get(2);
    }
    
    /**
     * Set <srcId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PbHotSpringOp
     */
    public function setSrcId(\utilpb\ComposeID $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <desId> has a value
     *
     * @return boolean
     */
    public function hasDesId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <desId> value
     *
     * @return \utilpb\PbHotSpringOp
     */
    public function clearDesId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <desId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getDesId(){
      return $this->_get(3);
    }
    
    /**
     * Set <desId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PbHotSpringOp
     */
    public function setDesId(\utilpb\ComposeID $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <opDir> has a value
     *
     * @return boolean
     */
    public function hasOpDir(){
      return $this->_has(4);
    }
    
    /**
     * Clear <opDir> value
     *
     * @return \utilpb\PbHotSpringOp
     */
    public function clearOpDir(){
      return $this->_clear(4);
    }
    
    /**
     * Get <opDir> value
     *
     * @return boolean
     */
    public function getOpDir(){
      return $this->_get(4);
    }
    
    /**
     * Set <opDir> value
     *
     * @param boolean $value
     * @return \utilpb\PbHotSpringOp
     */
    public function setOpDir( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <ret> has a value
     *
     * @return boolean
     */
    public function hasRet(){
      return $this->_has(5);
    }
    
    /**
     * Clear <ret> value
     *
     * @return \utilpb\PbHotSpringOp
     */
    public function clearRet(){
      return $this->_clear(5);
    }
    
    /**
     * Get <ret> value
     *
     * @return \utilpb\RetCode
     */
    public function getRet(){
      return $this->_get(5);
    }
    
    /**
     * Set <ret> value
     *
     * @param \utilpb\RetCode $value
     * @return \utilpb\PbHotSpringOp
     */
    public function setRet(\utilpb\RetCode $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(6);
    }
    
    /**
     * Clear <index> value
     *
     * @return \utilpb\PbHotSpringOp
     */
    public function clearIndex(){
      return $this->_clear(6);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(6);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \utilpb\PbHotSpringOp
     */
    public function setIndex( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace utilpb {

  class PbHotSpringInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $flag = null;
    
    /**  @var int */
    public $opCnt = null;
    
    /**  @var int */
    public $beOpCnt = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbHotSpringInfo');

      // REQUIRED INT32 flag = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 opCnt = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "opCnt";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 beOpCnt = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "beOpCnt";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(1);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\PbHotSpringInfo
     */
    public function clearFlag(){
      return $this->_clear(1);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(1);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\PbHotSpringInfo
     */
    public function setFlag( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <opCnt> has a value
     *
     * @return boolean
     */
    public function hasOpCnt(){
      return $this->_has(2);
    }
    
    /**
     * Clear <opCnt> value
     *
     * @return \utilpb\PbHotSpringInfo
     */
    public function clearOpCnt(){
      return $this->_clear(2);
    }
    
    /**
     * Get <opCnt> value
     *
     * @return int
     */
    public function getOpCnt(){
      return $this->_get(2);
    }
    
    /**
     * Set <opCnt> value
     *
     * @param int $value
     * @return \utilpb\PbHotSpringInfo
     */
    public function setOpCnt( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <beOpCnt> has a value
     *
     * @return boolean
     */
    public function hasBeOpCnt(){
      return $this->_has(3);
    }
    
    /**
     * Clear <beOpCnt> value
     *
     * @return \utilpb\PbHotSpringInfo
     */
    public function clearBeOpCnt(){
      return $this->_clear(3);
    }
    
    /**
     * Get <beOpCnt> value
     *
     * @return int
     */
    public function getBeOpCnt(){
      return $this->_get(3);
    }
    
    /**
     * Set <beOpCnt> value
     *
     * @param int $value
     * @return \utilpb\PbHotSpringInfo
     */
    public function setBeOpCnt( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class PbHotSpringInfoList extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\RetCode */
    public $ret = null;
    
    /**  @var \utilpb\PbHotSpringInfo[]  */
    public $hotSpringInfo = array();
    
    /**  @var \utilpb\ComposeID */
    public $id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbHotSpringInfoList');

      // REQUIRED MESSAGE ret = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "ret";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\RetCode';
      $descriptor->addField($f);

      // REPEATED MESSAGE hotSpringInfo = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "hotSpringInfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\PbHotSpringInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <ret> has a value
     *
     * @return boolean
     */
    public function hasRet(){
      return $this->_has(1);
    }
    
    /**
     * Clear <ret> value
     *
     * @return \utilpb\PbHotSpringInfoList
     */
    public function clearRet(){
      return $this->_clear(1);
    }
    
    /**
     * Get <ret> value
     *
     * @return \utilpb\RetCode
     */
    public function getRet(){
      return $this->_get(1);
    }
    
    /**
     * Set <ret> value
     *
     * @param \utilpb\RetCode $value
     * @return \utilpb\PbHotSpringInfoList
     */
    public function setRet(\utilpb\RetCode $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <hotSpringInfo> has a value
     *
     * @return boolean
     */
    public function hasHotSpringInfo(){
      return $this->_has(2);
    }
    
    /**
     * Clear <hotSpringInfo> value
     *
     * @return \utilpb\PbHotSpringInfoList
     */
    public function clearHotSpringInfo(){
      return $this->_clear(2);
    }
    
    /**
     * Get <hotSpringInfo> value
     *
     * @param int $idx
     * @return \utilpb\PbHotSpringInfo
     */
    public function getHotSpringInfo($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <hotSpringInfo> value
     *
     * @param \utilpb\PbHotSpringInfo $value
     * @return \utilpb\PbHotSpringInfoList
     */
    public function setHotSpringInfo(\utilpb\PbHotSpringInfo $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <hotSpringInfo>
     *
     * @return \utilpb\PbHotSpringInfo[]
     */
    public function getHotSpringInfoList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <hotSpringInfo>
     *
     * @param \utilpb\PbHotSpringInfo $value
     * @return \utilpb\PbHotSpringInfoList
     */
    public function addHotSpringInfo(\utilpb\PbHotSpringInfo $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\PbHotSpringInfoList
     */
    public function clearId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(3);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PbHotSpringInfoList
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class PbHotSpringEnd extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $totalExp = null;
    
    /**  @var int */
    public $cuobeiAddition = null;
    
    /**  @var int */
    public $teamAddition = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbHotSpringEnd');

      // REQUIRED INT32 totalExp = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "totalExp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 cuobeiAddition = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cuobeiAddition";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 teamAddition = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "teamAddition";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <totalExp> has a value
     *
     * @return boolean
     */
    public function hasTotalExp(){
      return $this->_has(1);
    }
    
    /**
     * Clear <totalExp> value
     *
     * @return \utilpb\PbHotSpringEnd
     */
    public function clearTotalExp(){
      return $this->_clear(1);
    }
    
    /**
     * Get <totalExp> value
     *
     * @return int
     */
    public function getTotalExp(){
      return $this->_get(1);
    }
    
    /**
     * Set <totalExp> value
     *
     * @param int $value
     * @return \utilpb\PbHotSpringEnd
     */
    public function setTotalExp( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <cuobeiAddition> has a value
     *
     * @return boolean
     */
    public function hasCuobeiAddition(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cuobeiAddition> value
     *
     * @return \utilpb\PbHotSpringEnd
     */
    public function clearCuobeiAddition(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cuobeiAddition> value
     *
     * @return int
     */
    public function getCuobeiAddition(){
      return $this->_get(2);
    }
    
    /**
     * Set <cuobeiAddition> value
     *
     * @param int $value
     * @return \utilpb\PbHotSpringEnd
     */
    public function setCuobeiAddition( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <teamAddition> has a value
     *
     * @return boolean
     */
    public function hasTeamAddition(){
      return $this->_has(3);
    }
    
    /**
     * Clear <teamAddition> value
     *
     * @return \utilpb\PbHotSpringEnd
     */
    public function clearTeamAddition(){
      return $this->_clear(3);
    }
    
    /**
     * Get <teamAddition> value
     *
     * @return int
     */
    public function getTeamAddition(){
      return $this->_get(3);
    }
    
    /**
     * Set <teamAddition> value
     *
     * @param int $value
     * @return \utilpb\PbHotSpringEnd
     */
    public function setTeamAddition( $value){
      return $this->_set(3, $value);
    }
  }
}

