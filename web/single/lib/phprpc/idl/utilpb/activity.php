<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/activity.proto
//   Date: 2014-12-19 08:23:04

namespace utilpb {

  class PavilionItem extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $start = null;
    
    /**  @var int */
    public $over = null;
    
    /**  @var int */
    public $bind = null;
    
    /**  @var int */
    public $old = null;
    
    /**  @var int */
    public $price = null;
    
    /**  @var int */
    public $currency = null;
    
    /**  @var int */
    public $total = null;
    
    /**  @var int */
    public $limit = null;
    
    /**  @var int */
    public $limittype = null;
    
    /**  @var int */
    public $index = null;
    
    /**  @var string */
    public $itemId = null;
    
    /**  @var string */
    public $recommend = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PavilionItem');

      // REQUIRED INT32 start = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "start";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 over = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "over";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 bind = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "bind";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 old = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "old";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 price = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "price";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 currency = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "currency";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 total = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "total";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 limit = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "limit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 limittype = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "limittype";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED INT32 index = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING itemId = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "itemId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING recommend = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "recommend";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <start> has a value
     *
     * @return boolean
     */
    public function hasStart(){
      return $this->_has(1);
    }
    
    /**
     * Clear <start> value
     *
     * @return \utilpb\PavilionItem
     */
    public function clearStart(){
      return $this->_clear(1);
    }
    
    /**
     * Get <start> value
     *
     * @return int
     */
    public function getStart(){
      return $this->_get(1);
    }
    
    /**
     * Set <start> value
     *
     * @param int $value
     * @return \utilpb\PavilionItem
     */
    public function setStart( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <over> has a value
     *
     * @return boolean
     */
    public function hasOver(){
      return $this->_has(2);
    }
    
    /**
     * Clear <over> value
     *
     * @return \utilpb\PavilionItem
     */
    public function clearOver(){
      return $this->_clear(2);
    }
    
    /**
     * Get <over> value
     *
     * @return int
     */
    public function getOver(){
      return $this->_get(2);
    }
    
    /**
     * Set <over> value
     *
     * @param int $value
     * @return \utilpb\PavilionItem
     */
    public function setOver( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <bind> has a value
     *
     * @return boolean
     */
    public function hasBind(){
      return $this->_has(3);
    }
    
    /**
     * Clear <bind> value
     *
     * @return \utilpb\PavilionItem
     */
    public function clearBind(){
      return $this->_clear(3);
    }
    
    /**
     * Get <bind> value
     *
     * @return int
     */
    public function getBind(){
      return $this->_get(3);
    }
    
    /**
     * Set <bind> value
     *
     * @param int $value
     * @return \utilpb\PavilionItem
     */
    public function setBind( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <old> has a value
     *
     * @return boolean
     */
    public function hasOld(){
      return $this->_has(4);
    }
    
    /**
     * Clear <old> value
     *
     * @return \utilpb\PavilionItem
     */
    public function clearOld(){
      return $this->_clear(4);
    }
    
    /**
     * Get <old> value
     *
     * @return int
     */
    public function getOld(){
      return $this->_get(4);
    }
    
    /**
     * Set <old> value
     *
     * @param int $value
     * @return \utilpb\PavilionItem
     */
    public function setOld( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <price> has a value
     *
     * @return boolean
     */
    public function hasPrice(){
      return $this->_has(5);
    }
    
    /**
     * Clear <price> value
     *
     * @return \utilpb\PavilionItem
     */
    public function clearPrice(){
      return $this->_clear(5);
    }
    
    /**
     * Get <price> value
     *
     * @return int
     */
    public function getPrice(){
      return $this->_get(5);
    }
    
    /**
     * Set <price> value
     *
     * @param int $value
     * @return \utilpb\PavilionItem
     */
    public function setPrice( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <currency> has a value
     *
     * @return boolean
     */
    public function hasCurrency(){
      return $this->_has(6);
    }
    
    /**
     * Clear <currency> value
     *
     * @return \utilpb\PavilionItem
     */
    public function clearCurrency(){
      return $this->_clear(6);
    }
    
    /**
     * Get <currency> value
     *
     * @return int
     */
    public function getCurrency(){
      return $this->_get(6);
    }
    
    /**
     * Set <currency> value
     *
     * @param int $value
     * @return \utilpb\PavilionItem
     */
    public function setCurrency( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <total> has a value
     *
     * @return boolean
     */
    public function hasTotal(){
      return $this->_has(7);
    }
    
    /**
     * Clear <total> value
     *
     * @return \utilpb\PavilionItem
     */
    public function clearTotal(){
      return $this->_clear(7);
    }
    
    /**
     * Get <total> value
     *
     * @return int
     */
    public function getTotal(){
      return $this->_get(7);
    }
    
    /**
     * Set <total> value
     *
     * @param int $value
     * @return \utilpb\PavilionItem
     */
    public function setTotal( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <limit> has a value
     *
     * @return boolean
     */
    public function hasLimit(){
      return $this->_has(8);
    }
    
    /**
     * Clear <limit> value
     *
     * @return \utilpb\PavilionItem
     */
    public function clearLimit(){
      return $this->_clear(8);
    }
    
    /**
     * Get <limit> value
     *
     * @return int
     */
    public function getLimit(){
      return $this->_get(8);
    }
    
    /**
     * Set <limit> value
     *
     * @param int $value
     * @return \utilpb\PavilionItem
     */
    public function setLimit( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <limittype> has a value
     *
     * @return boolean
     */
    public function hasLimittype(){
      return $this->_has(9);
    }
    
    /**
     * Clear <limittype> value
     *
     * @return \utilpb\PavilionItem
     */
    public function clearLimittype(){
      return $this->_clear(9);
    }
    
    /**
     * Get <limittype> value
     *
     * @return int
     */
    public function getLimittype(){
      return $this->_get(9);
    }
    
    /**
     * Set <limittype> value
     *
     * @param int $value
     * @return \utilpb\PavilionItem
     */
    public function setLimittype( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(10);
    }
    
    /**
     * Clear <index> value
     *
     * @return \utilpb\PavilionItem
     */
    public function clearIndex(){
      return $this->_clear(10);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(10);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \utilpb\PavilionItem
     */
    public function setIndex( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <itemId> has a value
     *
     * @return boolean
     */
    public function hasItemId(){
      return $this->_has(11);
    }
    
    /**
     * Clear <itemId> value
     *
     * @return \utilpb\PavilionItem
     */
    public function clearItemId(){
      return $this->_clear(11);
    }
    
    /**
     * Get <itemId> value
     *
     * @return string
     */
    public function getItemId(){
      return $this->_get(11);
    }
    
    /**
     * Set <itemId> value
     *
     * @param string $value
     * @return \utilpb\PavilionItem
     */
    public function setItemId( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <recommend> has a value
     *
     * @return boolean
     */
    public function hasRecommend(){
      return $this->_has(12);
    }
    
    /**
     * Clear <recommend> value
     *
     * @return \utilpb\PavilionItem
     */
    public function clearRecommend(){
      return $this->_clear(12);
    }
    
    /**
     * Get <recommend> value
     *
     * @return string
     */
    public function getRecommend(){
      return $this->_get(12);
    }
    
    /**
     * Set <recommend> value
     *
     * @param string $value
     * @return \utilpb\PavilionItem
     */
    public function setRecommend( $value){
      return $this->_set(12, $value);
    }
  }
}

namespace utilpb {

  class Pavilion extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\PavilionItem[]  */
    public $items = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.Pavilion');

      // REPEATED MESSAGE items = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "items";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\PavilionItem';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <items> has a value
     *
     * @return boolean
     */
    public function hasItems(){
      return $this->_has(1);
    }
    
    /**
     * Clear <items> value
     *
     * @return \utilpb\Pavilion
     */
    public function clearItems(){
      return $this->_clear(1);
    }
    
    /**
     * Get <items> value
     *
     * @param int $idx
     * @return \utilpb\PavilionItem
     */
    public function getItems($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <items> value
     *
     * @param \utilpb\PavilionItem $value
     * @return \utilpb\Pavilion
     */
    public function setItems(\utilpb\PavilionItem $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <items>
     *
     * @return \utilpb\PavilionItem[]
     */
    public function getItemsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <items>
     *
     * @param \utilpb\PavilionItem $value
     * @return \utilpb\Pavilion
     */
    public function addItems(\utilpb\PavilionItem $value){
     return $this->_add(1, $value);
    }
  }
}

namespace utilpb {

  class ActivityStatus extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $type = null;
    
    /**  @var int */
    public $flag = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.ActivityStatus');

      // REQUIRED INT32 type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 flag = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\ActivityStatus
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\ActivityStatus
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(2);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\ActivityStatus
     */
    public function clearFlag(){
      return $this->_clear(2);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(2);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\ActivityStatus
     */
    public function setFlag( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class AllBgActivity extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ActivityStatus[]  */
    public $status = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.AllBgActivity');

      // REPEATED MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\ActivityStatus';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \utilpb\AllBgActivity
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @param int $idx
     * @return \utilpb\ActivityStatus
     */
    public function getStatus($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <status> value
     *
     * @param \utilpb\ActivityStatus $value
     * @return \utilpb\AllBgActivity
     */
    public function setStatus(\utilpb\ActivityStatus $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <status>
     *
     * @return \utilpb\ActivityStatus[]
     */
    public function getStatusList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <status>
     *
     * @param \utilpb\ActivityStatus $value
     * @return \utilpb\AllBgActivity
     */
    public function addStatus(\utilpb\ActivityStatus $value){
     return $this->_add(1, $value);
    }
  }
}

