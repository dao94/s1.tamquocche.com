<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/consignment.proto
//   Date: 2014-12-19 08:23:05

namespace utilpb {

  class GoodUp extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $type = null;
    
    /**  @var string */
    public $uuid = null;
    
    /**  @var int */
    public $number = null;
    
    /**  @var int */
    public $gold = null;
    
    /**  @var int */
    public $jade = null;
    
    /**  @var int */
    public $needMoneyType = null;
    
    /**  @var int */
    public $needMoney = null;
    
    /**  @var int */
    public $bdcFlag = null;
    
    /**  @var int */
    public $time = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.GoodUp');

      // REQUIRED INT32 type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING uuid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "uuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 number = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 gold = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "gold";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 jade = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "jade";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED INT32 needMoneyType = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "needMoneyType";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 needMoney = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "needMoney";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 bdcFlag = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "bdcFlag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED INT32 time = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\GoodUp
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\GoodUp
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <uuid> has a value
     *
     * @return boolean
     */
    public function hasUuid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <uuid> value
     *
     * @return \utilpb\GoodUp
     */
    public function clearUuid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <uuid> value
     *
     * @return string
     */
    public function getUuid(){
      return $this->_get(2);
    }
    
    /**
     * Set <uuid> value
     *
     * @param string $value
     * @return \utilpb\GoodUp
     */
    public function setUuid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <number> has a value
     *
     * @return boolean
     */
    public function hasNumber(){
      return $this->_has(3);
    }
    
    /**
     * Clear <number> value
     *
     * @return \utilpb\GoodUp
     */
    public function clearNumber(){
      return $this->_clear(3);
    }
    
    /**
     * Get <number> value
     *
     * @return int
     */
    public function getNumber(){
      return $this->_get(3);
    }
    
    /**
     * Set <number> value
     *
     * @param int $value
     * @return \utilpb\GoodUp
     */
    public function setNumber( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <gold> has a value
     *
     * @return boolean
     */
    public function hasGold(){
      return $this->_has(4);
    }
    
    /**
     * Clear <gold> value
     *
     * @return \utilpb\GoodUp
     */
    public function clearGold(){
      return $this->_clear(4);
    }
    
    /**
     * Get <gold> value
     *
     * @return int
     */
    public function getGold(){
      return $this->_get(4);
    }
    
    /**
     * Set <gold> value
     *
     * @param int $value
     * @return \utilpb\GoodUp
     */
    public function setGold( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <jade> has a value
     *
     * @return boolean
     */
    public function hasJade(){
      return $this->_has(5);
    }
    
    /**
     * Clear <jade> value
     *
     * @return \utilpb\GoodUp
     */
    public function clearJade(){
      return $this->_clear(5);
    }
    
    /**
     * Get <jade> value
     *
     * @return int
     */
    public function getJade(){
      return $this->_get(5);
    }
    
    /**
     * Set <jade> value
     *
     * @param int $value
     * @return \utilpb\GoodUp
     */
    public function setJade( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <needMoneyType> has a value
     *
     * @return boolean
     */
    public function hasNeedMoneyType(){
      return $this->_has(6);
    }
    
    /**
     * Clear <needMoneyType> value
     *
     * @return \utilpb\GoodUp
     */
    public function clearNeedMoneyType(){
      return $this->_clear(6);
    }
    
    /**
     * Get <needMoneyType> value
     *
     * @return int
     */
    public function getNeedMoneyType(){
      return $this->_get(6);
    }
    
    /**
     * Set <needMoneyType> value
     *
     * @param int $value
     * @return \utilpb\GoodUp
     */
    public function setNeedMoneyType( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <needMoney> has a value
     *
     * @return boolean
     */
    public function hasNeedMoney(){
      return $this->_has(7);
    }
    
    /**
     * Clear <needMoney> value
     *
     * @return \utilpb\GoodUp
     */
    public function clearNeedMoney(){
      return $this->_clear(7);
    }
    
    /**
     * Get <needMoney> value
     *
     * @return int
     */
    public function getNeedMoney(){
      return $this->_get(7);
    }
    
    /**
     * Set <needMoney> value
     *
     * @param int $value
     * @return \utilpb\GoodUp
     */
    public function setNeedMoney( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <bdcFlag> has a value
     *
     * @return boolean
     */
    public function hasBdcFlag(){
      return $this->_has(8);
    }
    
    /**
     * Clear <bdcFlag> value
     *
     * @return \utilpb\GoodUp
     */
    public function clearBdcFlag(){
      return $this->_clear(8);
    }
    
    /**
     * Get <bdcFlag> value
     *
     * @return int
     */
    public function getBdcFlag(){
      return $this->_get(8);
    }
    
    /**
     * Set <bdcFlag> value
     *
     * @param int $value
     * @return \utilpb\GoodUp
     */
    public function setBdcFlag( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(9);
    }
    
    /**
     * Clear <time> value
     *
     * @return \utilpb\GoodUp
     */
    public function clearTime(){
      return $this->_clear(9);
    }
    
    /**
     * Get <time> value
     *
     * @return int
     */
    public function getTime(){
      return $this->_get(9);
    }
    
    /**
     * Set <time> value
     *
     * @param int $value
     * @return \utilpb\GoodUp
     */
    public function setTime( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace utilpb {

  class GoodDown extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $uuid = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.GoodDown');

      // REQUIRED STRING uuid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "uuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <uuid> has a value
     *
     * @return boolean
     */
    public function hasUuid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <uuid> value
     *
     * @return \utilpb\GoodDown
     */
    public function clearUuid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <uuid> value
     *
     * @return string
     */
    public function getUuid(){
      return $this->_get(1);
    }
    
    /**
     * Set <uuid> value
     *
     * @param string $value
     * @return \utilpb\GoodDown
     */
    public function setUuid( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace utilpb {

  class GoodBuy extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $uuid = null;
    
    /**  @var int */
    public $number = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.GoodBuy');

      // REQUIRED STRING uuid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "uuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 number = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <uuid> has a value
     *
     * @return boolean
     */
    public function hasUuid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <uuid> value
     *
     * @return \utilpb\GoodBuy
     */
    public function clearUuid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <uuid> value
     *
     * @return string
     */
    public function getUuid(){
      return $this->_get(1);
    }
    
    /**
     * Set <uuid> value
     *
     * @param string $value
     * @return \utilpb\GoodBuy
     */
    public function setUuid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <number> has a value
     *
     * @return boolean
     */
    public function hasNumber(){
      return $this->_has(2);
    }
    
    /**
     * Clear <number> value
     *
     * @return \utilpb\GoodBuy
     */
    public function clearNumber(){
      return $this->_clear(2);
    }
    
    /**
     * Get <number> value
     *
     * @return int
     */
    public function getNumber(){
      return $this->_get(2);
    }
    
    /**
     * Set <number> value
     *
     * @param int $value
     * @return \utilpb\GoodBuy
     */
    public function setNumber( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class GoodSearch extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $itemId = null;
    
    /**  @var string */
    public $indexId = null;
    
    /**  @var int */
    public $level = null;
    
    /**  @var int */
    public $occ = null;
    
    /**  @var int */
    public $sort = null;
    
    /**  @var int */
    public $page = null;
    
    /**  @var int */
    public $pageSize = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.GoodSearch');

      // OPTIONAL DOUBLE itemId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "itemId";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING indexId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "indexId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 level = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 occ = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "occ";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 sort = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "sort";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED INT32 page = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "page";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 pageSize = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "pageSize";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <itemId> has a value
     *
     * @return boolean
     */
    public function hasItemId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <itemId> value
     *
     * @return \utilpb\GoodSearch
     */
    public function clearItemId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <itemId> value
     *
     * @return float
     */
    public function getItemId(){
      return $this->_get(1);
    }
    
    /**
     * Set <itemId> value
     *
     * @param float $value
     * @return \utilpb\GoodSearch
     */
    public function setItemId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <indexId> has a value
     *
     * @return boolean
     */
    public function hasIndexId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <indexId> value
     *
     * @return \utilpb\GoodSearch
     */
    public function clearIndexId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <indexId> value
     *
     * @return string
     */
    public function getIndexId(){
      return $this->_get(2);
    }
    
    /**
     * Set <indexId> value
     *
     * @param string $value
     * @return \utilpb\GoodSearch
     */
    public function setIndexId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(3);
    }
    
    /**
     * Clear <level> value
     *
     * @return \utilpb\GoodSearch
     */
    public function clearLevel(){
      return $this->_clear(3);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(3);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \utilpb\GoodSearch
     */
    public function setLevel( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <occ> has a value
     *
     * @return boolean
     */
    public function hasOcc(){
      return $this->_has(4);
    }
    
    /**
     * Clear <occ> value
     *
     * @return \utilpb\GoodSearch
     */
    public function clearOcc(){
      return $this->_clear(4);
    }
    
    /**
     * Get <occ> value
     *
     * @return int
     */
    public function getOcc(){
      return $this->_get(4);
    }
    
    /**
     * Set <occ> value
     *
     * @param int $value
     * @return \utilpb\GoodSearch
     */
    public function setOcc( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <sort> has a value
     *
     * @return boolean
     */
    public function hasSort(){
      return $this->_has(5);
    }
    
    /**
     * Clear <sort> value
     *
     * @return \utilpb\GoodSearch
     */
    public function clearSort(){
      return $this->_clear(5);
    }
    
    /**
     * Get <sort> value
     *
     * @return int
     */
    public function getSort(){
      return $this->_get(5);
    }
    
    /**
     * Set <sort> value
     *
     * @param int $value
     * @return \utilpb\GoodSearch
     */
    public function setSort( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <page> has a value
     *
     * @return boolean
     */
    public function hasPage(){
      return $this->_has(6);
    }
    
    /**
     * Clear <page> value
     *
     * @return \utilpb\GoodSearch
     */
    public function clearPage(){
      return $this->_clear(6);
    }
    
    /**
     * Get <page> value
     *
     * @return int
     */
    public function getPage(){
      return $this->_get(6);
    }
    
    /**
     * Set <page> value
     *
     * @param int $value
     * @return \utilpb\GoodSearch
     */
    public function setPage( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <pageSize> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(7);
    }
    
    /**
     * Clear <pageSize> value
     *
     * @return \utilpb\GoodSearch
     */
    public function clearPageSize(){
      return $this->_clear(7);
    }
    
    /**
     * Get <pageSize> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(7);
    }
    
    /**
     * Set <pageSize> value
     *
     * @param int $value
     * @return \utilpb\GoodSearch
     */
    public function setPageSize( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace utilpb {

  class GoodList extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $retCode = null;
    
    /**  @var \utilpb\Good[]  */
    public $good = array();
    
    /**  @var int */
    public $number = null;
    
    /**  @var int */
    public $page = null;
    
    /**  @var int */
    public $pageSize = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.GoodList');

      // REQUIRED INT32 retCode = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "retCode";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE good = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "good";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\Good';
      $descriptor->addField($f);

      // REQUIRED INT32 number = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 page = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "page";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 pageSize = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "pageSize";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <retCode> has a value
     *
     * @return boolean
     */
    public function hasRetCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <retCode> value
     *
     * @return \utilpb\GoodList
     */
    public function clearRetCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <retCode> value
     *
     * @return int
     */
    public function getRetCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <retCode> value
     *
     * @param int $value
     * @return \utilpb\GoodList
     */
    public function setRetCode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <good> has a value
     *
     * @return boolean
     */
    public function hasGood(){
      return $this->_has(2);
    }
    
    /**
     * Clear <good> value
     *
     * @return \utilpb\GoodList
     */
    public function clearGood(){
      return $this->_clear(2);
    }
    
    /**
     * Get <good> value
     *
     * @param int $idx
     * @return \utilpb\Good
     */
    public function getGood($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <good> value
     *
     * @param \utilpb\Good $value
     * @return \utilpb\GoodList
     */
    public function setGood(\utilpb\Good $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <good>
     *
     * @return \utilpb\Good[]
     */
    public function getGoodList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <good>
     *
     * @param \utilpb\Good $value
     * @return \utilpb\GoodList
     */
    public function addGood(\utilpb\Good $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <number> has a value
     *
     * @return boolean
     */
    public function hasNumber(){
      return $this->_has(3);
    }
    
    /**
     * Clear <number> value
     *
     * @return \utilpb\GoodList
     */
    public function clearNumber(){
      return $this->_clear(3);
    }
    
    /**
     * Get <number> value
     *
     * @return int
     */
    public function getNumber(){
      return $this->_get(3);
    }
    
    /**
     * Set <number> value
     *
     * @param int $value
     * @return \utilpb\GoodList
     */
    public function setNumber( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <page> has a value
     *
     * @return boolean
     */
    public function hasPage(){
      return $this->_has(4);
    }
    
    /**
     * Clear <page> value
     *
     * @return \utilpb\GoodList
     */
    public function clearPage(){
      return $this->_clear(4);
    }
    
    /**
     * Get <page> value
     *
     * @return int
     */
    public function getPage(){
      return $this->_get(4);
    }
    
    /**
     * Set <page> value
     *
     * @param int $value
     * @return \utilpb\GoodList
     */
    public function setPage( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <pageSize> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(7);
    }
    
    /**
     * Clear <pageSize> value
     *
     * @return \utilpb\GoodList
     */
    public function clearPageSize(){
      return $this->_clear(7);
    }
    
    /**
     * Get <pageSize> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(7);
    }
    
    /**
     * Set <pageSize> value
     *
     * @param int $value
     * @return \utilpb\GoodList
     */
    public function setPageSize( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace utilpb {

  class Good extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $type = null;
    
    /**  @var string */
    public $uuid = null;
    
    /**  @var \utilpb\UtilItem */
    public $item = null;
    
    /**  @var int */
    public $gold = null;
    
    /**  @var int */
    public $jade = null;
    
    /**  @var int */
    public $needMoneyType = null;
    
    /**  @var int */
    public $needMoney = null;
    
    /**  @var float */
    public $time = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.Good');

      // REQUIRED INT32 type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING uuid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "uuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE item = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "item";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\UtilItem';
      $descriptor->addField($f);

      // OPTIONAL INT32 gold = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "gold";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 jade = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "jade";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED INT32 needMoneyType = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "needMoneyType";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 needMoney = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "needMoney";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE time = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\Good
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\Good
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <uuid> has a value
     *
     * @return boolean
     */
    public function hasUuid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <uuid> value
     *
     * @return \utilpb\Good
     */
    public function clearUuid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <uuid> value
     *
     * @return string
     */
    public function getUuid(){
      return $this->_get(2);
    }
    
    /**
     * Set <uuid> value
     *
     * @param string $value
     * @return \utilpb\Good
     */
    public function setUuid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <item> has a value
     *
     * @return boolean
     */
    public function hasItem(){
      return $this->_has(3);
    }
    
    /**
     * Clear <item> value
     *
     * @return \utilpb\Good
     */
    public function clearItem(){
      return $this->_clear(3);
    }
    
    /**
     * Get <item> value
     *
     * @return \utilpb\UtilItem
     */
    public function getItem(){
      return $this->_get(3);
    }
    
    /**
     * Set <item> value
     *
     * @param \utilpb\UtilItem $value
     * @return \utilpb\Good
     */
    public function setItem(\utilpb\UtilItem $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <gold> has a value
     *
     * @return boolean
     */
    public function hasGold(){
      return $this->_has(4);
    }
    
    /**
     * Clear <gold> value
     *
     * @return \utilpb\Good
     */
    public function clearGold(){
      return $this->_clear(4);
    }
    
    /**
     * Get <gold> value
     *
     * @return int
     */
    public function getGold(){
      return $this->_get(4);
    }
    
    /**
     * Set <gold> value
     *
     * @param int $value
     * @return \utilpb\Good
     */
    public function setGold( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <jade> has a value
     *
     * @return boolean
     */
    public function hasJade(){
      return $this->_has(5);
    }
    
    /**
     * Clear <jade> value
     *
     * @return \utilpb\Good
     */
    public function clearJade(){
      return $this->_clear(5);
    }
    
    /**
     * Get <jade> value
     *
     * @return int
     */
    public function getJade(){
      return $this->_get(5);
    }
    
    /**
     * Set <jade> value
     *
     * @param int $value
     * @return \utilpb\Good
     */
    public function setJade( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <needMoneyType> has a value
     *
     * @return boolean
     */
    public function hasNeedMoneyType(){
      return $this->_has(6);
    }
    
    /**
     * Clear <needMoneyType> value
     *
     * @return \utilpb\Good
     */
    public function clearNeedMoneyType(){
      return $this->_clear(6);
    }
    
    /**
     * Get <needMoneyType> value
     *
     * @return int
     */
    public function getNeedMoneyType(){
      return $this->_get(6);
    }
    
    /**
     * Set <needMoneyType> value
     *
     * @param int $value
     * @return \utilpb\Good
     */
    public function setNeedMoneyType( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <needMoney> has a value
     *
     * @return boolean
     */
    public function hasNeedMoney(){
      return $this->_has(7);
    }
    
    /**
     * Clear <needMoney> value
     *
     * @return \utilpb\Good
     */
    public function clearNeedMoney(){
      return $this->_clear(7);
    }
    
    /**
     * Get <needMoney> value
     *
     * @return int
     */
    public function getNeedMoney(){
      return $this->_get(7);
    }
    
    /**
     * Set <needMoney> value
     *
     * @param int $value
     * @return \utilpb\Good
     */
    public function setNeedMoney( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(8);
    }
    
    /**
     * Clear <time> value
     *
     * @return \utilpb\Good
     */
    public function clearTime(){
      return $this->_clear(8);
    }
    
    /**
     * Get <time> value
     *
     * @return float
     */
    public function getTime(){
      return $this->_get(8);
    }
    
    /**
     * Set <time> value
     *
     * @param float $value
     * @return \utilpb\Good
     */
    public function setTime( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace utilpb {

  class GoodUpList extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\Good[]  */
    public $good = array();
    
    /**  @var int */
    public $gold = null;
    
    /**  @var int */
    public $jade = null;
    
    /**  @var \utilpb\GoodRecord[]  */
    public $record = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.GoodUpList');

      // REPEATED MESSAGE good = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "good";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\Good';
      $descriptor->addField($f);

      // REQUIRED INT32 gold = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "gold";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 jade = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "jade";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE record = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "record";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\GoodRecord';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <good> has a value
     *
     * @return boolean
     */
    public function hasGood(){
      return $this->_has(1);
    }
    
    /**
     * Clear <good> value
     *
     * @return \utilpb\GoodUpList
     */
    public function clearGood(){
      return $this->_clear(1);
    }
    
    /**
     * Get <good> value
     *
     * @param int $idx
     * @return \utilpb\Good
     */
    public function getGood($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <good> value
     *
     * @param \utilpb\Good $value
     * @return \utilpb\GoodUpList
     */
    public function setGood(\utilpb\Good $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <good>
     *
     * @return \utilpb\Good[]
     */
    public function getGoodList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <good>
     *
     * @param \utilpb\Good $value
     * @return \utilpb\GoodUpList
     */
    public function addGood(\utilpb\Good $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <gold> has a value
     *
     * @return boolean
     */
    public function hasGold(){
      return $this->_has(2);
    }
    
    /**
     * Clear <gold> value
     *
     * @return \utilpb\GoodUpList
     */
    public function clearGold(){
      return $this->_clear(2);
    }
    
    /**
     * Get <gold> value
     *
     * @return int
     */
    public function getGold(){
      return $this->_get(2);
    }
    
    /**
     * Set <gold> value
     *
     * @param int $value
     * @return \utilpb\GoodUpList
     */
    public function setGold( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <jade> has a value
     *
     * @return boolean
     */
    public function hasJade(){
      return $this->_has(3);
    }
    
    /**
     * Clear <jade> value
     *
     * @return \utilpb\GoodUpList
     */
    public function clearJade(){
      return $this->_clear(3);
    }
    
    /**
     * Get <jade> value
     *
     * @return int
     */
    public function getJade(){
      return $this->_get(3);
    }
    
    /**
     * Set <jade> value
     *
     * @param int $value
     * @return \utilpb\GoodUpList
     */
    public function setJade( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <record> has a value
     *
     * @return boolean
     */
    public function hasRecord(){
      return $this->_has(4);
    }
    
    /**
     * Clear <record> value
     *
     * @return \utilpb\GoodUpList
     */
    public function clearRecord(){
      return $this->_clear(4);
    }
    
    /**
     * Get <record> value
     *
     * @param int $idx
     * @return \utilpb\GoodRecord
     */
    public function getRecord($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <record> value
     *
     * @param \utilpb\GoodRecord $value
     * @return \utilpb\GoodUpList
     */
    public function setRecord(\utilpb\GoodRecord $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <record>
     *
     * @return \utilpb\GoodRecord[]
     */
    public function getRecordList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <record>
     *
     * @param \utilpb\GoodRecord $value
     * @return \utilpb\GoodUpList
     */
    public function addRecord(\utilpb\GoodRecord $value){
     return $this->_add(4, $value);
    }
  }
}

namespace utilpb {

  class GoodCheck extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $retCode = null;
    
    /**  @var int */
    public $type = null;
    
    /**  @var int */
    public $gold = null;
    
    /**  @var int */
    public $jade = null;
    
    /**  @var int */
    public $needMoneyType = null;
    
    /**  @var int */
    public $needMoney = null;
    
    /**  @var \utilpb\UtilItem */
    public $item = null;
    
    /**  @var int */
    public $time = null;
    
    /**  @var int */
    public $bdcFlag = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.GoodCheck');

      // REQUIRED INT32 retCode = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "retCode";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 gold = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "gold";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 jade = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "jade";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED INT32 needMoneyType = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "needMoneyType";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 needMoney = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "needMoney";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE item = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "item";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\UtilItem';
      $descriptor->addField($f);

      // REQUIRED INT32 time = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 bdcFlag = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "bdcFlag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <retCode> has a value
     *
     * @return boolean
     */
    public function hasRetCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <retCode> value
     *
     * @return \utilpb\GoodCheck
     */
    public function clearRetCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <retCode> value
     *
     * @return int
     */
    public function getRetCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <retCode> value
     *
     * @param int $value
     * @return \utilpb\GoodCheck
     */
    public function setRetCode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\GoodCheck
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\GoodCheck
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <gold> has a value
     *
     * @return boolean
     */
    public function hasGold(){
      return $this->_has(3);
    }
    
    /**
     * Clear <gold> value
     *
     * @return \utilpb\GoodCheck
     */
    public function clearGold(){
      return $this->_clear(3);
    }
    
    /**
     * Get <gold> value
     *
     * @return int
     */
    public function getGold(){
      return $this->_get(3);
    }
    
    /**
     * Set <gold> value
     *
     * @param int $value
     * @return \utilpb\GoodCheck
     */
    public function setGold( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <jade> has a value
     *
     * @return boolean
     */
    public function hasJade(){
      return $this->_has(4);
    }
    
    /**
     * Clear <jade> value
     *
     * @return \utilpb\GoodCheck
     */
    public function clearJade(){
      return $this->_clear(4);
    }
    
    /**
     * Get <jade> value
     *
     * @return int
     */
    public function getJade(){
      return $this->_get(4);
    }
    
    /**
     * Set <jade> value
     *
     * @param int $value
     * @return \utilpb\GoodCheck
     */
    public function setJade( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <needMoneyType> has a value
     *
     * @return boolean
     */
    public function hasNeedMoneyType(){
      return $this->_has(5);
    }
    
    /**
     * Clear <needMoneyType> value
     *
     * @return \utilpb\GoodCheck
     */
    public function clearNeedMoneyType(){
      return $this->_clear(5);
    }
    
    /**
     * Get <needMoneyType> value
     *
     * @return int
     */
    public function getNeedMoneyType(){
      return $this->_get(5);
    }
    
    /**
     * Set <needMoneyType> value
     *
     * @param int $value
     * @return \utilpb\GoodCheck
     */
    public function setNeedMoneyType( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <needMoney> has a value
     *
     * @return boolean
     */
    public function hasNeedMoney(){
      return $this->_has(6);
    }
    
    /**
     * Clear <needMoney> value
     *
     * @return \utilpb\GoodCheck
     */
    public function clearNeedMoney(){
      return $this->_clear(6);
    }
    
    /**
     * Get <needMoney> value
     *
     * @return int
     */
    public function getNeedMoney(){
      return $this->_get(6);
    }
    
    /**
     * Set <needMoney> value
     *
     * @param int $value
     * @return \utilpb\GoodCheck
     */
    public function setNeedMoney( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <item> has a value
     *
     * @return boolean
     */
    public function hasItem(){
      return $this->_has(7);
    }
    
    /**
     * Clear <item> value
     *
     * @return \utilpb\GoodCheck
     */
    public function clearItem(){
      return $this->_clear(7);
    }
    
    /**
     * Get <item> value
     *
     * @return \utilpb\UtilItem
     */
    public function getItem(){
      return $this->_get(7);
    }
    
    /**
     * Set <item> value
     *
     * @param \utilpb\UtilItem $value
     * @return \utilpb\GoodCheck
     */
    public function setItem(\utilpb\UtilItem $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(8);
    }
    
    /**
     * Clear <time> value
     *
     * @return \utilpb\GoodCheck
     */
    public function clearTime(){
      return $this->_clear(8);
    }
    
    /**
     * Get <time> value
     *
     * @return int
     */
    public function getTime(){
      return $this->_get(8);
    }
    
    /**
     * Set <time> value
     *
     * @param int $value
     * @return \utilpb\GoodCheck
     */
    public function setTime( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <bdcFlag> has a value
     *
     * @return boolean
     */
    public function hasBdcFlag(){
      return $this->_has(9);
    }
    
    /**
     * Clear <bdcFlag> value
     *
     * @return \utilpb\GoodCheck
     */
    public function clearBdcFlag(){
      return $this->_clear(9);
    }
    
    /**
     * Get <bdcFlag> value
     *
     * @return int
     */
    public function getBdcFlag(){
      return $this->_get(9);
    }
    
    /**
     * Set <bdcFlag> value
     *
     * @param int $value
     * @return \utilpb\GoodCheck
     */
    public function setBdcFlag( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace utilpb {

  class GoodRecord extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $type = null;
    
    /**  @var float */
    public $time = null;
    
    /**  @var int */
    public $moneyType = null;
    
    /**  @var int */
    public $money = null;
    
    /**  @var int */
    public $number = null;
    
    /**  @var \utilpb\UtilItem */
    public $item = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.GoodRecord');

      // OPTIONAL MESSAGE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE time = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 moneyType = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "moneyType";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 money = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "money";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 number = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE item = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "item";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\UtilItem';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\GoodRecord
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\GoodRecord
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\GoodRecord
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\GoodRecord
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\GoodRecord
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\GoodRecord
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(4);
    }
    
    /**
     * Clear <time> value
     *
     * @return \utilpb\GoodRecord
     */
    public function clearTime(){
      return $this->_clear(4);
    }
    
    /**
     * Get <time> value
     *
     * @return float
     */
    public function getTime(){
      return $this->_get(4);
    }
    
    /**
     * Set <time> value
     *
     * @param float $value
     * @return \utilpb\GoodRecord
     */
    public function setTime( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <moneyType> has a value
     *
     * @return boolean
     */
    public function hasMoneyType(){
      return $this->_has(5);
    }
    
    /**
     * Clear <moneyType> value
     *
     * @return \utilpb\GoodRecord
     */
    public function clearMoneyType(){
      return $this->_clear(5);
    }
    
    /**
     * Get <moneyType> value
     *
     * @return int
     */
    public function getMoneyType(){
      return $this->_get(5);
    }
    
    /**
     * Set <moneyType> value
     *
     * @param int $value
     * @return \utilpb\GoodRecord
     */
    public function setMoneyType( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <money> has a value
     *
     * @return boolean
     */
    public function hasMoney(){
      return $this->_has(6);
    }
    
    /**
     * Clear <money> value
     *
     * @return \utilpb\GoodRecord
     */
    public function clearMoney(){
      return $this->_clear(6);
    }
    
    /**
     * Get <money> value
     *
     * @return int
     */
    public function getMoney(){
      return $this->_get(6);
    }
    
    /**
     * Set <money> value
     *
     * @param int $value
     * @return \utilpb\GoodRecord
     */
    public function setMoney( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <number> has a value
     *
     * @return boolean
     */
    public function hasNumber(){
      return $this->_has(7);
    }
    
    /**
     * Clear <number> value
     *
     * @return \utilpb\GoodRecord
     */
    public function clearNumber(){
      return $this->_clear(7);
    }
    
    /**
     * Get <number> value
     *
     * @return int
     */
    public function getNumber(){
      return $this->_get(7);
    }
    
    /**
     * Set <number> value
     *
     * @param int $value
     * @return \utilpb\GoodRecord
     */
    public function setNumber( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <item> has a value
     *
     * @return boolean
     */
    public function hasItem(){
      return $this->_has(8);
    }
    
    /**
     * Clear <item> value
     *
     * @return \utilpb\GoodRecord
     */
    public function clearItem(){
      return $this->_clear(8);
    }
    
    /**
     * Get <item> value
     *
     * @return \utilpb\UtilItem
     */
    public function getItem(){
      return $this->_get(8);
    }
    
    /**
     * Set <item> value
     *
     * @param \utilpb\UtilItem $value
     * @return \utilpb\GoodRecord
     */
    public function setItem(\utilpb\UtilItem $value){
      return $this->_set(8, $value);
    }
  }
}

namespace utilpb {

  class GoodDownResult extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $retCode = null;
    
    /**  @var string */
    public $uuid = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.GoodDownResult');

      // REQUIRED INT32 retCode = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "retCode";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING uuid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "uuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <retCode> has a value
     *
     * @return boolean
     */
    public function hasRetCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <retCode> value
     *
     * @return \utilpb\GoodDownResult
     */
    public function clearRetCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <retCode> value
     *
     * @return int
     */
    public function getRetCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <retCode> value
     *
     * @param int $value
     * @return \utilpb\GoodDownResult
     */
    public function setRetCode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <uuid> has a value
     *
     * @return boolean
     */
    public function hasUuid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <uuid> value
     *
     * @return \utilpb\GoodDownResult
     */
    public function clearUuid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <uuid> value
     *
     * @return string
     */
    public function getUuid(){
      return $this->_get(2);
    }
    
    /**
     * Set <uuid> value
     *
     * @param string $value
     * @return \utilpb\GoodDownResult
     */
    public function setUuid( $value){
      return $this->_set(2, $value);
    }
  }
}

