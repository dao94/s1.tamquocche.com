<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/item.proto
//   Date: 2014-12-19 08:23:10

namespace utilpb {

  class UtilItem extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $itemId = null;
    
    /**  @var int */
    public $number = null;
    
    /**  @var int */
    public $bind = 0;
    
    /**  @var string */
    public $data = null;
    
    /**  @var float */
    public $startTime = null;
    
    /**  @var float */
    public $endTime = null;
    
    /**  @var string */
    public $uuid = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.UtilItem');

      // REQUIRED DOUBLE itemId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "itemId";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 number = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 bind = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "bind";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING data = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE startTime = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "startTime";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE endTime = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "endTime";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING uuid = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "uuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <itemId> has a value
     *
     * @return boolean
     */
    public function hasItemId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <itemId> value
     *
     * @return \utilpb\UtilItem
     */
    public function clearItemId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <itemId> value
     *
     * @return float
     */
    public function getItemId(){
      return $this->_get(1);
    }
    
    /**
     * Set <itemId> value
     *
     * @param float $value
     * @return \utilpb\UtilItem
     */
    public function setItemId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <number> has a value
     *
     * @return boolean
     */
    public function hasNumber(){
      return $this->_has(2);
    }
    
    /**
     * Clear <number> value
     *
     * @return \utilpb\UtilItem
     */
    public function clearNumber(){
      return $this->_clear(2);
    }
    
    /**
     * Get <number> value
     *
     * @return int
     */
    public function getNumber(){
      return $this->_get(2);
    }
    
    /**
     * Set <number> value
     *
     * @param int $value
     * @return \utilpb\UtilItem
     */
    public function setNumber( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <bind> has a value
     *
     * @return boolean
     */
    public function hasBind(){
      return $this->_has(3);
    }
    
    /**
     * Clear <bind> value
     *
     * @return \utilpb\UtilItem
     */
    public function clearBind(){
      return $this->_clear(3);
    }
    
    /**
     * Get <bind> value
     *
     * @return int
     */
    public function getBind(){
      return $this->_get(3);
    }
    
    /**
     * Set <bind> value
     *
     * @param int $value
     * @return \utilpb\UtilItem
     */
    public function setBind( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(4);
    }
    
    /**
     * Clear <data> value
     *
     * @return \utilpb\UtilItem
     */
    public function clearData(){
      return $this->_clear(4);
    }
    
    /**
     * Get <data> value
     *
     * @return string
     */
    public function getData(){
      return $this->_get(4);
    }
    
    /**
     * Set <data> value
     *
     * @param string $value
     * @return \utilpb\UtilItem
     */
    public function setData( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <startTime> has a value
     *
     * @return boolean
     */
    public function hasStartTime(){
      return $this->_has(5);
    }
    
    /**
     * Clear <startTime> value
     *
     * @return \utilpb\UtilItem
     */
    public function clearStartTime(){
      return $this->_clear(5);
    }
    
    /**
     * Get <startTime> value
     *
     * @return float
     */
    public function getStartTime(){
      return $this->_get(5);
    }
    
    /**
     * Set <startTime> value
     *
     * @param float $value
     * @return \utilpb\UtilItem
     */
    public function setStartTime( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <endTime> has a value
     *
     * @return boolean
     */
    public function hasEndTime(){
      return $this->_has(6);
    }
    
    /**
     * Clear <endTime> value
     *
     * @return \utilpb\UtilItem
     */
    public function clearEndTime(){
      return $this->_clear(6);
    }
    
    /**
     * Get <endTime> value
     *
     * @return float
     */
    public function getEndTime(){
      return $this->_get(6);
    }
    
    /**
     * Set <endTime> value
     *
     * @param float $value
     * @return \utilpb\UtilItem
     */
    public function setEndTime( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <uuid> has a value
     *
     * @return boolean
     */
    public function hasUuid(){
      return $this->_has(7);
    }
    
    /**
     * Clear <uuid> value
     *
     * @return \utilpb\UtilItem
     */
    public function clearUuid(){
      return $this->_clear(7);
    }
    
    /**
     * Get <uuid> value
     *
     * @return string
     */
    public function getUuid(){
      return $this->_get(7);
    }
    
    /**
     * Set <uuid> value
     *
     * @param string $value
     * @return \utilpb\UtilItem
     */
    public function setUuid( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace utilpb {

  class UtilMoney extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $gold = null;
    
    /**  @var int */
    public $giftGold = null;
    
    /**  @var int */
    public $jade = null;
    
    /**  @var int */
    public $giftJade = null;
    
    /**  @var int */
    public $tradeGold = null;
    
    /**  @var int */
    public $tradeJade = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.UtilMoney');

      // OPTIONAL INT32 gold = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "gold";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 giftGold = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "giftGold";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 jade = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "jade";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 giftJade = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "giftJade";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 tradeGold = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "tradeGold";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 tradeJade = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "tradeJade";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <gold> has a value
     *
     * @return boolean
     */
    public function hasGold(){
      return $this->_has(1);
    }
    
    /**
     * Clear <gold> value
     *
     * @return \utilpb\UtilMoney
     */
    public function clearGold(){
      return $this->_clear(1);
    }
    
    /**
     * Get <gold> value
     *
     * @return int
     */
    public function getGold(){
      return $this->_get(1);
    }
    
    /**
     * Set <gold> value
     *
     * @param int $value
     * @return \utilpb\UtilMoney
     */
    public function setGold( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <giftGold> has a value
     *
     * @return boolean
     */
    public function hasGiftGold(){
      return $this->_has(2);
    }
    
    /**
     * Clear <giftGold> value
     *
     * @return \utilpb\UtilMoney
     */
    public function clearGiftGold(){
      return $this->_clear(2);
    }
    
    /**
     * Get <giftGold> value
     *
     * @return int
     */
    public function getGiftGold(){
      return $this->_get(2);
    }
    
    /**
     * Set <giftGold> value
     *
     * @param int $value
     * @return \utilpb\UtilMoney
     */
    public function setGiftGold( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <jade> has a value
     *
     * @return boolean
     */
    public function hasJade(){
      return $this->_has(3);
    }
    
    /**
     * Clear <jade> value
     *
     * @return \utilpb\UtilMoney
     */
    public function clearJade(){
      return $this->_clear(3);
    }
    
    /**
     * Get <jade> value
     *
     * @return int
     */
    public function getJade(){
      return $this->_get(3);
    }
    
    /**
     * Set <jade> value
     *
     * @param int $value
     * @return \utilpb\UtilMoney
     */
    public function setJade( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <giftJade> has a value
     *
     * @return boolean
     */
    public function hasGiftJade(){
      return $this->_has(4);
    }
    
    /**
     * Clear <giftJade> value
     *
     * @return \utilpb\UtilMoney
     */
    public function clearGiftJade(){
      return $this->_clear(4);
    }
    
    /**
     * Get <giftJade> value
     *
     * @return int
     */
    public function getGiftJade(){
      return $this->_get(4);
    }
    
    /**
     * Set <giftJade> value
     *
     * @param int $value
     * @return \utilpb\UtilMoney
     */
    public function setGiftJade( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <tradeGold> has a value
     *
     * @return boolean
     */
    public function hasTradeGold(){
      return $this->_has(5);
    }
    
    /**
     * Clear <tradeGold> value
     *
     * @return \utilpb\UtilMoney
     */
    public function clearTradeGold(){
      return $this->_clear(5);
    }
    
    /**
     * Get <tradeGold> value
     *
     * @return int
     */
    public function getTradeGold(){
      return $this->_get(5);
    }
    
    /**
     * Set <tradeGold> value
     *
     * @param int $value
     * @return \utilpb\UtilMoney
     */
    public function setTradeGold( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <tradeJade> has a value
     *
     * @return boolean
     */
    public function hasTradeJade(){
      return $this->_has(6);
    }
    
    /**
     * Clear <tradeJade> value
     *
     * @return \utilpb\UtilMoney
     */
    public function clearTradeJade(){
      return $this->_clear(6);
    }
    
    /**
     * Get <tradeJade> value
     *
     * @return int
     */
    public function getTradeJade(){
      return $this->_get(6);
    }
    
    /**
     * Set <tradeJade> value
     *
     * @param int $value
     * @return \utilpb\UtilMoney
     */
    public function setTradeJade( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace utilpb {

  class SimpleItem extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $itemId = null;
    
    /**  @var int */
    public $number = null;
    
    /**  @var int */
    public $bind = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SimpleItem');

      // REQUIRED DOUBLE itemId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "itemId";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 number = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 bind = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "bind";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <itemId> has a value
     *
     * @return boolean
     */
    public function hasItemId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <itemId> value
     *
     * @return \utilpb\SimpleItem
     */
    public function clearItemId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <itemId> value
     *
     * @return float
     */
    public function getItemId(){
      return $this->_get(1);
    }
    
    /**
     * Set <itemId> value
     *
     * @param float $value
     * @return \utilpb\SimpleItem
     */
    public function setItemId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <number> has a value
     *
     * @return boolean
     */
    public function hasNumber(){
      return $this->_has(2);
    }
    
    /**
     * Clear <number> value
     *
     * @return \utilpb\SimpleItem
     */
    public function clearNumber(){
      return $this->_clear(2);
    }
    
    /**
     * Get <number> value
     *
     * @return int
     */
    public function getNumber(){
      return $this->_get(2);
    }
    
    /**
     * Set <number> value
     *
     * @param int $value
     * @return \utilpb\SimpleItem
     */
    public function setNumber( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <bind> has a value
     *
     * @return boolean
     */
    public function hasBind(){
      return $this->_has(3);
    }
    
    /**
     * Clear <bind> value
     *
     * @return \utilpb\SimpleItem
     */
    public function clearBind(){
      return $this->_clear(3);
    }
    
    /**
     * Get <bind> value
     *
     * @return int
     */
    public function getBind(){
      return $this->_get(3);
    }
    
    /**
     * Set <bind> value
     *
     * @param int $value
     * @return \utilpb\SimpleItem
     */
    public function setBind( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class SimpleMoney extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $moneyType = null;
    
    /**  @var float */
    public $money = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SimpleMoney');

      // REQUIRED INT32 moneyType = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "moneyType";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE money = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "money";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <moneyType> has a value
     *
     * @return boolean
     */
    public function hasMoneyType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <moneyType> value
     *
     * @return \utilpb\SimpleMoney
     */
    public function clearMoneyType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <moneyType> value
     *
     * @return int
     */
    public function getMoneyType(){
      return $this->_get(1);
    }
    
    /**
     * Set <moneyType> value
     *
     * @param int $value
     * @return \utilpb\SimpleMoney
     */
    public function setMoneyType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <money> has a value
     *
     * @return boolean
     */
    public function hasMoney(){
      return $this->_has(2);
    }
    
    /**
     * Clear <money> value
     *
     * @return \utilpb\SimpleMoney
     */
    public function clearMoney(){
      return $this->_clear(2);
    }
    
    /**
     * Get <money> value
     *
     * @return float
     */
    public function getMoney(){
      return $this->_get(2);
    }
    
    /**
     * Set <money> value
     *
     * @param float $value
     * @return \utilpb\SimpleMoney
     */
    public function setMoney( $value){
      return $this->_set(2, $value);
    }
  }
}

