<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/bgutil.proto
//   Date: 2014-12-19 08:23:05

namespace bgutilpb {

  class ServerInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $serverId = null;
    
    /**  @var int */
    public $serverIdx = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bgutilpb.ServerInfo');

      // REQUIRED INT32 serverId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "serverId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 serverIdx = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "serverIdx";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <serverId> has a value
     *
     * @return boolean
     */
    public function hasServerId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <serverId> value
     *
     * @return \bgutilpb\ServerInfo
     */
    public function clearServerId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <serverId> value
     *
     * @return int
     */
    public function getServerId(){
      return $this->_get(1);
    }
    
    /**
     * Set <serverId> value
     *
     * @param int $value
     * @return \bgutilpb\ServerInfo
     */
    public function setServerId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <serverIdx> has a value
     *
     * @return boolean
     */
    public function hasServerIdx(){
      return $this->_has(2);
    }
    
    /**
     * Clear <serverIdx> value
     *
     * @return \bgutilpb\ServerInfo
     */
    public function clearServerIdx(){
      return $this->_clear(2);
    }
    
    /**
     * Get <serverIdx> value
     *
     * @return int
     */
    public function getServerIdx(){
      return $this->_get(2);
    }
    
    /**
     * Set <serverIdx> value
     *
     * @param int $value
     * @return \bgutilpb\ServerInfo
     */
    public function setServerIdx( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace bgutilpb {

  class HotUpate extends \DrSlump\Protobuf\Message {

    /**  @var \bgutilpb\ServerInfo */
    public $svInfo = null;
    
    /**  @var string[]  */
    public $pathList = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bgutilpb.HotUpate');

      // REQUIRED MESSAGE svInfo = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "svInfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\bgutilpb\ServerInfo';
      $descriptor->addField($f);

      // REPEATED STRING pathList = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "pathList";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <svInfo> has a value
     *
     * @return boolean
     */
    public function hasSvInfo(){
      return $this->_has(1);
    }
    
    /**
     * Clear <svInfo> value
     *
     * @return \bgutilpb\HotUpate
     */
    public function clearSvInfo(){
      return $this->_clear(1);
    }
    
    /**
     * Get <svInfo> value
     *
     * @return \bgutilpb\ServerInfo
     */
    public function getSvInfo(){
      return $this->_get(1);
    }
    
    /**
     * Set <svInfo> value
     *
     * @param \bgutilpb\ServerInfo $value
     * @return \bgutilpb\HotUpate
     */
    public function setSvInfo(\bgutilpb\ServerInfo $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <pathList> has a value
     *
     * @return boolean
     */
    public function hasPathList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <pathList> value
     *
     * @return \bgutilpb\HotUpate
     */
    public function clearPathList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <pathList> value
     *
     * @param int $idx
     * @return string
     */
    public function getPathList($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <pathList> value
     *
     * @param string $value
     * @return \bgutilpb\HotUpate
     */
    public function setPathList( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <pathList>
     *
     * @return string[]
     */
    public function getPathListList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <pathList>
     *
     * @param string $value
     * @return \bgutilpb\HotUpate
     */
    public function addPathList( $value){
     return $this->_add(2, $value);
    }
  }
}

namespace bgutilpb {

  class ControlTime extends \DrSlump\Protobuf\Message {

    /**  @var float[]  */
    public $charId = array();
    
    /**  @var int */
    public $time = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bgutilpb.ControlTime');

      // REPEATED DOUBLE charId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "charId";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REQUIRED INT32 time = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <charId> has a value
     *
     * @return boolean
     */
    public function hasCharId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <charId> value
     *
     * @return \bgutilpb\ControlTime
     */
    public function clearCharId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <charId> value
     *
     * @param int $idx
     * @return float
     */
    public function getCharId($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <charId> value
     *
     * @param float $value
     * @return \bgutilpb\ControlTime
     */
    public function setCharId( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <charId>
     *
     * @return float[]
     */
    public function getCharIdList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <charId>
     *
     * @param float $value
     * @return \bgutilpb\ControlTime
     */
    public function addCharId( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(2);
    }
    
    /**
     * Clear <time> value
     *
     * @return \bgutilpb\ControlTime
     */
    public function clearTime(){
      return $this->_clear(2);
    }
    
    /**
     * Get <time> value
     *
     * @return int
     */
    public function getTime(){
      return $this->_get(2);
    }
    
    /**
     * Set <time> value
     *
     * @param int $value
     * @return \bgutilpb\ControlTime
     */
    public function setTime( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace bgutilpb {

  class PayOrder extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $orderId = null;
    
    /**  @var float */
    public $charId = null;
    
    /**  @var int */
    public $state = null;
    
    /**  @var int */
    public $jade = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bgutilpb.PayOrder');

      // REQUIRED STRING orderId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "orderId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE charId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "charId";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 state = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 jade = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "jade";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <orderId> has a value
     *
     * @return boolean
     */
    public function hasOrderId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <orderId> value
     *
     * @return \bgutilpb\PayOrder
     */
    public function clearOrderId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <orderId> value
     *
     * @return string
     */
    public function getOrderId(){
      return $this->_get(1);
    }
    
    /**
     * Set <orderId> value
     *
     * @param string $value
     * @return \bgutilpb\PayOrder
     */
    public function setOrderId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <charId> has a value
     *
     * @return boolean
     */
    public function hasCharId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <charId> value
     *
     * @return \bgutilpb\PayOrder
     */
    public function clearCharId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <charId> value
     *
     * @return float
     */
    public function getCharId(){
      return $this->_get(2);
    }
    
    /**
     * Set <charId> value
     *
     * @param float $value
     * @return \bgutilpb\PayOrder
     */
    public function setCharId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(3);
    }
    
    /**
     * Clear <state> value
     *
     * @return \bgutilpb\PayOrder
     */
    public function clearState(){
      return $this->_clear(3);
    }
    
    /**
     * Get <state> value
     *
     * @return int
     */
    public function getState(){
      return $this->_get(3);
    }
    
    /**
     * Set <state> value
     *
     * @param int $value
     * @return \bgutilpb\PayOrder
     */
    public function setState( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <jade> has a value
     *
     * @return boolean
     */
    public function hasJade(){
      return $this->_has(4);
    }
    
    /**
     * Clear <jade> value
     *
     * @return \bgutilpb\PayOrder
     */
    public function clearJade(){
      return $this->_clear(4);
    }
    
    /**
     * Get <jade> value
     *
     * @return int
     */
    public function getJade(){
      return $this->_get(4);
    }
    
    /**
     * Set <jade> value
     *
     * @param int $value
     * @return \bgutilpb\PayOrder
     */
    public function setJade( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace bgutilpb {

  class BaiduVipInfo extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $charId = null;
    
    /**  @var \utilpb\IdInt[]  */
    public $vipInfo = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bgutilpb.BaiduVipInfo');

      // REQUIRED DOUBLE charId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "charId";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE vipInfo = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "vipInfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\IdInt';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <charId> has a value
     *
     * @return boolean
     */
    public function hasCharId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <charId> value
     *
     * @return \bgutilpb\BaiduVipInfo
     */
    public function clearCharId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <charId> value
     *
     * @return float
     */
    public function getCharId(){
      return $this->_get(1);
    }
    
    /**
     * Set <charId> value
     *
     * @param float $value
     * @return \bgutilpb\BaiduVipInfo
     */
    public function setCharId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <vipInfo> has a value
     *
     * @return boolean
     */
    public function hasVipInfo(){
      return $this->_has(2);
    }
    
    /**
     * Clear <vipInfo> value
     *
     * @return \bgutilpb\BaiduVipInfo
     */
    public function clearVipInfo(){
      return $this->_clear(2);
    }
    
    /**
     * Get <vipInfo> value
     *
     * @param int $idx
     * @return \utilpb\IdInt
     */
    public function getVipInfo($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <vipInfo> value
     *
     * @param \utilpb\IdInt $value
     * @return \bgutilpb\BaiduVipInfo
     */
    public function setVipInfo(\utilpb\IdInt $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <vipInfo>
     *
     * @return \utilpb\IdInt[]
     */
    public function getVipInfoList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <vipInfo>
     *
     * @param \utilpb\IdInt $value
     * @return \bgutilpb\BaiduVipInfo
     */
    public function addVipInfo(\utilpb\IdInt $value){
     return $this->_add(2, $value);
    }
  }
}

namespace bgutilpb {

  class BgPayOrder extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $charId = null;
    
    /**  @var int */
    public $jade = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bgutilpb.BgPayOrder');

      // REQUIRED DOUBLE charId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "charId";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 jade = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "jade";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <charId> has a value
     *
     * @return boolean
     */
    public function hasCharId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <charId> value
     *
     * @return \bgutilpb\BgPayOrder
     */
    public function clearCharId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <charId> value
     *
     * @return float
     */
    public function getCharId(){
      return $this->_get(1);
    }
    
    /**
     * Set <charId> value
     *
     * @param float $value
     * @return \bgutilpb\BgPayOrder
     */
    public function setCharId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <jade> has a value
     *
     * @return boolean
     */
    public function hasJade(){
      return $this->_has(2);
    }
    
    /**
     * Clear <jade> value
     *
     * @return \bgutilpb\BgPayOrder
     */
    public function clearJade(){
      return $this->_clear(2);
    }
    
    /**
     * Get <jade> value
     *
     * @return int
     */
    public function getJade(){
      return $this->_get(2);
    }
    
    /**
     * Set <jade> value
     *
     * @param int $value
     * @return \bgutilpb\BgPayOrder
     */
    public function setJade( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace bgutilpb {

  class ResPetSkill extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $skillId = null;
    
    /**  @var int[]  */
    public $level = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bgutilpb.ResPetSkill');

      // REQUIRED INT32 skillId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "skillId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED INT32 level = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <skillId> has a value
     *
     * @return boolean
     */
    public function hasSkillId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <skillId> value
     *
     * @return \bgutilpb\ResPetSkill
     */
    public function clearSkillId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <skillId> value
     *
     * @return int
     */
    public function getSkillId(){
      return $this->_get(1);
    }
    
    /**
     * Set <skillId> value
     *
     * @param int $value
     * @return \bgutilpb\ResPetSkill
     */
    public function setSkillId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(2);
    }
    
    /**
     * Clear <level> value
     *
     * @return \bgutilpb\ResPetSkill
     */
    public function clearLevel(){
      return $this->_clear(2);
    }
    
    /**
     * Get <level> value
     *
     * @param int $idx
     * @return int
     */
    public function getLevel($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \bgutilpb\ResPetSkill
     */
    public function setLevel( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <level>
     *
     * @return int[]
     */
    public function getLevelList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <level>
     *
     * @param int $value
     * @return \bgutilpb\ResPetSkill
     */
    public function addLevel( $value){
     return $this->_add(2, $value);
    }
  }
}

namespace bgutilpb {

  class ResPullList extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $hp = null;
    
    /**  @var int */
    public $attack = null;
    
    /**  @var int */
    public $defense = null;
    
    /**  @var int */
    public $hisHp = null;
    
    /**  @var int */
    public $hisAtack = null;
    
    /**  @var int */
    public $hisDenense = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bgutilpb.ResPullList');

      // REQUIRED INT32 hp = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "hp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 attack = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "attack";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 defense = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "defense";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 hisHp = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "hisHp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 hisAtack = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "hisAtack";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 hisDenense = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "hisDenense";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <hp> has a value
     *
     * @return boolean
     */
    public function hasHp(){
      return $this->_has(1);
    }
    
    /**
     * Clear <hp> value
     *
     * @return \bgutilpb\ResPullList
     */
    public function clearHp(){
      return $this->_clear(1);
    }
    
    /**
     * Get <hp> value
     *
     * @return int
     */
    public function getHp(){
      return $this->_get(1);
    }
    
    /**
     * Set <hp> value
     *
     * @param int $value
     * @return \bgutilpb\ResPullList
     */
    public function setHp( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <attack> has a value
     *
     * @return boolean
     */
    public function hasAttack(){
      return $this->_has(2);
    }
    
    /**
     * Clear <attack> value
     *
     * @return \bgutilpb\ResPullList
     */
    public function clearAttack(){
      return $this->_clear(2);
    }
    
    /**
     * Get <attack> value
     *
     * @return int
     */
    public function getAttack(){
      return $this->_get(2);
    }
    
    /**
     * Set <attack> value
     *
     * @param int $value
     * @return \bgutilpb\ResPullList
     */
    public function setAttack( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <defense> has a value
     *
     * @return boolean
     */
    public function hasDefense(){
      return $this->_has(3);
    }
    
    /**
     * Clear <defense> value
     *
     * @return \bgutilpb\ResPullList
     */
    public function clearDefense(){
      return $this->_clear(3);
    }
    
    /**
     * Get <defense> value
     *
     * @return int
     */
    public function getDefense(){
      return $this->_get(3);
    }
    
    /**
     * Set <defense> value
     *
     * @param int $value
     * @return \bgutilpb\ResPullList
     */
    public function setDefense( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <hisHp> has a value
     *
     * @return boolean
     */
    public function hasHisHp(){
      return $this->_has(4);
    }
    
    /**
     * Clear <hisHp> value
     *
     * @return \bgutilpb\ResPullList
     */
    public function clearHisHp(){
      return $this->_clear(4);
    }
    
    /**
     * Get <hisHp> value
     *
     * @return int
     */
    public function getHisHp(){
      return $this->_get(4);
    }
    
    /**
     * Set <hisHp> value
     *
     * @param int $value
     * @return \bgutilpb\ResPullList
     */
    public function setHisHp( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <hisAtack> has a value
     *
     * @return boolean
     */
    public function hasHisAtack(){
      return $this->_has(5);
    }
    
    /**
     * Clear <hisAtack> value
     *
     * @return \bgutilpb\ResPullList
     */
    public function clearHisAtack(){
      return $this->_clear(5);
    }
    
    /**
     * Get <hisAtack> value
     *
     * @return int
     */
    public function getHisAtack(){
      return $this->_get(5);
    }
    
    /**
     * Set <hisAtack> value
     *
     * @param int $value
     * @return \bgutilpb\ResPullList
     */
    public function setHisAtack( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <hisDenense> has a value
     *
     * @return boolean
     */
    public function hasHisDenense(){
      return $this->_has(6);
    }
    
    /**
     * Clear <hisDenense> value
     *
     * @return \bgutilpb\ResPullList
     */
    public function clearHisDenense(){
      return $this->_clear(6);
    }
    
    /**
     * Get <hisDenense> value
     *
     * @return int
     */
    public function getHisDenense(){
      return $this->_get(6);
    }
    
    /**
     * Set <hisDenense> value
     *
     * @param int $value
     * @return \bgutilpb\ResPullList
     */
    public function setHisDenense( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace bgutilpb {

  class ResRealm extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $realmLevel = null;
    
    /**  @var int */
    public $blessing = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bgutilpb.ResRealm');

      // REQUIRED INT32 realmLevel = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "realmLevel";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 blessing = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "blessing";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <realmLevel> has a value
     *
     * @return boolean
     */
    public function hasRealmLevel(){
      return $this->_has(1);
    }
    
    /**
     * Clear <realmLevel> value
     *
     * @return \bgutilpb\ResRealm
     */
    public function clearRealmLevel(){
      return $this->_clear(1);
    }
    
    /**
     * Get <realmLevel> value
     *
     * @return int
     */
    public function getRealmLevel(){
      return $this->_get(1);
    }
    
    /**
     * Set <realmLevel> value
     *
     * @param int $value
     * @return \bgutilpb\ResRealm
     */
    public function setRealmLevel( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <blessing> has a value
     *
     * @return boolean
     */
    public function hasBlessing(){
      return $this->_has(2);
    }
    
    /**
     * Clear <blessing> value
     *
     * @return \bgutilpb\ResRealm
     */
    public function clearBlessing(){
      return $this->_clear(2);
    }
    
    /**
     * Get <blessing> value
     *
     * @return int
     */
    public function getBlessing(){
      return $this->_get(2);
    }
    
    /**
     * Set <blessing> value
     *
     * @param int $value
     * @return \bgutilpb\ResRealm
     */
    public function setBlessing( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace bgutilpb {

  class ResPetData extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $occ = null;
    
    /**  @var int */
    public $protential = null;
    
    /**  @var \bgutilpb\ResPetSkill[]  */
    public $skillList = array();
    
    /**  @var \bgutilpb\ResPullList */
    public $pullList = null;
    
    /**  @var \bgutilpb\ResRealm */
    public $realm = null;
    
    /**  @var int[]  */
    public $modelList = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bgutilpb.ResPetData');

      // REQUIRED INT32 occ = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "occ";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 protential = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "protential";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE skillList = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "skillList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\bgutilpb\ResPetSkill';
      $descriptor->addField($f);

      // REQUIRED MESSAGE pullList = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "pullList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\bgutilpb\ResPullList';
      $descriptor->addField($f);

      // REQUIRED MESSAGE realm = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "realm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\bgutilpb\ResRealm';
      $descriptor->addField($f);

      // REPEATED INT32 modelList = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "modelList";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <occ> has a value
     *
     * @return boolean
     */
    public function hasOcc(){
      return $this->_has(1);
    }
    
    /**
     * Clear <occ> value
     *
     * @return \bgutilpb\ResPetData
     */
    public function clearOcc(){
      return $this->_clear(1);
    }
    
    /**
     * Get <occ> value
     *
     * @return int
     */
    public function getOcc(){
      return $this->_get(1);
    }
    
    /**
     * Set <occ> value
     *
     * @param int $value
     * @return \bgutilpb\ResPetData
     */
    public function setOcc( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <protential> has a value
     *
     * @return boolean
     */
    public function hasProtential(){
      return $this->_has(2);
    }
    
    /**
     * Clear <protential> value
     *
     * @return \bgutilpb\ResPetData
     */
    public function clearProtential(){
      return $this->_clear(2);
    }
    
    /**
     * Get <protential> value
     *
     * @return int
     */
    public function getProtential(){
      return $this->_get(2);
    }
    
    /**
     * Set <protential> value
     *
     * @param int $value
     * @return \bgutilpb\ResPetData
     */
    public function setProtential( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <skillList> has a value
     *
     * @return boolean
     */
    public function hasSkillList(){
      return $this->_has(3);
    }
    
    /**
     * Clear <skillList> value
     *
     * @return \bgutilpb\ResPetData
     */
    public function clearSkillList(){
      return $this->_clear(3);
    }
    
    /**
     * Get <skillList> value
     *
     * @param int $idx
     * @return \bgutilpb\ResPetSkill
     */
    public function getSkillList($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <skillList> value
     *
     * @param \bgutilpb\ResPetSkill $value
     * @return \bgutilpb\ResPetData
     */
    public function setSkillList(\bgutilpb\ResPetSkill $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <skillList>
     *
     * @return \bgutilpb\ResPetSkill[]
     */
    public function getSkillListList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <skillList>
     *
     * @param \bgutilpb\ResPetSkill $value
     * @return \bgutilpb\ResPetData
     */
    public function addSkillList(\bgutilpb\ResPetSkill $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <pullList> has a value
     *
     * @return boolean
     */
    public function hasPullList(){
      return $this->_has(4);
    }
    
    /**
     * Clear <pullList> value
     *
     * @return \bgutilpb\ResPetData
     */
    public function clearPullList(){
      return $this->_clear(4);
    }
    
    /**
     * Get <pullList> value
     *
     * @return \bgutilpb\ResPullList
     */
    public function getPullList(){
      return $this->_get(4);
    }
    
    /**
     * Set <pullList> value
     *
     * @param \bgutilpb\ResPullList $value
     * @return \bgutilpb\ResPetData
     */
    public function setPullList(\bgutilpb\ResPullList $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <realm> has a value
     *
     * @return boolean
     */
    public function hasRealm(){
      return $this->_has(5);
    }
    
    /**
     * Clear <realm> value
     *
     * @return \bgutilpb\ResPetData
     */
    public function clearRealm(){
      return $this->_clear(5);
    }
    
    /**
     * Get <realm> value
     *
     * @return \bgutilpb\ResRealm
     */
    public function getRealm(){
      return $this->_get(5);
    }
    
    /**
     * Set <realm> value
     *
     * @param \bgutilpb\ResRealm $value
     * @return \bgutilpb\ResPetData
     */
    public function setRealm(\bgutilpb\ResRealm $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <modelList> has a value
     *
     * @return boolean
     */
    public function hasModelList(){
      return $this->_has(6);
    }
    
    /**
     * Clear <modelList> value
     *
     * @return \bgutilpb\ResPetData
     */
    public function clearModelList(){
      return $this->_clear(6);
    }
    
    /**
     * Get <modelList> value
     *
     * @param int $idx
     * @return int
     */
    public function getModelList($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <modelList> value
     *
     * @param int $value
     * @return \bgutilpb\ResPetData
     */
    public function setModelList( $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <modelList>
     *
     * @return int[]
     */
    public function getModelListList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <modelList>
     *
     * @param int $value
     * @return \bgutilpb\ResPetData
     */
    public function addModelList( $value){
     return $this->_add(6, $value);
    }
  }
}

namespace bgutilpb {

  class RepairPetInfo extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $remark = null;
    
    /**  @var int */
    public $level = null;
    
    /**  @var int */
    public $occ = null;
    
    /**  @var float */
    public $charId = null;
    
    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'bgutilpb.RepairPetInfo');

      // REQUIRED STRING remark = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "remark";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 level = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 occ = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "occ";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE charId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "charId";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING name = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <remark> has a value
     *
     * @return boolean
     */
    public function hasRemark(){
      return $this->_has(1);
    }
    
    /**
     * Clear <remark> value
     *
     * @return \bgutilpb\RepairPetInfo
     */
    public function clearRemark(){
      return $this->_clear(1);
    }
    
    /**
     * Get <remark> value
     *
     * @return string
     */
    public function getRemark(){
      return $this->_get(1);
    }
    
    /**
     * Set <remark> value
     *
     * @param string $value
     * @return \bgutilpb\RepairPetInfo
     */
    public function setRemark( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(2);
    }
    
    /**
     * Clear <level> value
     *
     * @return \bgutilpb\RepairPetInfo
     */
    public function clearLevel(){
      return $this->_clear(2);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(2);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \bgutilpb\RepairPetInfo
     */
    public function setLevel( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <occ> has a value
     *
     * @return boolean
     */
    public function hasOcc(){
      return $this->_has(3);
    }
    
    /**
     * Clear <occ> value
     *
     * @return \bgutilpb\RepairPetInfo
     */
    public function clearOcc(){
      return $this->_clear(3);
    }
    
    /**
     * Get <occ> value
     *
     * @return int
     */
    public function getOcc(){
      return $this->_get(3);
    }
    
    /**
     * Set <occ> value
     *
     * @param int $value
     * @return \bgutilpb\RepairPetInfo
     */
    public function setOcc( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <charId> has a value
     *
     * @return boolean
     */
    public function hasCharId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <charId> value
     *
     * @return \bgutilpb\RepairPetInfo
     */
    public function clearCharId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <charId> value
     *
     * @return float
     */
    public function getCharId(){
      return $this->_get(4);
    }
    
    /**
     * Set <charId> value
     *
     * @param float $value
     * @return \bgutilpb\RepairPetInfo
     */
    public function setCharId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(5);
    }
    
    /**
     * Clear <name> value
     *
     * @return \bgutilpb\RepairPetInfo
     */
    public function clearName(){
      return $this->_clear(5);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(5);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \bgutilpb\RepairPetInfo
     */
    public function setName( $value){
      return $this->_set(5, $value);
    }
  }
}

