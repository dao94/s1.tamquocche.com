<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/crossterritory.proto
//   Date: 2014-12-19 08:23:06

namespace utilpb {

  class PbCrossRankInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $rank = null;
    
    /**  @var int */
    public $honor = null;
    
    /**  @var string */
    public $userName = null;
    
    /**  @var string */
    public $platName = null;
    
    /**  @var int */
    public $killNum = null;
    
    /**  @var string */
    public $factionName = null;
    
    /**  @var int */
    public $serverId = null;
    
    /**  @var int */
    public $platId = null;
    
    /**  @var string */
    public $factionId = null;
    
    /**  @var \utilpb\ComposeID */
    public $objId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbCrossRankInfo');

      // REQUIRED INT32 rank = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "rank";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 honor = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "honor";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING userName = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "userName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING platName = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "platName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 killNum = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "killNum";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING factionName = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "factionName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 serverId = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "serverId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 platId = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "platId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING factionId = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "factionId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE objId = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "objId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <rank> has a value
     *
     * @return boolean
     */
    public function hasRank(){
      return $this->_has(1);
    }
    
    /**
     * Clear <rank> value
     *
     * @return \utilpb\PbCrossRankInfo
     */
    public function clearRank(){
      return $this->_clear(1);
    }
    
    /**
     * Get <rank> value
     *
     * @return int
     */
    public function getRank(){
      return $this->_get(1);
    }
    
    /**
     * Set <rank> value
     *
     * @param int $value
     * @return \utilpb\PbCrossRankInfo
     */
    public function setRank( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <honor> has a value
     *
     * @return boolean
     */
    public function hasHonor(){
      return $this->_has(2);
    }
    
    /**
     * Clear <honor> value
     *
     * @return \utilpb\PbCrossRankInfo
     */
    public function clearHonor(){
      return $this->_clear(2);
    }
    
    /**
     * Get <honor> value
     *
     * @return int
     */
    public function getHonor(){
      return $this->_get(2);
    }
    
    /**
     * Set <honor> value
     *
     * @param int $value
     * @return \utilpb\PbCrossRankInfo
     */
    public function setHonor( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <userName> has a value
     *
     * @return boolean
     */
    public function hasUserName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <userName> value
     *
     * @return \utilpb\PbCrossRankInfo
     */
    public function clearUserName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <userName> value
     *
     * @return string
     */
    public function getUserName(){
      return $this->_get(3);
    }
    
    /**
     * Set <userName> value
     *
     * @param string $value
     * @return \utilpb\PbCrossRankInfo
     */
    public function setUserName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <platName> has a value
     *
     * @return boolean
     */
    public function hasPlatName(){
      return $this->_has(4);
    }
    
    /**
     * Clear <platName> value
     *
     * @return \utilpb\PbCrossRankInfo
     */
    public function clearPlatName(){
      return $this->_clear(4);
    }
    
    /**
     * Get <platName> value
     *
     * @return string
     */
    public function getPlatName(){
      return $this->_get(4);
    }
    
    /**
     * Set <platName> value
     *
     * @param string $value
     * @return \utilpb\PbCrossRankInfo
     */
    public function setPlatName( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <killNum> has a value
     *
     * @return boolean
     */
    public function hasKillNum(){
      return $this->_has(5);
    }
    
    /**
     * Clear <killNum> value
     *
     * @return \utilpb\PbCrossRankInfo
     */
    public function clearKillNum(){
      return $this->_clear(5);
    }
    
    /**
     * Get <killNum> value
     *
     * @return int
     */
    public function getKillNum(){
      return $this->_get(5);
    }
    
    /**
     * Set <killNum> value
     *
     * @param int $value
     * @return \utilpb\PbCrossRankInfo
     */
    public function setKillNum( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <factionName> has a value
     *
     * @return boolean
     */
    public function hasFactionName(){
      return $this->_has(6);
    }
    
    /**
     * Clear <factionName> value
     *
     * @return \utilpb\PbCrossRankInfo
     */
    public function clearFactionName(){
      return $this->_clear(6);
    }
    
    /**
     * Get <factionName> value
     *
     * @return string
     */
    public function getFactionName(){
      return $this->_get(6);
    }
    
    /**
     * Set <factionName> value
     *
     * @param string $value
     * @return \utilpb\PbCrossRankInfo
     */
    public function setFactionName( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <serverId> has a value
     *
     * @return boolean
     */
    public function hasServerId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <serverId> value
     *
     * @return \utilpb\PbCrossRankInfo
     */
    public function clearServerId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <serverId> value
     *
     * @return int
     */
    public function getServerId(){
      return $this->_get(7);
    }
    
    /**
     * Set <serverId> value
     *
     * @param int $value
     * @return \utilpb\PbCrossRankInfo
     */
    public function setServerId( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <platId> has a value
     *
     * @return boolean
     */
    public function hasPlatId(){
      return $this->_has(8);
    }
    
    /**
     * Clear <platId> value
     *
     * @return \utilpb\PbCrossRankInfo
     */
    public function clearPlatId(){
      return $this->_clear(8);
    }
    
    /**
     * Get <platId> value
     *
     * @return int
     */
    public function getPlatId(){
      return $this->_get(8);
    }
    
    /**
     * Set <platId> value
     *
     * @param int $value
     * @return \utilpb\PbCrossRankInfo
     */
    public function setPlatId( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <factionId> has a value
     *
     * @return boolean
     */
    public function hasFactionId(){
      return $this->_has(9);
    }
    
    /**
     * Clear <factionId> value
     *
     * @return \utilpb\PbCrossRankInfo
     */
    public function clearFactionId(){
      return $this->_clear(9);
    }
    
    /**
     * Get <factionId> value
     *
     * @return string
     */
    public function getFactionId(){
      return $this->_get(9);
    }
    
    /**
     * Set <factionId> value
     *
     * @param string $value
     * @return \utilpb\PbCrossRankInfo
     */
    public function setFactionId( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <objId> has a value
     *
     * @return boolean
     */
    public function hasObjId(){
      return $this->_has(10);
    }
    
    /**
     * Clear <objId> value
     *
     * @return \utilpb\PbCrossRankInfo
     */
    public function clearObjId(){
      return $this->_clear(10);
    }
    
    /**
     * Get <objId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getObjId(){
      return $this->_get(10);
    }
    
    /**
     * Set <objId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PbCrossRankInfo
     */
    public function setObjId(\utilpb\ComposeID $value){
      return $this->_set(10, $value);
    }
  }
}

namespace utilpb {

  class PbCrossTerritory extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $entryId = null;
    
    /**  @var string */
    public $serverName = null;
    
    /**  @var int */
    public $serverId = null;
    
    /**  @var string */
    public $platform = null;
    
    /**  @var int */
    public $platId = null;
    
    /**  @var float */
    public $lastOccupyTm = null;
    
    /**  @var int */
    public $flag = null;
    
    /**  @var int */
    public $state = null;
    
    /**  @var string */
    public $occName = null;
    
    /**  @var int */
    public $lastInspireCnt = null;
    
    /**  @var \utilpb\ComposeID */
    public $ownerId = null;
    
    /**  @var string */
    public $topPresidentName = null;
    
    /**  @var \utilpb\PbCrossRankInfo[]  */
    public $topFaction = array();
    
    /**  @var \utilpb\PbCrossRankInfo[]  */
    public $rankFaction = array();
    
    /**  @var \utilpb\PbCrossRankInfo[]  */
    public $rankPerson = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbCrossTerritory');

      // REQUIRED INT32 entryId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entryId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING serverName = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "serverName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 serverId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "serverId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING platform = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "platform";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 platId = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "platId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE lastOccupyTm = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "lastOccupyTm";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 flag = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 state = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING occName = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "occName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 lastInspireCnt = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "lastInspireCnt";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE ownerId = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "ownerId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL STRING topPresidentName = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "topPresidentName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE topFaction = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "topFaction";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\PbCrossRankInfo';
      $descriptor->addField($f);

      // REPEATED MESSAGE rankFaction = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "rankFaction";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\PbCrossRankInfo';
      $descriptor->addField($f);

      // REPEATED MESSAGE rankPerson = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "rankPerson";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\PbCrossRankInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entryId> has a value
     *
     * @return boolean
     */
    public function hasEntryId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entryId> value
     *
     * @return \utilpb\PbCrossTerritory
     */
    public function clearEntryId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entryId> value
     *
     * @return int
     */
    public function getEntryId(){
      return $this->_get(1);
    }
    
    /**
     * Set <entryId> value
     *
     * @param int $value
     * @return \utilpb\PbCrossTerritory
     */
    public function setEntryId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <serverName> has a value
     *
     * @return boolean
     */
    public function hasServerName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <serverName> value
     *
     * @return \utilpb\PbCrossTerritory
     */
    public function clearServerName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <serverName> value
     *
     * @return string
     */
    public function getServerName(){
      return $this->_get(2);
    }
    
    /**
     * Set <serverName> value
     *
     * @param string $value
     * @return \utilpb\PbCrossTerritory
     */
    public function setServerName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <serverId> has a value
     *
     * @return boolean
     */
    public function hasServerId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <serverId> value
     *
     * @return \utilpb\PbCrossTerritory
     */
    public function clearServerId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <serverId> value
     *
     * @return int
     */
    public function getServerId(){
      return $this->_get(3);
    }
    
    /**
     * Set <serverId> value
     *
     * @param int $value
     * @return \utilpb\PbCrossTerritory
     */
    public function setServerId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <platform> has a value
     *
     * @return boolean
     */
    public function hasPlatform(){
      return $this->_has(4);
    }
    
    /**
     * Clear <platform> value
     *
     * @return \utilpb\PbCrossTerritory
     */
    public function clearPlatform(){
      return $this->_clear(4);
    }
    
    /**
     * Get <platform> value
     *
     * @return string
     */
    public function getPlatform(){
      return $this->_get(4);
    }
    
    /**
     * Set <platform> value
     *
     * @param string $value
     * @return \utilpb\PbCrossTerritory
     */
    public function setPlatform( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <platId> has a value
     *
     * @return boolean
     */
    public function hasPlatId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <platId> value
     *
     * @return \utilpb\PbCrossTerritory
     */
    public function clearPlatId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <platId> value
     *
     * @return int
     */
    public function getPlatId(){
      return $this->_get(5);
    }
    
    /**
     * Set <platId> value
     *
     * @param int $value
     * @return \utilpb\PbCrossTerritory
     */
    public function setPlatId( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <lastOccupyTm> has a value
     *
     * @return boolean
     */
    public function hasLastOccupyTm(){
      return $this->_has(6);
    }
    
    /**
     * Clear <lastOccupyTm> value
     *
     * @return \utilpb\PbCrossTerritory
     */
    public function clearLastOccupyTm(){
      return $this->_clear(6);
    }
    
    /**
     * Get <lastOccupyTm> value
     *
     * @return float
     */
    public function getLastOccupyTm(){
      return $this->_get(6);
    }
    
    /**
     * Set <lastOccupyTm> value
     *
     * @param float $value
     * @return \utilpb\PbCrossTerritory
     */
    public function setLastOccupyTm( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(7);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\PbCrossTerritory
     */
    public function clearFlag(){
      return $this->_clear(7);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(7);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\PbCrossTerritory
     */
    public function setFlag( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(8);
    }
    
    /**
     * Clear <state> value
     *
     * @return \utilpb\PbCrossTerritory
     */
    public function clearState(){
      return $this->_clear(8);
    }
    
    /**
     * Get <state> value
     *
     * @return int
     */
    public function getState(){
      return $this->_get(8);
    }
    
    /**
     * Set <state> value
     *
     * @param int $value
     * @return \utilpb\PbCrossTerritory
     */
    public function setState( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <occName> has a value
     *
     * @return boolean
     */
    public function hasOccName(){
      return $this->_has(9);
    }
    
    /**
     * Clear <occName> value
     *
     * @return \utilpb\PbCrossTerritory
     */
    public function clearOccName(){
      return $this->_clear(9);
    }
    
    /**
     * Get <occName> value
     *
     * @return string
     */
    public function getOccName(){
      return $this->_get(9);
    }
    
    /**
     * Set <occName> value
     *
     * @param string $value
     * @return \utilpb\PbCrossTerritory
     */
    public function setOccName( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <lastInspireCnt> has a value
     *
     * @return boolean
     */
    public function hasLastInspireCnt(){
      return $this->_has(10);
    }
    
    /**
     * Clear <lastInspireCnt> value
     *
     * @return \utilpb\PbCrossTerritory
     */
    public function clearLastInspireCnt(){
      return $this->_clear(10);
    }
    
    /**
     * Get <lastInspireCnt> value
     *
     * @return int
     */
    public function getLastInspireCnt(){
      return $this->_get(10);
    }
    
    /**
     * Set <lastInspireCnt> value
     *
     * @param int $value
     * @return \utilpb\PbCrossTerritory
     */
    public function setLastInspireCnt( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <ownerId> has a value
     *
     * @return boolean
     */
    public function hasOwnerId(){
      return $this->_has(11);
    }
    
    /**
     * Clear <ownerId> value
     *
     * @return \utilpb\PbCrossTerritory
     */
    public function clearOwnerId(){
      return $this->_clear(11);
    }
    
    /**
     * Get <ownerId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getOwnerId(){
      return $this->_get(11);
    }
    
    /**
     * Set <ownerId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PbCrossTerritory
     */
    public function setOwnerId(\utilpb\ComposeID $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <topPresidentName> has a value
     *
     * @return boolean
     */
    public function hasTopPresidentName(){
      return $this->_has(12);
    }
    
    /**
     * Clear <topPresidentName> value
     *
     * @return \utilpb\PbCrossTerritory
     */
    public function clearTopPresidentName(){
      return $this->_clear(12);
    }
    
    /**
     * Get <topPresidentName> value
     *
     * @return string
     */
    public function getTopPresidentName(){
      return $this->_get(12);
    }
    
    /**
     * Set <topPresidentName> value
     *
     * @param string $value
     * @return \utilpb\PbCrossTerritory
     */
    public function setTopPresidentName( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <topFaction> has a value
     *
     * @return boolean
     */
    public function hasTopFaction(){
      return $this->_has(13);
    }
    
    /**
     * Clear <topFaction> value
     *
     * @return \utilpb\PbCrossTerritory
     */
    public function clearTopFaction(){
      return $this->_clear(13);
    }
    
    /**
     * Get <topFaction> value
     *
     * @param int $idx
     * @return \utilpb\PbCrossRankInfo
     */
    public function getTopFaction($idx = NULL){
      return $this->_get(13, $idx);
    }
    
    /**
     * Set <topFaction> value
     *
     * @param \utilpb\PbCrossRankInfo $value
     * @return \utilpb\PbCrossTerritory
     */
    public function setTopFaction(\utilpb\PbCrossRankInfo $value, $idx = NULL){
      return $this->_set(13, $value, $idx);
    }
    
    /**
     * Get all elements of <topFaction>
     *
     * @return \utilpb\PbCrossRankInfo[]
     */
    public function getTopFactionList(){
     return $this->_get(13);
    }
    
    /**
     * Add a new element to <topFaction>
     *
     * @param \utilpb\PbCrossRankInfo $value
     * @return \utilpb\PbCrossTerritory
     */
    public function addTopFaction(\utilpb\PbCrossRankInfo $value){
     return $this->_add(13, $value);
    }
    
    /**
     * Check if <rankFaction> has a value
     *
     * @return boolean
     */
    public function hasRankFaction(){
      return $this->_has(14);
    }
    
    /**
     * Clear <rankFaction> value
     *
     * @return \utilpb\PbCrossTerritory
     */
    public function clearRankFaction(){
      return $this->_clear(14);
    }
    
    /**
     * Get <rankFaction> value
     *
     * @param int $idx
     * @return \utilpb\PbCrossRankInfo
     */
    public function getRankFaction($idx = NULL){
      return $this->_get(14, $idx);
    }
    
    /**
     * Set <rankFaction> value
     *
     * @param \utilpb\PbCrossRankInfo $value
     * @return \utilpb\PbCrossTerritory
     */
    public function setRankFaction(\utilpb\PbCrossRankInfo $value, $idx = NULL){
      return $this->_set(14, $value, $idx);
    }
    
    /**
     * Get all elements of <rankFaction>
     *
     * @return \utilpb\PbCrossRankInfo[]
     */
    public function getRankFactionList(){
     return $this->_get(14);
    }
    
    /**
     * Add a new element to <rankFaction>
     *
     * @param \utilpb\PbCrossRankInfo $value
     * @return \utilpb\PbCrossTerritory
     */
    public function addRankFaction(\utilpb\PbCrossRankInfo $value){
     return $this->_add(14, $value);
    }
    
    /**
     * Check if <rankPerson> has a value
     *
     * @return boolean
     */
    public function hasRankPerson(){
      return $this->_has(15);
    }
    
    /**
     * Clear <rankPerson> value
     *
     * @return \utilpb\PbCrossTerritory
     */
    public function clearRankPerson(){
      return $this->_clear(15);
    }
    
    /**
     * Get <rankPerson> value
     *
     * @param int $idx
     * @return \utilpb\PbCrossRankInfo
     */
    public function getRankPerson($idx = NULL){
      return $this->_get(15, $idx);
    }
    
    /**
     * Set <rankPerson> value
     *
     * @param \utilpb\PbCrossRankInfo $value
     * @return \utilpb\PbCrossTerritory
     */
    public function setRankPerson(\utilpb\PbCrossRankInfo $value, $idx = NULL){
      return $this->_set(15, $value, $idx);
    }
    
    /**
     * Get all elements of <rankPerson>
     *
     * @return \utilpb\PbCrossRankInfo[]
     */
    public function getRankPersonList(){
     return $this->_get(15);
    }
    
    /**
     * Add a new element to <rankPerson>
     *
     * @param \utilpb\PbCrossRankInfo $value
     * @return \utilpb\PbCrossTerritory
     */
    public function addRankPerson(\utilpb\PbCrossRankInfo $value){
     return $this->_add(15, $value);
    }
  }
}

namespace utilpb {

  class PbCrossTerritoryInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\PbCrossTerritory[]  */
    public $territory = array();
    
    /**  @var string */
    public $topFactionId = null;
    
    /**  @var \utilpb\ComposeID */
    public $topObjId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbCrossTerritoryInfo');

      // REPEATED MESSAGE territory = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "territory";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\PbCrossTerritory';
      $descriptor->addField($f);

      // OPTIONAL STRING topFactionId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "topFactionId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE topObjId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "topObjId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <territory> has a value
     *
     * @return boolean
     */
    public function hasTerritory(){
      return $this->_has(1);
    }
    
    /**
     * Clear <territory> value
     *
     * @return \utilpb\PbCrossTerritoryInfo
     */
    public function clearTerritory(){
      return $this->_clear(1);
    }
    
    /**
     * Get <territory> value
     *
     * @param int $idx
     * @return \utilpb\PbCrossTerritory
     */
    public function getTerritory($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <territory> value
     *
     * @param \utilpb\PbCrossTerritory $value
     * @return \utilpb\PbCrossTerritoryInfo
     */
    public function setTerritory(\utilpb\PbCrossTerritory $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <territory>
     *
     * @return \utilpb\PbCrossTerritory[]
     */
    public function getTerritoryList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <territory>
     *
     * @param \utilpb\PbCrossTerritory $value
     * @return \utilpb\PbCrossTerritoryInfo
     */
    public function addTerritory(\utilpb\PbCrossTerritory $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <topFactionId> has a value
     *
     * @return boolean
     */
    public function hasTopFactionId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <topFactionId> value
     *
     * @return \utilpb\PbCrossTerritoryInfo
     */
    public function clearTopFactionId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <topFactionId> value
     *
     * @return string
     */
    public function getTopFactionId(){
      return $this->_get(2);
    }
    
    /**
     * Set <topFactionId> value
     *
     * @param string $value
     * @return \utilpb\PbCrossTerritoryInfo
     */
    public function setTopFactionId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <topObjId> has a value
     *
     * @return boolean
     */
    public function hasTopObjId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <topObjId> value
     *
     * @return \utilpb\PbCrossTerritoryInfo
     */
    public function clearTopObjId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <topObjId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getTopObjId(){
      return $this->_get(3);
    }
    
    /**
     * Set <topObjId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PbCrossTerritoryInfo
     */
    public function setTopObjId(\utilpb\ComposeID $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class PbInspireInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $platId = null;
    
    /**  @var int */
    public $serverId = null;
    
    /**  @var int */
    public $totalNum = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbInspireInfo');

      // REQUIRED INT32 platId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "platId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 serverId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "serverId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 totalNum = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "totalNum";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <platId> has a value
     *
     * @return boolean
     */
    public function hasPlatId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <platId> value
     *
     * @return \utilpb\PbInspireInfo
     */
    public function clearPlatId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <platId> value
     *
     * @return int
     */
    public function getPlatId(){
      return $this->_get(1);
    }
    
    /**
     * Set <platId> value
     *
     * @param int $value
     * @return \utilpb\PbInspireInfo
     */
    public function setPlatId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <serverId> has a value
     *
     * @return boolean
     */
    public function hasServerId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <serverId> value
     *
     * @return \utilpb\PbInspireInfo
     */
    public function clearServerId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <serverId> value
     *
     * @return int
     */
    public function getServerId(){
      return $this->_get(2);
    }
    
    /**
     * Set <serverId> value
     *
     * @param int $value
     * @return \utilpb\PbInspireInfo
     */
    public function setServerId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <totalNum> has a value
     *
     * @return boolean
     */
    public function hasTotalNum(){
      return $this->_has(3);
    }
    
    /**
     * Clear <totalNum> value
     *
     * @return \utilpb\PbInspireInfo
     */
    public function clearTotalNum(){
      return $this->_clear(3);
    }
    
    /**
     * Get <totalNum> value
     *
     * @return int
     */
    public function getTotalNum(){
      return $this->_get(3);
    }
    
    /**
     * Set <totalNum> value
     *
     * @param int $value
     * @return \utilpb\PbInspireInfo
     */
    public function setTotalNum( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class PbCrossOccupyInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $entryId = null;
    
    /**  @var string */
    public $factionId = null;
    
    /**  @var \utilpb\ComposeID */
    public $ownerId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbCrossOccupyInfo');

      // OPTIONAL INT32 entryId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entryId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING factionId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "factionId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE ownerId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "ownerId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entryId> has a value
     *
     * @return boolean
     */
    public function hasEntryId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entryId> value
     *
     * @return \utilpb\PbCrossOccupyInfo
     */
    public function clearEntryId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entryId> value
     *
     * @return int
     */
    public function getEntryId(){
      return $this->_get(1);
    }
    
    /**
     * Set <entryId> value
     *
     * @param int $value
     * @return \utilpb\PbCrossOccupyInfo
     */
    public function setEntryId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <factionId> has a value
     *
     * @return boolean
     */
    public function hasFactionId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <factionId> value
     *
     * @return \utilpb\PbCrossOccupyInfo
     */
    public function clearFactionId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <factionId> value
     *
     * @return string
     */
    public function getFactionId(){
      return $this->_get(2);
    }
    
    /**
     * Set <factionId> value
     *
     * @param string $value
     * @return \utilpb\PbCrossOccupyInfo
     */
    public function setFactionId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <ownerId> has a value
     *
     * @return boolean
     */
    public function hasOwnerId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <ownerId> value
     *
     * @return \utilpb\PbCrossOccupyInfo
     */
    public function clearOwnerId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <ownerId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getOwnerId(){
      return $this->_get(3);
    }
    
    /**
     * Set <ownerId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PbCrossOccupyInfo
     */
    public function setOwnerId(\utilpb\ComposeID $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class PbCrossFinalRewardInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $rewardType = null;
    
    /**  @var \utilpb\PbCrossOccupyInfo[]  */
    public $occupyInfo = array();
    
    /**  @var string */
    public $topFactionId = null;
    
    /**  @var \utilpb\ComposeID */
    public $topObjId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbCrossFinalRewardInfo');

      // REQUIRED INT32 rewardType = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "rewardType";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE occupyInfo = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "occupyInfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\PbCrossOccupyInfo';
      $descriptor->addField($f);

      // OPTIONAL STRING topFactionId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "topFactionId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE topObjId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "topObjId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <rewardType> has a value
     *
     * @return boolean
     */
    public function hasRewardType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <rewardType> value
     *
     * @return \utilpb\PbCrossFinalRewardInfo
     */
    public function clearRewardType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <rewardType> value
     *
     * @return int
     */
    public function getRewardType(){
      return $this->_get(1);
    }
    
    /**
     * Set <rewardType> value
     *
     * @param int $value
     * @return \utilpb\PbCrossFinalRewardInfo
     */
    public function setRewardType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <occupyInfo> has a value
     *
     * @return boolean
     */
    public function hasOccupyInfo(){
      return $this->_has(2);
    }
    
    /**
     * Clear <occupyInfo> value
     *
     * @return \utilpb\PbCrossFinalRewardInfo
     */
    public function clearOccupyInfo(){
      return $this->_clear(2);
    }
    
    /**
     * Get <occupyInfo> value
     *
     * @param int $idx
     * @return \utilpb\PbCrossOccupyInfo
     */
    public function getOccupyInfo($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <occupyInfo> value
     *
     * @param \utilpb\PbCrossOccupyInfo $value
     * @return \utilpb\PbCrossFinalRewardInfo
     */
    public function setOccupyInfo(\utilpb\PbCrossOccupyInfo $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <occupyInfo>
     *
     * @return \utilpb\PbCrossOccupyInfo[]
     */
    public function getOccupyInfoList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <occupyInfo>
     *
     * @param \utilpb\PbCrossOccupyInfo $value
     * @return \utilpb\PbCrossFinalRewardInfo
     */
    public function addOccupyInfo(\utilpb\PbCrossOccupyInfo $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <topFactionId> has a value
     *
     * @return boolean
     */
    public function hasTopFactionId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <topFactionId> value
     *
     * @return \utilpb\PbCrossFinalRewardInfo
     */
    public function clearTopFactionId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <topFactionId> value
     *
     * @return string
     */
    public function getTopFactionId(){
      return $this->_get(3);
    }
    
    /**
     * Set <topFactionId> value
     *
     * @param string $value
     * @return \utilpb\PbCrossFinalRewardInfo
     */
    public function setTopFactionId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <topObjId> has a value
     *
     * @return boolean
     */
    public function hasTopObjId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <topObjId> value
     *
     * @return \utilpb\PbCrossFinalRewardInfo
     */
    public function clearTopObjId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <topObjId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getTopObjId(){
      return $this->_get(4);
    }
    
    /**
     * Set <topObjId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PbCrossFinalRewardInfo
     */
    public function setTopObjId(\utilpb\ComposeID $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class PbTopPresidentInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $entryId = null;
    
    /**  @var string */
    public $topPresidentName = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbTopPresidentInfo');

      // REQUIRED INT32 entryId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entryId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING topPresidentName = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "topPresidentName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entryId> has a value
     *
     * @return boolean
     */
    public function hasEntryId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entryId> value
     *
     * @return \utilpb\PbTopPresidentInfo
     */
    public function clearEntryId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entryId> value
     *
     * @return int
     */
    public function getEntryId(){
      return $this->_get(1);
    }
    
    /**
     * Set <entryId> value
     *
     * @param int $value
     * @return \utilpb\PbTopPresidentInfo
     */
    public function setEntryId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <topPresidentName> has a value
     *
     * @return boolean
     */
    public function hasTopPresidentName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <topPresidentName> value
     *
     * @return \utilpb\PbTopPresidentInfo
     */
    public function clearTopPresidentName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <topPresidentName> value
     *
     * @return string
     */
    public function getTopPresidentName(){
      return $this->_get(2);
    }
    
    /**
     * Set <topPresidentName> value
     *
     * @param string $value
     * @return \utilpb\PbTopPresidentInfo
     */
    public function setTopPresidentName( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class PbTopPresidentInfolist extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\PbTopPresidentInfo[]  */
    public $topPresident = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbTopPresidentInfolist');

      // REPEATED MESSAGE topPresident = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "topPresident";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\PbTopPresidentInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <topPresident> has a value
     *
     * @return boolean
     */
    public function hasTopPresident(){
      return $this->_has(1);
    }
    
    /**
     * Clear <topPresident> value
     *
     * @return \utilpb\PbTopPresidentInfolist
     */
    public function clearTopPresident(){
      return $this->_clear(1);
    }
    
    /**
     * Get <topPresident> value
     *
     * @param int $idx
     * @return \utilpb\PbTopPresidentInfo
     */
    public function getTopPresident($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <topPresident> value
     *
     * @param \utilpb\PbTopPresidentInfo $value
     * @return \utilpb\PbTopPresidentInfolist
     */
    public function setTopPresident(\utilpb\PbTopPresidentInfo $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <topPresident>
     *
     * @return \utilpb\PbTopPresidentInfo[]
     */
    public function getTopPresidentList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <topPresident>
     *
     * @param \utilpb\PbTopPresidentInfo $value
     * @return \utilpb\PbTopPresidentInfolist
     */
    public function addTopPresident(\utilpb\PbTopPresidentInfo $value){
     return $this->_add(1, $value);
    }
  }
}

namespace utilpb {

  class OccupyInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $entryId = null;
    
    /**  @var string */
    public $serverName = null;
    
    /**  @var int */
    public $status = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.OccupyInfo');

      // REQUIRED INT32 entryId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entryId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING serverName = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "serverName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 status = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entryId> has a value
     *
     * @return boolean
     */
    public function hasEntryId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entryId> value
     *
     * @return \utilpb\OccupyInfo
     */
    public function clearEntryId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entryId> value
     *
     * @return int
     */
    public function getEntryId(){
      return $this->_get(1);
    }
    
    /**
     * Set <entryId> value
     *
     * @param int $value
     * @return \utilpb\OccupyInfo
     */
    public function setEntryId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <serverName> has a value
     *
     * @return boolean
     */
    public function hasServerName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <serverName> value
     *
     * @return \utilpb\OccupyInfo
     */
    public function clearServerName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <serverName> value
     *
     * @return string
     */
    public function getServerName(){
      return $this->_get(2);
    }
    
    /**
     * Set <serverName> value
     *
     * @param string $value
     * @return \utilpb\OccupyInfo
     */
    public function setServerName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(3);
    }
    
    /**
     * Clear <status> value
     *
     * @return \utilpb\OccupyInfo
     */
    public function clearStatus(){
      return $this->_clear(3);
    }
    
    /**
     * Get <status> value
     *
     * @return int
     */
    public function getStatus(){
      return $this->_get(3);
    }
    
    /**
     * Set <status> value
     *
     * @param int $value
     * @return \utilpb\OccupyInfo
     */
    public function setStatus( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class AllOccupyInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\OccupyInfo[]  */
    public $info = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.AllOccupyInfo');

      // REPEATED MESSAGE info = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\OccupyInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(1);
    }
    
    /**
     * Clear <info> value
     *
     * @return \utilpb\AllOccupyInfo
     */
    public function clearInfo(){
      return $this->_clear(1);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \utilpb\OccupyInfo
     */
    public function getInfo($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \utilpb\OccupyInfo $value
     * @return \utilpb\AllOccupyInfo
     */
    public function setInfo(\utilpb\OccupyInfo $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \utilpb\OccupyInfo[]
     */
    public function getInfoList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \utilpb\OccupyInfo $value
     * @return \utilpb\AllOccupyInfo
     */
    public function addInfo(\utilpb\OccupyInfo $value){
     return $this->_add(1, $value);
    }
  }
}

