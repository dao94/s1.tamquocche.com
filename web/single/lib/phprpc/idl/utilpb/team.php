<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/team.proto
//   Date: 2014-12-19 08:23:09

namespace utilpb {

  class Team extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $teamId = null;
    
    /**  @var \utilpb\Member[]  */
    public $mList = array();
    
    /**  @var \utilpb\ComposeID */
    public $leader = null;
    
    /**  @var int */
    public $applySet = null;
    
    /**  @var int */
    public $inviteSet = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.Team');

      // REQUIRED STRING teamId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "teamId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE mList = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\Member';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE leader = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "leader";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL INT32 applySet = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "applySet";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 inviteSet = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "inviteSet";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <teamId> has a value
     *
     * @return boolean
     */
    public function hasTeamId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <teamId> value
     *
     * @return \utilpb\Team
     */
    public function clearTeamId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <teamId> value
     *
     * @return string
     */
    public function getTeamId(){
      return $this->_get(1);
    }
    
    /**
     * Set <teamId> value
     *
     * @param string $value
     * @return \utilpb\Team
     */
    public function setTeamId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <mList> has a value
     *
     * @return boolean
     */
    public function hasMList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <mList> value
     *
     * @return \utilpb\Team
     */
    public function clearMList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <mList> value
     *
     * @param int $idx
     * @return \utilpb\Member
     */
    public function getMList($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <mList> value
     *
     * @param \utilpb\Member $value
     * @return \utilpb\Team
     */
    public function setMList(\utilpb\Member $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <mList>
     *
     * @return \utilpb\Member[]
     */
    public function getMListList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <mList>
     *
     * @param \utilpb\Member $value
     * @return \utilpb\Team
     */
    public function addMList(\utilpb\Member $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <leader> has a value
     *
     * @return boolean
     */
    public function hasLeader(){
      return $this->_has(3);
    }
    
    /**
     * Clear <leader> value
     *
     * @return \utilpb\Team
     */
    public function clearLeader(){
      return $this->_clear(3);
    }
    
    /**
     * Get <leader> value
     *
     * @return \utilpb\ComposeID
     */
    public function getLeader(){
      return $this->_get(3);
    }
    
    /**
     * Set <leader> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\Team
     */
    public function setLeader(\utilpb\ComposeID $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <applySet> has a value
     *
     * @return boolean
     */
    public function hasApplySet(){
      return $this->_has(4);
    }
    
    /**
     * Clear <applySet> value
     *
     * @return \utilpb\Team
     */
    public function clearApplySet(){
      return $this->_clear(4);
    }
    
    /**
     * Get <applySet> value
     *
     * @return int
     */
    public function getApplySet(){
      return $this->_get(4);
    }
    
    /**
     * Set <applySet> value
     *
     * @param int $value
     * @return \utilpb\Team
     */
    public function setApplySet( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <inviteSet> has a value
     *
     * @return boolean
     */
    public function hasInviteSet(){
      return $this->_has(5);
    }
    
    /**
     * Clear <inviteSet> value
     *
     * @return \utilpb\Team
     */
    public function clearInviteSet(){
      return $this->_clear(5);
    }
    
    /**
     * Get <inviteSet> value
     *
     * @return int
     */
    public function getInviteSet(){
      return $this->_get(5);
    }
    
    /**
     * Set <inviteSet> value
     *
     * @param int $value
     * @return \utilpb\Team
     */
    public function setInviteSet( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace utilpb {

  class Member extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $level = null;
    
    /**  @var int */
    public $status = null;
    
    /**  @var int */
    public $sceneId = null;
    
    /**  @var int */
    public $camp = null;
    
    /**  @var int */
    public $occ = null;
    
    /**  @var int */
    public $gender = null;
    
    /**  @var int */
    public $fighting = null;
    
    /**  @var int */
    public $ready = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.Member');

      // REQUIRED MESSAGE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 level = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 status = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 sceneId = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "sceneId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 camp = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "camp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 occ = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "occ";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 gender = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "gender";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 fighting = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "fighting";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 ready = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "ready";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\Member
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\Member
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\Member
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\Member
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(3);
    }
    
    /**
     * Clear <level> value
     *
     * @return \utilpb\Member
     */
    public function clearLevel(){
      return $this->_clear(3);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(3);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \utilpb\Member
     */
    public function setLevel( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(4);
    }
    
    /**
     * Clear <status> value
     *
     * @return \utilpb\Member
     */
    public function clearStatus(){
      return $this->_clear(4);
    }
    
    /**
     * Get <status> value
     *
     * @return int
     */
    public function getStatus(){
      return $this->_get(4);
    }
    
    /**
     * Set <status> value
     *
     * @param int $value
     * @return \utilpb\Member
     */
    public function setStatus( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <sceneId> has a value
     *
     * @return boolean
     */
    public function hasSceneId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <sceneId> value
     *
     * @return \utilpb\Member
     */
    public function clearSceneId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <sceneId> value
     *
     * @return int
     */
    public function getSceneId(){
      return $this->_get(5);
    }
    
    /**
     * Set <sceneId> value
     *
     * @param int $value
     * @return \utilpb\Member
     */
    public function setSceneId( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <camp> has a value
     *
     * @return boolean
     */
    public function hasCamp(){
      return $this->_has(6);
    }
    
    /**
     * Clear <camp> value
     *
     * @return \utilpb\Member
     */
    public function clearCamp(){
      return $this->_clear(6);
    }
    
    /**
     * Get <camp> value
     *
     * @return int
     */
    public function getCamp(){
      return $this->_get(6);
    }
    
    /**
     * Set <camp> value
     *
     * @param int $value
     * @return \utilpb\Member
     */
    public function setCamp( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <occ> has a value
     *
     * @return boolean
     */
    public function hasOcc(){
      return $this->_has(7);
    }
    
    /**
     * Clear <occ> value
     *
     * @return \utilpb\Member
     */
    public function clearOcc(){
      return $this->_clear(7);
    }
    
    /**
     * Get <occ> value
     *
     * @return int
     */
    public function getOcc(){
      return $this->_get(7);
    }
    
    /**
     * Set <occ> value
     *
     * @param int $value
     * @return \utilpb\Member
     */
    public function setOcc( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <gender> has a value
     *
     * @return boolean
     */
    public function hasGender(){
      return $this->_has(8);
    }
    
    /**
     * Clear <gender> value
     *
     * @return \utilpb\Member
     */
    public function clearGender(){
      return $this->_clear(8);
    }
    
    /**
     * Get <gender> value
     *
     * @return int
     */
    public function getGender(){
      return $this->_get(8);
    }
    
    /**
     * Set <gender> value
     *
     * @param int $value
     * @return \utilpb\Member
     */
    public function setGender( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <fighting> has a value
     *
     * @return boolean
     */
    public function hasFighting(){
      return $this->_has(9);
    }
    
    /**
     * Clear <fighting> value
     *
     * @return \utilpb\Member
     */
    public function clearFighting(){
      return $this->_clear(9);
    }
    
    /**
     * Get <fighting> value
     *
     * @return int
     */
    public function getFighting(){
      return $this->_get(9);
    }
    
    /**
     * Set <fighting> value
     *
     * @param int $value
     * @return \utilpb\Member
     */
    public function setFighting( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <ready> has a value
     *
     * @return boolean
     */
    public function hasReady(){
      return $this->_has(10);
    }
    
    /**
     * Clear <ready> value
     *
     * @return \utilpb\Member
     */
    public function clearReady(){
      return $this->_clear(10);
    }
    
    /**
     * Get <ready> value
     *
     * @return int
     */
    public function getReady(){
      return $this->_get(10);
    }
    
    /**
     * Set <ready> value
     *
     * @param int $value
     * @return \utilpb\Member
     */
    public function setReady( $value){
      return $this->_set(10, $value);
    }
  }
}

namespace utilpb {

  class TeamUpdate extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\Team[]  */
    public $tList = array();
    
    /**  @var int */
    public $flag = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.TeamUpdate');

      // REPEATED MESSAGE tList = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\Team';
      $descriptor->addField($f);

      // REQUIRED INT32 flag = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tList> has a value
     *
     * @return boolean
     */
    public function hasTList(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tList> value
     *
     * @return \utilpb\TeamUpdate
     */
    public function clearTList(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tList> value
     *
     * @param int $idx
     * @return \utilpb\Team
     */
    public function getTList($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <tList> value
     *
     * @param \utilpb\Team $value
     * @return \utilpb\TeamUpdate
     */
    public function setTList(\utilpb\Team $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <tList>
     *
     * @return \utilpb\Team[]
     */
    public function getTListList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <tList>
     *
     * @param \utilpb\Team $value
     * @return \utilpb\TeamUpdate
     */
    public function addTList(\utilpb\Team $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(2);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\TeamUpdate
     */
    public function clearFlag(){
      return $this->_clear(2);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(2);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\TeamUpdate
     */
    public function setFlag( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class MemberUpdate extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $teamId = null;
    
    /**  @var \utilpb\Member[]  */
    public $mList = array();
    
    /**  @var int */
    public $flag = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.MemberUpdate');

      // REQUIRED STRING teamId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "teamId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE mList = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\Member';
      $descriptor->addField($f);

      // REQUIRED INT32 flag = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <teamId> has a value
     *
     * @return boolean
     */
    public function hasTeamId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <teamId> value
     *
     * @return \utilpb\MemberUpdate
     */
    public function clearTeamId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <teamId> value
     *
     * @return string
     */
    public function getTeamId(){
      return $this->_get(1);
    }
    
    /**
     * Set <teamId> value
     *
     * @param string $value
     * @return \utilpb\MemberUpdate
     */
    public function setTeamId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <mList> has a value
     *
     * @return boolean
     */
    public function hasMList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <mList> value
     *
     * @return \utilpb\MemberUpdate
     */
    public function clearMList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <mList> value
     *
     * @param int $idx
     * @return \utilpb\Member
     */
    public function getMList($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <mList> value
     *
     * @param \utilpb\Member $value
     * @return \utilpb\MemberUpdate
     */
    public function setMList(\utilpb\Member $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <mList>
     *
     * @return \utilpb\Member[]
     */
    public function getMListList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <mList>
     *
     * @param \utilpb\Member $value
     * @return \utilpb\MemberUpdate
     */
    public function addMList(\utilpb\Member $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(3);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\MemberUpdate
     */
    public function clearFlag(){
      return $this->_clear(3);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(3);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\MemberUpdate
     */
    public function setFlag( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class TeamClient extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\Team */
    public $team = null;
    
    /**  @var int */
    public $flag = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.TeamClient');

      // REQUIRED MESSAGE team = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "team";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\Team';
      $descriptor->addField($f);

      // OPTIONAL INT32 flag = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <team> has a value
     *
     * @return boolean
     */
    public function hasTeam(){
      return $this->_has(1);
    }
    
    /**
     * Clear <team> value
     *
     * @return \utilpb\TeamClient
     */
    public function clearTeam(){
      return $this->_clear(1);
    }
    
    /**
     * Get <team> value
     *
     * @return \utilpb\Team
     */
    public function getTeam(){
      return $this->_get(1);
    }
    
    /**
     * Set <team> value
     *
     * @param \utilpb\Team $value
     * @return \utilpb\TeamClient
     */
    public function setTeam(\utilpb\Team $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(2);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\TeamClient
     */
    public function clearFlag(){
      return $this->_clear(2);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(2);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\TeamClient
     */
    public function setFlag( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class ApplyTeam extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $teamId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.ApplyTeam');

      // REQUIRED STRING teamId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "teamId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <teamId> has a value
     *
     * @return boolean
     */
    public function hasTeamId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <teamId> value
     *
     * @return \utilpb\ApplyTeam
     */
    public function clearTeamId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <teamId> value
     *
     * @return string
     */
    public function getTeamId(){
      return $this->_get(1);
    }
    
    /**
     * Set <teamId> value
     *
     * @param string $value
     * @return \utilpb\ApplyTeam
     */
    public function setTeamId( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace utilpb {

  class ApplySend extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \utilpb\ComposeID */
    public $id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.ApplySend');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\ApplySend
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\ApplySend
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\ApplySend
     */
    public function clearId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(2);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\ApplySend
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class InviteSend extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \utilpb\ComposeID */
    public $id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.InviteSend');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\InviteSend
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\InviteSend
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\InviteSend
     */
    public function clearId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(2);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\InviteSend
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class LimitSet extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $applySet = null;
    
    /**  @var int */
    public $inviteSet = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.LimitSet');

      // REQUIRED INT32 applySet = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "applySet";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 inviteSet = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "inviteSet";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <applySet> has a value
     *
     * @return boolean
     */
    public function hasApplySet(){
      return $this->_has(1);
    }
    
    /**
     * Clear <applySet> value
     *
     * @return \utilpb\LimitSet
     */
    public function clearApplySet(){
      return $this->_clear(1);
    }
    
    /**
     * Get <applySet> value
     *
     * @return int
     */
    public function getApplySet(){
      return $this->_get(1);
    }
    
    /**
     * Set <applySet> value
     *
     * @param int $value
     * @return \utilpb\LimitSet
     */
    public function setApplySet( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <inviteSet> has a value
     *
     * @return boolean
     */
    public function hasInviteSet(){
      return $this->_has(2);
    }
    
    /**
     * Clear <inviteSet> value
     *
     * @return \utilpb\LimitSet
     */
    public function clearInviteSet(){
      return $this->_clear(2);
    }
    
    /**
     * Get <inviteSet> value
     *
     * @return int
     */
    public function getInviteSet(){
      return $this->_get(2);
    }
    
    /**
     * Set <inviteSet> value
     *
     * @param int $value
     * @return \utilpb\LimitSet
     */
    public function setInviteSet( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class Gather extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $leaderName = null;
    
    /**  @var int */
    public $sceneId = null;
    
    /**  @var string */
    public $sceneName = null;
    
    /**  @var int */
    public $schedule = null;
    
    /**  @var int */
    public $x = null;
    
    /**  @var int */
    public $y = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.Gather');

      // REQUIRED STRING leaderName = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "leaderName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 sceneId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sceneId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING sceneName = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "sceneName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 schedule = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "schedule";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 x = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "x";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 y = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "y";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <leaderName> has a value
     *
     * @return boolean
     */
    public function hasLeaderName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <leaderName> value
     *
     * @return \utilpb\Gather
     */
    public function clearLeaderName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <leaderName> value
     *
     * @return string
     */
    public function getLeaderName(){
      return $this->_get(1);
    }
    
    /**
     * Set <leaderName> value
     *
     * @param string $value
     * @return \utilpb\Gather
     */
    public function setLeaderName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sceneId> has a value
     *
     * @return boolean
     */
    public function hasSceneId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sceneId> value
     *
     * @return \utilpb\Gather
     */
    public function clearSceneId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sceneId> value
     *
     * @return int
     */
    public function getSceneId(){
      return $this->_get(2);
    }
    
    /**
     * Set <sceneId> value
     *
     * @param int $value
     * @return \utilpb\Gather
     */
    public function setSceneId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <sceneName> has a value
     *
     * @return boolean
     */
    public function hasSceneName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <sceneName> value
     *
     * @return \utilpb\Gather
     */
    public function clearSceneName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <sceneName> value
     *
     * @return string
     */
    public function getSceneName(){
      return $this->_get(3);
    }
    
    /**
     * Set <sceneName> value
     *
     * @param string $value
     * @return \utilpb\Gather
     */
    public function setSceneName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <schedule> has a value
     *
     * @return boolean
     */
    public function hasSchedule(){
      return $this->_has(4);
    }
    
    /**
     * Clear <schedule> value
     *
     * @return \utilpb\Gather
     */
    public function clearSchedule(){
      return $this->_clear(4);
    }
    
    /**
     * Get <schedule> value
     *
     * @return int
     */
    public function getSchedule(){
      return $this->_get(4);
    }
    
    /**
     * Set <schedule> value
     *
     * @param int $value
     * @return \utilpb\Gather
     */
    public function setSchedule( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <x> has a value
     *
     * @return boolean
     */
    public function hasX(){
      return $this->_has(5);
    }
    
    /**
     * Clear <x> value
     *
     * @return \utilpb\Gather
     */
    public function clearX(){
      return $this->_clear(5);
    }
    
    /**
     * Get <x> value
     *
     * @return int
     */
    public function getX(){
      return $this->_get(5);
    }
    
    /**
     * Set <x> value
     *
     * @param int $value
     * @return \utilpb\Gather
     */
    public function setX( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <y> has a value
     *
     * @return boolean
     */
    public function hasY(){
      return $this->_has(6);
    }
    
    /**
     * Clear <y> value
     *
     * @return \utilpb\Gather
     */
    public function clearY(){
      return $this->_clear(6);
    }
    
    /**
     * Get <y> value
     *
     * @return int
     */
    public function getY(){
      return $this->_get(6);
    }
    
    /**
     * Set <y> value
     *
     * @param int $value
     * @return \utilpb\Gather
     */
    public function setY( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace utilpb {

  class MemberInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $id = null;
    
    /**  @var int */
    public $x = null;
    
    /**  @var int */
    public $y = null;
    
    /**  @var int */
    public $entryId = null;
    
    /**  @var int */
    public $mapId = null;
    
    /**  @var string */
    public $copyId = null;
    
    /**  @var int */
    public $hp = null;
    
    /**  @var int */
    public $maxHp = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.MemberInfo');

      // OPTIONAL MESSAGE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL INT32 x = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "x";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 y = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "y";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 entryId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "entryId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 mapId = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "mapId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING copyId = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "copyId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 hp = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "hp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 maxHp = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "maxHp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\MemberInfo
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\MemberInfo
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <x> has a value
     *
     * @return boolean
     */
    public function hasX(){
      return $this->_has(2);
    }
    
    /**
     * Clear <x> value
     *
     * @return \utilpb\MemberInfo
     */
    public function clearX(){
      return $this->_clear(2);
    }
    
    /**
     * Get <x> value
     *
     * @return int
     */
    public function getX(){
      return $this->_get(2);
    }
    
    /**
     * Set <x> value
     *
     * @param int $value
     * @return \utilpb\MemberInfo
     */
    public function setX( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <y> has a value
     *
     * @return boolean
     */
    public function hasY(){
      return $this->_has(3);
    }
    
    /**
     * Clear <y> value
     *
     * @return \utilpb\MemberInfo
     */
    public function clearY(){
      return $this->_clear(3);
    }
    
    /**
     * Get <y> value
     *
     * @return int
     */
    public function getY(){
      return $this->_get(3);
    }
    
    /**
     * Set <y> value
     *
     * @param int $value
     * @return \utilpb\MemberInfo
     */
    public function setY( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <entryId> has a value
     *
     * @return boolean
     */
    public function hasEntryId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <entryId> value
     *
     * @return \utilpb\MemberInfo
     */
    public function clearEntryId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <entryId> value
     *
     * @return int
     */
    public function getEntryId(){
      return $this->_get(4);
    }
    
    /**
     * Set <entryId> value
     *
     * @param int $value
     * @return \utilpb\MemberInfo
     */
    public function setEntryId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <mapId> has a value
     *
     * @return boolean
     */
    public function hasMapId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <mapId> value
     *
     * @return \utilpb\MemberInfo
     */
    public function clearMapId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <mapId> value
     *
     * @return int
     */
    public function getMapId(){
      return $this->_get(5);
    }
    
    /**
     * Set <mapId> value
     *
     * @param int $value
     * @return \utilpb\MemberInfo
     */
    public function setMapId( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <copyId> has a value
     *
     * @return boolean
     */
    public function hasCopyId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <copyId> value
     *
     * @return \utilpb\MemberInfo
     */
    public function clearCopyId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <copyId> value
     *
     * @return string
     */
    public function getCopyId(){
      return $this->_get(6);
    }
    
    /**
     * Set <copyId> value
     *
     * @param string $value
     * @return \utilpb\MemberInfo
     */
    public function setCopyId( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <hp> has a value
     *
     * @return boolean
     */
    public function hasHp(){
      return $this->_has(7);
    }
    
    /**
     * Clear <hp> value
     *
     * @return \utilpb\MemberInfo
     */
    public function clearHp(){
      return $this->_clear(7);
    }
    
    /**
     * Get <hp> value
     *
     * @return int
     */
    public function getHp(){
      return $this->_get(7);
    }
    
    /**
     * Set <hp> value
     *
     * @param int $value
     * @return \utilpb\MemberInfo
     */
    public function setHp( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <maxHp> has a value
     *
     * @return boolean
     */
    public function hasMaxHp(){
      return $this->_has(8);
    }
    
    /**
     * Clear <maxHp> value
     *
     * @return \utilpb\MemberInfo
     */
    public function clearMaxHp(){
      return $this->_clear(8);
    }
    
    /**
     * Get <maxHp> value
     *
     * @return int
     */
    public function getMaxHp(){
      return $this->_get(8);
    }
    
    /**
     * Set <maxHp> value
     *
     * @param int $value
     * @return \utilpb\MemberInfo
     */
    public function setMaxHp( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace utilpb {

  class MemberInfoList extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\MemberInfo[]  */
    public $list = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.MemberInfoList');

      // REPEATED MESSAGE list = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "list";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\MemberInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <list> has a value
     *
     * @return boolean
     */
    public function hasList(){
      return $this->_has(1);
    }
    
    /**
     * Clear <list> value
     *
     * @return \utilpb\MemberInfoList
     */
    public function clearList(){
      return $this->_clear(1);
    }
    
    /**
     * Get <list> value
     *
     * @param int $idx
     * @return \utilpb\MemberInfo
     */
    public function getList($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <list> value
     *
     * @param \utilpb\MemberInfo $value
     * @return \utilpb\MemberInfoList
     */
    public function setList(\utilpb\MemberInfo $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <list>
     *
     * @return \utilpb\MemberInfo[]
     */
    public function getListList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <list>
     *
     * @param \utilpb\MemberInfo $value
     * @return \utilpb\MemberInfoList
     */
    public function addList(\utilpb\MemberInfo $value){
     return $this->_add(1, $value);
    }
  }
}

