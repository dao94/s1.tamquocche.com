<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/pet.proto
//   Date: 2014-12-19 08:23:07

namespace utilpb {

  class Pullulate extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $hp = null;
    
    /**  @var int */
    public $attack = null;
    
    /**  @var int */
    public $defense = null;
    
    /**  @var int */
    public $hpMax = null;
    
    /**  @var int */
    public $attackMax = null;
    
    /**  @var int */
    public $defenseMax = null;
    
    /**  @var \utilpb\ComposeID */
    public $petId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.Pullulate');

      // REQUIRED INT32 hp = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "hp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 attack = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "attack";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 defense = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "defense";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 hpMax = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "hpMax";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 attackMax = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "attackMax";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 defenseMax = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "defenseMax";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE petId = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <hp> has a value
     *
     * @return boolean
     */
    public function hasHp(){
      return $this->_has(1);
    }
    
    /**
     * Clear <hp> value
     *
     * @return \utilpb\Pullulate
     */
    public function clearHp(){
      return $this->_clear(1);
    }
    
    /**
     * Get <hp> value
     *
     * @return int
     */
    public function getHp(){
      return $this->_get(1);
    }
    
    /**
     * Set <hp> value
     *
     * @param int $value
     * @return \utilpb\Pullulate
     */
    public function setHp( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <attack> has a value
     *
     * @return boolean
     */
    public function hasAttack(){
      return $this->_has(2);
    }
    
    /**
     * Clear <attack> value
     *
     * @return \utilpb\Pullulate
     */
    public function clearAttack(){
      return $this->_clear(2);
    }
    
    /**
     * Get <attack> value
     *
     * @return int
     */
    public function getAttack(){
      return $this->_get(2);
    }
    
    /**
     * Set <attack> value
     *
     * @param int $value
     * @return \utilpb\Pullulate
     */
    public function setAttack( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <defense> has a value
     *
     * @return boolean
     */
    public function hasDefense(){
      return $this->_has(3);
    }
    
    /**
     * Clear <defense> value
     *
     * @return \utilpb\Pullulate
     */
    public function clearDefense(){
      return $this->_clear(3);
    }
    
    /**
     * Get <defense> value
     *
     * @return int
     */
    public function getDefense(){
      return $this->_get(3);
    }
    
    /**
     * Set <defense> value
     *
     * @param int $value
     * @return \utilpb\Pullulate
     */
    public function setDefense( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <hpMax> has a value
     *
     * @return boolean
     */
    public function hasHpMax(){
      return $this->_has(4);
    }
    
    /**
     * Clear <hpMax> value
     *
     * @return \utilpb\Pullulate
     */
    public function clearHpMax(){
      return $this->_clear(4);
    }
    
    /**
     * Get <hpMax> value
     *
     * @return int
     */
    public function getHpMax(){
      return $this->_get(4);
    }
    
    /**
     * Set <hpMax> value
     *
     * @param int $value
     * @return \utilpb\Pullulate
     */
    public function setHpMax( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <attackMax> has a value
     *
     * @return boolean
     */
    public function hasAttackMax(){
      return $this->_has(5);
    }
    
    /**
     * Clear <attackMax> value
     *
     * @return \utilpb\Pullulate
     */
    public function clearAttackMax(){
      return $this->_clear(5);
    }
    
    /**
     * Get <attackMax> value
     *
     * @return int
     */
    public function getAttackMax(){
      return $this->_get(5);
    }
    
    /**
     * Set <attackMax> value
     *
     * @param int $value
     * @return \utilpb\Pullulate
     */
    public function setAttackMax( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <defenseMax> has a value
     *
     * @return boolean
     */
    public function hasDefenseMax(){
      return $this->_has(6);
    }
    
    /**
     * Clear <defenseMax> value
     *
     * @return \utilpb\Pullulate
     */
    public function clearDefenseMax(){
      return $this->_clear(6);
    }
    
    /**
     * Get <defenseMax> value
     *
     * @return int
     */
    public function getDefenseMax(){
      return $this->_get(6);
    }
    
    /**
     * Set <defenseMax> value
     *
     * @param int $value
     * @return \utilpb\Pullulate
     */
    public function setDefenseMax( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\Pullulate
     */
    public function clearPetId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(7);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\Pullulate
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(7, $value);
    }
  }
}

namespace utilpb {

  class BaseAttrPet extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $id = null;
    
    /**  @var \utilpb\ComposeID */
    public $ownerId = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $level = null;
    
    /**  @var int */
    public $exp = null;
    
    /**  @var int */
    public $maxexp = null;
    
    /**  @var int */
    public $occ = null;
    
    /**  @var int */
    public $model = null;
    
    /**  @var \utilpb\Pullulate */
    public $pullulate = null;
    
    /**  @var int */
    public $fight = null;
    
    /**  @var int */
    public $mode = null;
    
    /**  @var string */
    public $ownerName = null;
    
    /**  @var int */
    public $protential = null;
    
    /**  @var int */
    public $volume = null;
    
    /**  @var int */
    public $extraProtential = null;
    
    /**  @var int */
    public $maxProtential = null;
    
    /**  @var int */
    public $isCollect = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.BaseAttrPet');

      // REQUIRED MESSAGE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED MESSAGE ownerId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "ownerId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED STRING name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 level = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 exp = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "exp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 maxexp = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "maxexp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED INT32 occ = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "occ";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 model = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "model";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE pullulate = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "pullulate";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\Pullulate';
      $descriptor->addField($f);

      // REQUIRED INT32 fight = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "fight";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 mode = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "mode";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING ownerName = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "ownerName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 protential = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "protential";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 volume = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "volume";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 extraProtential = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "extraProtential";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 maxProtential = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "maxProtential";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 isCollect = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "isCollect";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\BaseAttrPet
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\BaseAttrPet
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <ownerId> has a value
     *
     * @return boolean
     */
    public function hasOwnerId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <ownerId> value
     *
     * @return \utilpb\BaseAttrPet
     */
    public function clearOwnerId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <ownerId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getOwnerId(){
      return $this->_get(2);
    }
    
    /**
     * Set <ownerId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\BaseAttrPet
     */
    public function setOwnerId(\utilpb\ComposeID $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\BaseAttrPet
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(3);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\BaseAttrPet
     */
    public function setName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(4);
    }
    
    /**
     * Clear <level> value
     *
     * @return \utilpb\BaseAttrPet
     */
    public function clearLevel(){
      return $this->_clear(4);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(4);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \utilpb\BaseAttrPet
     */
    public function setLevel( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <exp> has a value
     *
     * @return boolean
     */
    public function hasExp(){
      return $this->_has(5);
    }
    
    /**
     * Clear <exp> value
     *
     * @return \utilpb\BaseAttrPet
     */
    public function clearExp(){
      return $this->_clear(5);
    }
    
    /**
     * Get <exp> value
     *
     * @return int
     */
    public function getExp(){
      return $this->_get(5);
    }
    
    /**
     * Set <exp> value
     *
     * @param int $value
     * @return \utilpb\BaseAttrPet
     */
    public function setExp( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <maxexp> has a value
     *
     * @return boolean
     */
    public function hasMaxexp(){
      return $this->_has(6);
    }
    
    /**
     * Clear <maxexp> value
     *
     * @return \utilpb\BaseAttrPet
     */
    public function clearMaxexp(){
      return $this->_clear(6);
    }
    
    /**
     * Get <maxexp> value
     *
     * @return int
     */
    public function getMaxexp(){
      return $this->_get(6);
    }
    
    /**
     * Set <maxexp> value
     *
     * @param int $value
     * @return \utilpb\BaseAttrPet
     */
    public function setMaxexp( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <occ> has a value
     *
     * @return boolean
     */
    public function hasOcc(){
      return $this->_has(7);
    }
    
    /**
     * Clear <occ> value
     *
     * @return \utilpb\BaseAttrPet
     */
    public function clearOcc(){
      return $this->_clear(7);
    }
    
    /**
     * Get <occ> value
     *
     * @return int
     */
    public function getOcc(){
      return $this->_get(7);
    }
    
    /**
     * Set <occ> value
     *
     * @param int $value
     * @return \utilpb\BaseAttrPet
     */
    public function setOcc( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <model> has a value
     *
     * @return boolean
     */
    public function hasModel(){
      return $this->_has(8);
    }
    
    /**
     * Clear <model> value
     *
     * @return \utilpb\BaseAttrPet
     */
    public function clearModel(){
      return $this->_clear(8);
    }
    
    /**
     * Get <model> value
     *
     * @return int
     */
    public function getModel(){
      return $this->_get(8);
    }
    
    /**
     * Set <model> value
     *
     * @param int $value
     * @return \utilpb\BaseAttrPet
     */
    public function setModel( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <pullulate> has a value
     *
     * @return boolean
     */
    public function hasPullulate(){
      return $this->_has(9);
    }
    
    /**
     * Clear <pullulate> value
     *
     * @return \utilpb\BaseAttrPet
     */
    public function clearPullulate(){
      return $this->_clear(9);
    }
    
    /**
     * Get <pullulate> value
     *
     * @return \utilpb\Pullulate
     */
    public function getPullulate(){
      return $this->_get(9);
    }
    
    /**
     * Set <pullulate> value
     *
     * @param \utilpb\Pullulate $value
     * @return \utilpb\BaseAttrPet
     */
    public function setPullulate(\utilpb\Pullulate $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <fight> has a value
     *
     * @return boolean
     */
    public function hasFight(){
      return $this->_has(10);
    }
    
    /**
     * Clear <fight> value
     *
     * @return \utilpb\BaseAttrPet
     */
    public function clearFight(){
      return $this->_clear(10);
    }
    
    /**
     * Get <fight> value
     *
     * @return int
     */
    public function getFight(){
      return $this->_get(10);
    }
    
    /**
     * Set <fight> value
     *
     * @param int $value
     * @return \utilpb\BaseAttrPet
     */
    public function setFight( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <mode> has a value
     *
     * @return boolean
     */
    public function hasMode(){
      return $this->_has(11);
    }
    
    /**
     * Clear <mode> value
     *
     * @return \utilpb\BaseAttrPet
     */
    public function clearMode(){
      return $this->_clear(11);
    }
    
    /**
     * Get <mode> value
     *
     * @return int
     */
    public function getMode(){
      return $this->_get(11);
    }
    
    /**
     * Set <mode> value
     *
     * @param int $value
     * @return \utilpb\BaseAttrPet
     */
    public function setMode( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <ownerName> has a value
     *
     * @return boolean
     */
    public function hasOwnerName(){
      return $this->_has(12);
    }
    
    /**
     * Clear <ownerName> value
     *
     * @return \utilpb\BaseAttrPet
     */
    public function clearOwnerName(){
      return $this->_clear(12);
    }
    
    /**
     * Get <ownerName> value
     *
     * @return string
     */
    public function getOwnerName(){
      return $this->_get(12);
    }
    
    /**
     * Set <ownerName> value
     *
     * @param string $value
     * @return \utilpb\BaseAttrPet
     */
    public function setOwnerName( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <protential> has a value
     *
     * @return boolean
     */
    public function hasProtential(){
      return $this->_has(13);
    }
    
    /**
     * Clear <protential> value
     *
     * @return \utilpb\BaseAttrPet
     */
    public function clearProtential(){
      return $this->_clear(13);
    }
    
    /**
     * Get <protential> value
     *
     * @return int
     */
    public function getProtential(){
      return $this->_get(13);
    }
    
    /**
     * Set <protential> value
     *
     * @param int $value
     * @return \utilpb\BaseAttrPet
     */
    public function setProtential( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <volume> has a value
     *
     * @return boolean
     */
    public function hasVolume(){
      return $this->_has(14);
    }
    
    /**
     * Clear <volume> value
     *
     * @return \utilpb\BaseAttrPet
     */
    public function clearVolume(){
      return $this->_clear(14);
    }
    
    /**
     * Get <volume> value
     *
     * @return int
     */
    public function getVolume(){
      return $this->_get(14);
    }
    
    /**
     * Set <volume> value
     *
     * @param int $value
     * @return \utilpb\BaseAttrPet
     */
    public function setVolume( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <extraProtential> has a value
     *
     * @return boolean
     */
    public function hasExtraProtential(){
      return $this->_has(15);
    }
    
    /**
     * Clear <extraProtential> value
     *
     * @return \utilpb\BaseAttrPet
     */
    public function clearExtraProtential(){
      return $this->_clear(15);
    }
    
    /**
     * Get <extraProtential> value
     *
     * @return int
     */
    public function getExtraProtential(){
      return $this->_get(15);
    }
    
    /**
     * Set <extraProtential> value
     *
     * @param int $value
     * @return \utilpb\BaseAttrPet
     */
    public function setExtraProtential( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <maxProtential> has a value
     *
     * @return boolean
     */
    public function hasMaxProtential(){
      return $this->_has(16);
    }
    
    /**
     * Clear <maxProtential> value
     *
     * @return \utilpb\BaseAttrPet
     */
    public function clearMaxProtential(){
      return $this->_clear(16);
    }
    
    /**
     * Get <maxProtential> value
     *
     * @return int
     */
    public function getMaxProtential(){
      return $this->_get(16);
    }
    
    /**
     * Set <maxProtential> value
     *
     * @param int $value
     * @return \utilpb\BaseAttrPet
     */
    public function setMaxProtential( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <isCollect> has a value
     *
     * @return boolean
     */
    public function hasIsCollect(){
      return $this->_has(17);
    }
    
    /**
     * Clear <isCollect> value
     *
     * @return \utilpb\BaseAttrPet
     */
    public function clearIsCollect(){
      return $this->_clear(17);
    }
    
    /**
     * Get <isCollect> value
     *
     * @return int
     */
    public function getIsCollect(){
      return $this->_get(17);
    }
    
    /**
     * Set <isCollect> value
     *
     * @param int $value
     * @return \utilpb\BaseAttrPet
     */
    public function setIsCollect( $value){
      return $this->_set(17, $value);
    }
  }
}

namespace utilpb {

  class RealmPet extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $petId = null;
    
    /**  @var int */
    public $rank = null;
    
    /**  @var int */
    public $level = null;
    
    /**  @var int */
    public $blessing = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.RealmPet');

      // OPTIONAL MESSAGE petId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL INT32 rank = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "rank";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 level = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 blessing = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "blessing";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\RealmPet
     */
    public function clearPetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\RealmPet
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <rank> has a value
     *
     * @return boolean
     */
    public function hasRank(){
      return $this->_has(2);
    }
    
    /**
     * Clear <rank> value
     *
     * @return \utilpb\RealmPet
     */
    public function clearRank(){
      return $this->_clear(2);
    }
    
    /**
     * Get <rank> value
     *
     * @return int
     */
    public function getRank(){
      return $this->_get(2);
    }
    
    /**
     * Set <rank> value
     *
     * @param int $value
     * @return \utilpb\RealmPet
     */
    public function setRank( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(3);
    }
    
    /**
     * Clear <level> value
     *
     * @return \utilpb\RealmPet
     */
    public function clearLevel(){
      return $this->_clear(3);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(3);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \utilpb\RealmPet
     */
    public function setLevel( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <blessing> has a value
     *
     * @return boolean
     */
    public function hasBlessing(){
      return $this->_has(4);
    }
    
    /**
     * Clear <blessing> value
     *
     * @return \utilpb\RealmPet
     */
    public function clearBlessing(){
      return $this->_clear(4);
    }
    
    /**
     * Get <blessing> value
     *
     * @return int
     */
    public function getBlessing(){
      return $this->_get(4);
    }
    
    /**
     * Set <blessing> value
     *
     * @param int $value
     * @return \utilpb\RealmPet
     */
    public function setBlessing( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class SkillPet extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $skillId = null;
    
    /**  @var int */
    public $levelTotal = null;
    
    /**  @var int[]  */
    public $levelBook = array();
    
    /**  @var int */
    public $mijiLevel = null;
    
    /**  @var int */
    public $slot = null;
    
    /**  @var int */
    public $canAdd = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SkillPet');

      // OPTIONAL INT32 skillId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "skillId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 levelTotal = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "levelTotal";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED INT32 levelBook = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "levelBook";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL INT32 mijiLevel = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "mijiLevel";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 slot = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "slot";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 canAdd = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "canAdd";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <skillId> has a value
     *
     * @return boolean
     */
    public function hasSkillId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <skillId> value
     *
     * @return \utilpb\SkillPet
     */
    public function clearSkillId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <skillId> value
     *
     * @return int
     */
    public function getSkillId(){
      return $this->_get(1);
    }
    
    /**
     * Set <skillId> value
     *
     * @param int $value
     * @return \utilpb\SkillPet
     */
    public function setSkillId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <levelTotal> has a value
     *
     * @return boolean
     */
    public function hasLevelTotal(){
      return $this->_has(2);
    }
    
    /**
     * Clear <levelTotal> value
     *
     * @return \utilpb\SkillPet
     */
    public function clearLevelTotal(){
      return $this->_clear(2);
    }
    
    /**
     * Get <levelTotal> value
     *
     * @return int
     */
    public function getLevelTotal(){
      return $this->_get(2);
    }
    
    /**
     * Set <levelTotal> value
     *
     * @param int $value
     * @return \utilpb\SkillPet
     */
    public function setLevelTotal( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <levelBook> has a value
     *
     * @return boolean
     */
    public function hasLevelBook(){
      return $this->_has(3);
    }
    
    /**
     * Clear <levelBook> value
     *
     * @return \utilpb\SkillPet
     */
    public function clearLevelBook(){
      return $this->_clear(3);
    }
    
    /**
     * Get <levelBook> value
     *
     * @param int $idx
     * @return int
     */
    public function getLevelBook($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <levelBook> value
     *
     * @param int $value
     * @return \utilpb\SkillPet
     */
    public function setLevelBook( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <levelBook>
     *
     * @return int[]
     */
    public function getLevelBookList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <levelBook>
     *
     * @param int $value
     * @return \utilpb\SkillPet
     */
    public function addLevelBook( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <mijiLevel> has a value
     *
     * @return boolean
     */
    public function hasMijiLevel(){
      return $this->_has(4);
    }
    
    /**
     * Clear <mijiLevel> value
     *
     * @return \utilpb\SkillPet
     */
    public function clearMijiLevel(){
      return $this->_clear(4);
    }
    
    /**
     * Get <mijiLevel> value
     *
     * @return int
     */
    public function getMijiLevel(){
      return $this->_get(4);
    }
    
    /**
     * Set <mijiLevel> value
     *
     * @param int $value
     * @return \utilpb\SkillPet
     */
    public function setMijiLevel( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <slot> has a value
     *
     * @return boolean
     */
    public function hasSlot(){
      return $this->_has(5);
    }
    
    /**
     * Clear <slot> value
     *
     * @return \utilpb\SkillPet
     */
    public function clearSlot(){
      return $this->_clear(5);
    }
    
    /**
     * Get <slot> value
     *
     * @return int
     */
    public function getSlot(){
      return $this->_get(5);
    }
    
    /**
     * Set <slot> value
     *
     * @param int $value
     * @return \utilpb\SkillPet
     */
    public function setSlot( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <canAdd> has a value
     *
     * @return boolean
     */
    public function hasCanAdd(){
      return $this->_has(6);
    }
    
    /**
     * Clear <canAdd> value
     *
     * @return \utilpb\SkillPet
     */
    public function clearCanAdd(){
      return $this->_clear(6);
    }
    
    /**
     * Get <canAdd> value
     *
     * @return int
     */
    public function getCanAdd(){
      return $this->_get(6);
    }
    
    /**
     * Set <canAdd> value
     *
     * @param int $value
     * @return \utilpb\SkillPet
     */
    public function setCanAdd( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace utilpb {

  class SkillListPet extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $petId = null;
    
    /**  @var \utilpb\SkillPet[]  */
    public $skillList = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SkillListPet');

      // OPTIONAL MESSAGE petId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REPEATED MESSAGE skillList = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "skillList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\SkillPet';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\SkillListPet
     */
    public function clearPetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\SkillListPet
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <skillList> has a value
     *
     * @return boolean
     */
    public function hasSkillList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <skillList> value
     *
     * @return \utilpb\SkillListPet
     */
    public function clearSkillList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <skillList> value
     *
     * @param int $idx
     * @return \utilpb\SkillPet
     */
    public function getSkillList($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <skillList> value
     *
     * @param \utilpb\SkillPet $value
     * @return \utilpb\SkillListPet
     */
    public function setSkillList(\utilpb\SkillPet $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <skillList>
     *
     * @return \utilpb\SkillPet[]
     */
    public function getSkillListList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <skillList>
     *
     * @param \utilpb\SkillPet $value
     * @return \utilpb\SkillListPet
     */
    public function addSkillList(\utilpb\SkillPet $value){
     return $this->_add(2, $value);
    }
  }
}

namespace utilpb {

  class PetRetCode extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $code = 0;
    
    /**  @var int */
    public $flag = null;
    
    /**  @var int */
    public $type = null;
    
    /**  @var int */
    public $level = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PetRetCode');

      // REQUIRED INT32 code = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 flag = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 level = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <code> value
     *
     * @return \utilpb\PetRetCode
     */
    public function clearCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <code> value
     *
     * @return int
     */
    public function getCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <code> value
     *
     * @param int $value
     * @return \utilpb\PetRetCode
     */
    public function setCode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(2);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\PetRetCode
     */
    public function clearFlag(){
      return $this->_clear(2);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(2);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\PetRetCode
     */
    public function setFlag( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\PetRetCode
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\PetRetCode
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(4);
    }
    
    /**
     * Clear <level> value
     *
     * @return \utilpb\PetRetCode
     */
    public function clearLevel(){
      return $this->_clear(4);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(4);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \utilpb\PetRetCode
     */
    public function setLevel( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class ClientPetInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $humanId = null;
    
    /**  @var \utilpb\ComposeID */
    public $petId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.ClientPetInfo');

      // REQUIRED MESSAGE humanId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "humanId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED MESSAGE petId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <humanId> has a value
     *
     * @return boolean
     */
    public function hasHumanId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <humanId> value
     *
     * @return \utilpb\ClientPetInfo
     */
    public function clearHumanId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <humanId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getHumanId(){
      return $this->_get(1);
    }
    
    /**
     * Set <humanId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\ClientPetInfo
     */
    public function setHumanId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\ClientPetInfo
     */
    public function clearPetId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(2);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\ClientPetInfo
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class PetInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\BaseAttrPet */
    public $base = null;
    
    /**  @var \utilpb\CombatAttrAll */
    public $constAttr = null;
    
    /**  @var \utilpb\SkillListPet */
    public $skill = null;
    
    /**  @var \utilpb\PetModelBag */
    public $modelBag = null;
    
    /**  @var \utilpb\ComposeID */
    public $petId = null;
    
    /**  @var \utilpb\ItemInfo[]  */
    public $huntItemList = array();
    
    /**  @var \utilpb\CombatAttrAll */
    public $huamnAttr = null;
    
    /**  @var \utilpb\RealmPet */
    public $newRealm = null;
    
    /**  @var \utilpb\PetEquipBag */
    public $equipBag = null;
    
    /**  @var int */
    public $firstHand = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PetInfo');

      // OPTIONAL MESSAGE base = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "base";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\BaseAttrPet';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE constAttr = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "constAttr";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\CombatAttrAll';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE skill = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "skill";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\SkillListPet';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE modelBag = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "modelBag";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\PetModelBag';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE petId = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REPEATED MESSAGE huntItemList = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "huntItemList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\ItemInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE huamnAttr = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "huamnAttr";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\CombatAttrAll';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE newRealm = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "newRealm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\RealmPet';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE equipBag = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "equipBag";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\PetEquipBag';
      $descriptor->addField($f);

      // OPTIONAL INT32 firstHand = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "firstHand";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <base> has a value
     *
     * @return boolean
     */
    public function hasBase(){
      return $this->_has(1);
    }
    
    /**
     * Clear <base> value
     *
     * @return \utilpb\PetInfo
     */
    public function clearBase(){
      return $this->_clear(1);
    }
    
    /**
     * Get <base> value
     *
     * @return \utilpb\BaseAttrPet
     */
    public function getBase(){
      return $this->_get(1);
    }
    
    /**
     * Set <base> value
     *
     * @param \utilpb\BaseAttrPet $value
     * @return \utilpb\PetInfo
     */
    public function setBase(\utilpb\BaseAttrPet $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <constAttr> has a value
     *
     * @return boolean
     */
    public function hasConstAttr(){
      return $this->_has(2);
    }
    
    /**
     * Clear <constAttr> value
     *
     * @return \utilpb\PetInfo
     */
    public function clearConstAttr(){
      return $this->_clear(2);
    }
    
    /**
     * Get <constAttr> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function getConstAttr(){
      return $this->_get(2);
    }
    
    /**
     * Set <constAttr> value
     *
     * @param \utilpb\CombatAttrAll $value
     * @return \utilpb\PetInfo
     */
    public function setConstAttr(\utilpb\CombatAttrAll $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <skill> has a value
     *
     * @return boolean
     */
    public function hasSkill(){
      return $this->_has(3);
    }
    
    /**
     * Clear <skill> value
     *
     * @return \utilpb\PetInfo
     */
    public function clearSkill(){
      return $this->_clear(3);
    }
    
    /**
     * Get <skill> value
     *
     * @return \utilpb\SkillListPet
     */
    public function getSkill(){
      return $this->_get(3);
    }
    
    /**
     * Set <skill> value
     *
     * @param \utilpb\SkillListPet $value
     * @return \utilpb\PetInfo
     */
    public function setSkill(\utilpb\SkillListPet $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <modelBag> has a value
     *
     * @return boolean
     */
    public function hasModelBag(){
      return $this->_has(4);
    }
    
    /**
     * Clear <modelBag> value
     *
     * @return \utilpb\PetInfo
     */
    public function clearModelBag(){
      return $this->_clear(4);
    }
    
    /**
     * Get <modelBag> value
     *
     * @return \utilpb\PetModelBag
     */
    public function getModelBag(){
      return $this->_get(4);
    }
    
    /**
     * Set <modelBag> value
     *
     * @param \utilpb\PetModelBag $value
     * @return \utilpb\PetInfo
     */
    public function setModelBag(\utilpb\PetModelBag $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\PetInfo
     */
    public function clearPetId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(5);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PetInfo
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <huntItemList> has a value
     *
     * @return boolean
     */
    public function hasHuntItemList(){
      return $this->_has(6);
    }
    
    /**
     * Clear <huntItemList> value
     *
     * @return \utilpb\PetInfo
     */
    public function clearHuntItemList(){
      return $this->_clear(6);
    }
    
    /**
     * Get <huntItemList> value
     *
     * @param int $idx
     * @return \utilpb\ItemInfo
     */
    public function getHuntItemList($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <huntItemList> value
     *
     * @param \utilpb\ItemInfo $value
     * @return \utilpb\PetInfo
     */
    public function setHuntItemList(\utilpb\ItemInfo $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <huntItemList>
     *
     * @return \utilpb\ItemInfo[]
     */
    public function getHuntItemListList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <huntItemList>
     *
     * @param \utilpb\ItemInfo $value
     * @return \utilpb\PetInfo
     */
    public function addHuntItemList(\utilpb\ItemInfo $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <huamnAttr> has a value
     *
     * @return boolean
     */
    public function hasHuamnAttr(){
      return $this->_has(7);
    }
    
    /**
     * Clear <huamnAttr> value
     *
     * @return \utilpb\PetInfo
     */
    public function clearHuamnAttr(){
      return $this->_clear(7);
    }
    
    /**
     * Get <huamnAttr> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function getHuamnAttr(){
      return $this->_get(7);
    }
    
    /**
     * Set <huamnAttr> value
     *
     * @param \utilpb\CombatAttrAll $value
     * @return \utilpb\PetInfo
     */
    public function setHuamnAttr(\utilpb\CombatAttrAll $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <newRealm> has a value
     *
     * @return boolean
     */
    public function hasNewRealm(){
      return $this->_has(8);
    }
    
    /**
     * Clear <newRealm> value
     *
     * @return \utilpb\PetInfo
     */
    public function clearNewRealm(){
      return $this->_clear(8);
    }
    
    /**
     * Get <newRealm> value
     *
     * @return \utilpb\RealmPet
     */
    public function getNewRealm(){
      return $this->_get(8);
    }
    
    /**
     * Set <newRealm> value
     *
     * @param \utilpb\RealmPet $value
     * @return \utilpb\PetInfo
     */
    public function setNewRealm(\utilpb\RealmPet $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <equipBag> has a value
     *
     * @return boolean
     */
    public function hasEquipBag(){
      return $this->_has(9);
    }
    
    /**
     * Clear <equipBag> value
     *
     * @return \utilpb\PetInfo
     */
    public function clearEquipBag(){
      return $this->_clear(9);
    }
    
    /**
     * Get <equipBag> value
     *
     * @return \utilpb\PetEquipBag
     */
    public function getEquipBag(){
      return $this->_get(9);
    }
    
    /**
     * Set <equipBag> value
     *
     * @param \utilpb\PetEquipBag $value
     * @return \utilpb\PetInfo
     */
    public function setEquipBag(\utilpb\PetEquipBag $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <firstHand> has a value
     *
     * @return boolean
     */
    public function hasFirstHand(){
      return $this->_has(10);
    }
    
    /**
     * Clear <firstHand> value
     *
     * @return \utilpb\PetInfo
     */
    public function clearFirstHand(){
      return $this->_clear(10);
    }
    
    /**
     * Get <firstHand> value
     *
     * @return int
     */
    public function getFirstHand(){
      return $this->_get(10);
    }
    
    /**
     * Set <firstHand> value
     *
     * @param int $value
     * @return \utilpb\PetInfo
     */
    public function setFirstHand( $value){
      return $this->_set(10, $value);
    }
  }
}

namespace utilpb {

  class PetInfoList extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $ownerId = null;
    
    /**  @var \utilpb\ComposeID */
    public $warPetId = null;
    
    /**  @var \utilpb\PetInfo[]  */
    public $petList = array();
    
    /**  @var \utilpb\ComposeID */
    public $requesterId = null;
    
    /**  @var \utilpb\ComposeID */
    public $petId = null;
    
    /**  @var int */
    public $merge = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PetInfoList');

      // OPTIONAL MESSAGE ownerId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "ownerId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE warPetId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "warPetId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REPEATED MESSAGE petList = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "petList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\PetInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE requesterId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "requesterId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE petId = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL INT32 merge = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "merge";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <ownerId> has a value
     *
     * @return boolean
     */
    public function hasOwnerId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <ownerId> value
     *
     * @return \utilpb\PetInfoList
     */
    public function clearOwnerId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <ownerId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getOwnerId(){
      return $this->_get(1);
    }
    
    /**
     * Set <ownerId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PetInfoList
     */
    public function setOwnerId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <warPetId> has a value
     *
     * @return boolean
     */
    public function hasWarPetId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <warPetId> value
     *
     * @return \utilpb\PetInfoList
     */
    public function clearWarPetId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <warPetId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getWarPetId(){
      return $this->_get(2);
    }
    
    /**
     * Set <warPetId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PetInfoList
     */
    public function setWarPetId(\utilpb\ComposeID $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <petList> has a value
     *
     * @return boolean
     */
    public function hasPetList(){
      return $this->_has(3);
    }
    
    /**
     * Clear <petList> value
     *
     * @return \utilpb\PetInfoList
     */
    public function clearPetList(){
      return $this->_clear(3);
    }
    
    /**
     * Get <petList> value
     *
     * @param int $idx
     * @return \utilpb\PetInfo
     */
    public function getPetList($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <petList> value
     *
     * @param \utilpb\PetInfo $value
     * @return \utilpb\PetInfoList
     */
    public function setPetList(\utilpb\PetInfo $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <petList>
     *
     * @return \utilpb\PetInfo[]
     */
    public function getPetListList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <petList>
     *
     * @param \utilpb\PetInfo $value
     * @return \utilpb\PetInfoList
     */
    public function addPetList(\utilpb\PetInfo $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <requesterId> has a value
     *
     * @return boolean
     */
    public function hasRequesterId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <requesterId> value
     *
     * @return \utilpb\PetInfoList
     */
    public function clearRequesterId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <requesterId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getRequesterId(){
      return $this->_get(4);
    }
    
    /**
     * Set <requesterId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PetInfoList
     */
    public function setRequesterId(\utilpb\ComposeID $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\PetInfoList
     */
    public function clearPetId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(5);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PetInfoList
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <merge> has a value
     *
     * @return boolean
     */
    public function hasMerge(){
      return $this->_has(6);
    }
    
    /**
     * Clear <merge> value
     *
     * @return \utilpb\PetInfoList
     */
    public function clearMerge(){
      return $this->_clear(6);
    }
    
    /**
     * Get <merge> value
     *
     * @return int
     */
    public function getMerge(){
      return $this->_get(6);
    }
    
    /**
     * Set <merge> value
     *
     * @param int $value
     * @return \utilpb\PetInfoList
     */
    public function setMerge( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace utilpb {

  class WarInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $petId = null;
    
    /**  @var int */
    public $state = null;
    
    /**  @var int */
    public $eCode = null;
    
    /**  @var int */
    public $force = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.WarInfo');

      // REQUIRED MESSAGE petId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED INT32 state = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 eCode = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "eCode";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 force = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "force";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\WarInfo
     */
    public function clearPetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\WarInfo
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(2);
    }
    
    /**
     * Clear <state> value
     *
     * @return \utilpb\WarInfo
     */
    public function clearState(){
      return $this->_clear(2);
    }
    
    /**
     * Get <state> value
     *
     * @return int
     */
    public function getState(){
      return $this->_get(2);
    }
    
    /**
     * Set <state> value
     *
     * @param int $value
     * @return \utilpb\WarInfo
     */
    public function setState( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <eCode> has a value
     *
     * @return boolean
     */
    public function hasECode(){
      return $this->_has(3);
    }
    
    /**
     * Clear <eCode> value
     *
     * @return \utilpb\WarInfo
     */
    public function clearECode(){
      return $this->_clear(3);
    }
    
    /**
     * Get <eCode> value
     *
     * @return int
     */
    public function getECode(){
      return $this->_get(3);
    }
    
    /**
     * Set <eCode> value
     *
     * @param int $value
     * @return \utilpb\WarInfo
     */
    public function setECode( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <force> has a value
     *
     * @return boolean
     */
    public function hasForce(){
      return $this->_has(4);
    }
    
    /**
     * Clear <force> value
     *
     * @return \utilpb\WarInfo
     */
    public function clearForce(){
      return $this->_clear(4);
    }
    
    /**
     * Get <force> value
     *
     * @return int
     */
    public function getForce(){
      return $this->_get(4);
    }
    
    /**
     * Set <force> value
     *
     * @param int $value
     * @return \utilpb\WarInfo
     */
    public function setForce( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class UpdateExpPet extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $exp = null;
    
    /**  @var int */
    public $maxexp = null;
    
    /**  @var int */
    public $addexp = null;
    
    /**  @var \utilpb\ComposeID */
    public $id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.UpdateExpPet');

      // REQUIRED INT32 exp = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "exp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 maxexp = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "maxexp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 addexp = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "addexp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <exp> has a value
     *
     * @return boolean
     */
    public function hasExp(){
      return $this->_has(1);
    }
    
    /**
     * Clear <exp> value
     *
     * @return \utilpb\UpdateExpPet
     */
    public function clearExp(){
      return $this->_clear(1);
    }
    
    /**
     * Get <exp> value
     *
     * @return int
     */
    public function getExp(){
      return $this->_get(1);
    }
    
    /**
     * Set <exp> value
     *
     * @param int $value
     * @return \utilpb\UpdateExpPet
     */
    public function setExp( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <maxexp> has a value
     *
     * @return boolean
     */
    public function hasMaxexp(){
      return $this->_has(2);
    }
    
    /**
     * Clear <maxexp> value
     *
     * @return \utilpb\UpdateExpPet
     */
    public function clearMaxexp(){
      return $this->_clear(2);
    }
    
    /**
     * Get <maxexp> value
     *
     * @return int
     */
    public function getMaxexp(){
      return $this->_get(2);
    }
    
    /**
     * Set <maxexp> value
     *
     * @param int $value
     * @return \utilpb\UpdateExpPet
     */
    public function setMaxexp( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <addexp> has a value
     *
     * @return boolean
     */
    public function hasAddexp(){
      return $this->_has(3);
    }
    
    /**
     * Clear <addexp> value
     *
     * @return \utilpb\UpdateExpPet
     */
    public function clearAddexp(){
      return $this->_clear(3);
    }
    
    /**
     * Get <addexp> value
     *
     * @return int
     */
    public function getAddexp(){
      return $this->_get(3);
    }
    
    /**
     * Set <addexp> value
     *
     * @param int $value
     * @return \utilpb\UpdateExpPet
     */
    public function setAddexp( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\UpdateExpPet
     */
    public function clearId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(4);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\UpdateExpPet
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class PetVariableAttr extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $petId = null;
    
    /**  @var int */
    public $hp = null;
    
    /**  @var int */
    public $mp = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PetVariableAttr');

      // REQUIRED MESSAGE petId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL INT32 hp = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "hp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 mp = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "mp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\PetVariableAttr
     */
    public function clearPetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PetVariableAttr
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <hp> has a value
     *
     * @return boolean
     */
    public function hasHp(){
      return $this->_has(2);
    }
    
    /**
     * Clear <hp> value
     *
     * @return \utilpb\PetVariableAttr
     */
    public function clearHp(){
      return $this->_clear(2);
    }
    
    /**
     * Get <hp> value
     *
     * @return int
     */
    public function getHp(){
      return $this->_get(2);
    }
    
    /**
     * Set <hp> value
     *
     * @param int $value
     * @return \utilpb\PetVariableAttr
     */
    public function setHp( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <mp> has a value
     *
     * @return boolean
     */
    public function hasMp(){
      return $this->_has(3);
    }
    
    /**
     * Clear <mp> value
     *
     * @return \utilpb\PetVariableAttr
     */
    public function clearMp(){
      return $this->_clear(3);
    }
    
    /**
     * Get <mp> value
     *
     * @return int
     */
    public function getMp(){
      return $this->_get(3);
    }
    
    /**
     * Set <mp> value
     *
     * @param int $value
     * @return \utilpb\PetVariableAttr
     */
    public function setMp( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class PetName extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $petId = null;
    
    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PetName');

      // REQUIRED MESSAGE petId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\PetName
     */
    public function clearPetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PetName
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\PetName
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\PetName
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class PetAddPullulate extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $petId = null;
    
    /**  @var int */
    public $type = null;
    
    /**  @var int */
    public $buy = null;
    
    /**  @var int */
    public $count = 1;
    
    /**  @var int */
    public $protect = null;
    
    /**  @var int */
    public $protectCount = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PetAddPullulate');

      // REQUIRED MESSAGE petId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED INT32 type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 buy = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "buy";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 count = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 1;
      $descriptor->addField($f);

      // OPTIONAL INT32 protect = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "protect";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 protectCount = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "protectCount";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\PetAddPullulate
     */
    public function clearPetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PetAddPullulate
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\PetAddPullulate
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\PetAddPullulate
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <buy> has a value
     *
     * @return boolean
     */
    public function hasBuy(){
      return $this->_has(3);
    }
    
    /**
     * Clear <buy> value
     *
     * @return \utilpb\PetAddPullulate
     */
    public function clearBuy(){
      return $this->_clear(3);
    }
    
    /**
     * Get <buy> value
     *
     * @return int
     */
    public function getBuy(){
      return $this->_get(3);
    }
    
    /**
     * Set <buy> value
     *
     * @param int $value
     * @return \utilpb\PetAddPullulate
     */
    public function setBuy( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(4);
    }
    
    /**
     * Clear <count> value
     *
     * @return \utilpb\PetAddPullulate
     */
    public function clearCount(){
      return $this->_clear(4);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(4);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \utilpb\PetAddPullulate
     */
    public function setCount( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <protect> has a value
     *
     * @return boolean
     */
    public function hasProtect(){
      return $this->_has(5);
    }
    
    /**
     * Clear <protect> value
     *
     * @return \utilpb\PetAddPullulate
     */
    public function clearProtect(){
      return $this->_clear(5);
    }
    
    /**
     * Get <protect> value
     *
     * @return int
     */
    public function getProtect(){
      return $this->_get(5);
    }
    
    /**
     * Set <protect> value
     *
     * @param int $value
     * @return \utilpb\PetAddPullulate
     */
    public function setProtect( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <protectCount> has a value
     *
     * @return boolean
     */
    public function hasProtectCount(){
      return $this->_has(6);
    }
    
    /**
     * Clear <protectCount> value
     *
     * @return \utilpb\PetAddPullulate
     */
    public function clearProtectCount(){
      return $this->_clear(6);
    }
    
    /**
     * Get <protectCount> value
     *
     * @return int
     */
    public function getProtectCount(){
      return $this->_get(6);
    }
    
    /**
     * Set <protectCount> value
     *
     * @param int $value
     * @return \utilpb\PetAddPullulate
     */
    public function setProtectCount( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace utilpb {

  class PetCommonSkill extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $petId = null;
    
    /**  @var int */
    public $skillId = null;
    
    /**  @var int */
    public $level = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PetCommonSkill');

      // REQUIRED MESSAGE petId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED INT32 skillId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "skillId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 level = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\PetCommonSkill
     */
    public function clearPetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PetCommonSkill
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <skillId> has a value
     *
     * @return boolean
     */
    public function hasSkillId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <skillId> value
     *
     * @return \utilpb\PetCommonSkill
     */
    public function clearSkillId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <skillId> value
     *
     * @return int
     */
    public function getSkillId(){
      return $this->_get(2);
    }
    
    /**
     * Set <skillId> value
     *
     * @param int $value
     * @return \utilpb\PetCommonSkill
     */
    public function setSkillId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(3);
    }
    
    /**
     * Clear <level> value
     *
     * @return \utilpb\PetCommonSkill
     */
    public function clearLevel(){
      return $this->_clear(3);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(3);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \utilpb\PetCommonSkill
     */
    public function setLevel( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class PetCommonSkillMiji extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $petId = null;
    
    /**  @var int */
    public $skillId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PetCommonSkillMiji');

      // REQUIRED MESSAGE petId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED INT32 skillId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "skillId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\PetCommonSkillMiji
     */
    public function clearPetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PetCommonSkillMiji
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <skillId> has a value
     *
     * @return boolean
     */
    public function hasSkillId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <skillId> value
     *
     * @return \utilpb\PetCommonSkillMiji
     */
    public function clearSkillId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <skillId> value
     *
     * @return int
     */
    public function getSkillId(){
      return $this->_get(2);
    }
    
    /**
     * Set <skillId> value
     *
     * @param int $value
     * @return \utilpb\PetCommonSkillMiji
     */
    public function setSkillId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class PetAddRealm extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $petId = null;
    
    /**  @var int */
    public $rank = null;
    
    /**  @var int */
    public $buy = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PetAddRealm');

      // REQUIRED MESSAGE petId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL INT32 rank = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "rank";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED INT32 buy = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "buy";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\PetAddRealm
     */
    public function clearPetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PetAddRealm
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <rank> has a value
     *
     * @return boolean
     */
    public function hasRank(){
      return $this->_has(2);
    }
    
    /**
     * Clear <rank> value
     *
     * @return \utilpb\PetAddRealm
     */
    public function clearRank(){
      return $this->_clear(2);
    }
    
    /**
     * Get <rank> value
     *
     * @return int
     */
    public function getRank(){
      return $this->_get(2);
    }
    
    /**
     * Set <rank> value
     *
     * @param int $value
     * @return \utilpb\PetAddRealm
     */
    public function setRank( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <buy> has a value
     *
     * @return boolean
     */
    public function hasBuy(){
      return $this->_has(3);
    }
    
    /**
     * Clear <buy> value
     *
     * @return \utilpb\PetAddRealm
     */
    public function clearBuy(){
      return $this->_clear(3);
    }
    
    /**
     * Get <buy> value
     *
     * @return int
     */
    public function getBuy(){
      return $this->_get(3);
    }
    
    /**
     * Set <buy> value
     *
     * @param int $value
     * @return \utilpb\PetAddRealm
     */
    public function setBuy( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class UpdatePetRealm extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $petId = null;
    
    /**  @var \utilpb\RealmPet */
    public $newRealm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.UpdatePetRealm');

      // REQUIRED MESSAGE petId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE newRealm = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "newRealm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\RealmPet';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\UpdatePetRealm
     */
    public function clearPetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\UpdatePetRealm
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <newRealm> has a value
     *
     * @return boolean
     */
    public function hasNewRealm(){
      return $this->_has(2);
    }
    
    /**
     * Clear <newRealm> value
     *
     * @return \utilpb\UpdatePetRealm
     */
    public function clearNewRealm(){
      return $this->_clear(2);
    }
    
    /**
     * Get <newRealm> value
     *
     * @return \utilpb\RealmPet
     */
    public function getNewRealm(){
      return $this->_get(2);
    }
    
    /**
     * Set <newRealm> value
     *
     * @param \utilpb\RealmPet $value
     * @return \utilpb\UpdatePetRealm
     */
    public function setNewRealm(\utilpb\RealmPet $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class PetAttribute extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $petId = null;
    
    /**  @var \utilpb\CombatAttrAll */
    public $constattr = null;
    
    /**  @var int */
    public $fight = null;
    
    /**  @var \utilpb\CombatAttrAll */
    public $humanAttr = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PetAttribute');

      // REQUIRED MESSAGE petId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED MESSAGE constattr = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "constattr";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\CombatAttrAll';
      $descriptor->addField($f);

      // REQUIRED INT32 fight = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "fight";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE humanAttr = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "humanAttr";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\CombatAttrAll';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\PetAttribute
     */
    public function clearPetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PetAttribute
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <constattr> has a value
     *
     * @return boolean
     */
    public function hasConstattr(){
      return $this->_has(2);
    }
    
    /**
     * Clear <constattr> value
     *
     * @return \utilpb\PetAttribute
     */
    public function clearConstattr(){
      return $this->_clear(2);
    }
    
    /**
     * Get <constattr> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function getConstattr(){
      return $this->_get(2);
    }
    
    /**
     * Set <constattr> value
     *
     * @param \utilpb\CombatAttrAll $value
     * @return \utilpb\PetAttribute
     */
    public function setConstattr(\utilpb\CombatAttrAll $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <fight> has a value
     *
     * @return boolean
     */
    public function hasFight(){
      return $this->_has(3);
    }
    
    /**
     * Clear <fight> value
     *
     * @return \utilpb\PetAttribute
     */
    public function clearFight(){
      return $this->_clear(3);
    }
    
    /**
     * Get <fight> value
     *
     * @return int
     */
    public function getFight(){
      return $this->_get(3);
    }
    
    /**
     * Set <fight> value
     *
     * @param int $value
     * @return \utilpb\PetAttribute
     */
    public function setFight( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <humanAttr> has a value
     *
     * @return boolean
     */
    public function hasHumanAttr(){
      return $this->_has(4);
    }
    
    /**
     * Clear <humanAttr> value
     *
     * @return \utilpb\PetAttribute
     */
    public function clearHumanAttr(){
      return $this->_clear(4);
    }
    
    /**
     * Get <humanAttr> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function getHumanAttr(){
      return $this->_get(4);
    }
    
    /**
     * Set <humanAttr> value
     *
     * @param \utilpb\CombatAttrAll $value
     * @return \utilpb\PetAttribute
     */
    public function setHumanAttr(\utilpb\CombatAttrAll $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class PetModelBag extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $petId = null;
    
    /**  @var int[]  */
    public $modelList = array();
    
    /**  @var int */
    public $model = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PetModelBag');

      // OPTIONAL MESSAGE petId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REPEATED INT32 modelList = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "modelList";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL INT32 model = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "model";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\PetModelBag
     */
    public function clearPetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PetModelBag
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <modelList> has a value
     *
     * @return boolean
     */
    public function hasModelList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <modelList> value
     *
     * @return \utilpb\PetModelBag
     */
    public function clearModelList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <modelList> value
     *
     * @param int $idx
     * @return int
     */
    public function getModelList($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <modelList> value
     *
     * @param int $value
     * @return \utilpb\PetModelBag
     */
    public function setModelList( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <modelList>
     *
     * @return int[]
     */
    public function getModelListList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <modelList>
     *
     * @param int $value
     * @return \utilpb\PetModelBag
     */
    public function addModelList( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <model> has a value
     *
     * @return boolean
     */
    public function hasModel(){
      return $this->_has(3);
    }
    
    /**
     * Clear <model> value
     *
     * @return \utilpb\PetModelBag
     */
    public function clearModel(){
      return $this->_clear(3);
    }
    
    /**
     * Get <model> value
     *
     * @return int
     */
    public function getModel(){
      return $this->_get(3);
    }
    
    /**
     * Set <model> value
     *
     * @param int $value
     * @return \utilpb\PetModelBag
     */
    public function setModel( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class SelectModel extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $petId = null;
    
    /**  @var int */
    public $model = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SelectModel');

      // OPTIONAL MESSAGE petId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL INT32 model = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "model";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\SelectModel
     */
    public function clearPetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\SelectModel
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <model> has a value
     *
     * @return boolean
     */
    public function hasModel(){
      return $this->_has(2);
    }
    
    /**
     * Clear <model> value
     *
     * @return \utilpb\SelectModel
     */
    public function clearModel(){
      return $this->_clear(2);
    }
    
    /**
     * Get <model> value
     *
     * @return int
     */
    public function getModel(){
      return $this->_get(2);
    }
    
    /**
     * Set <model> value
     *
     * @param int $value
     * @return \utilpb\SelectModel
     */
    public function setModel( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class RefineModel extends \DrSlump\Protobuf\Message {

    /**  @var unknown */
    public $ = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.RefineModel');

      //    = 
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = ;
      $f->name      = "";
      $f->type      = \DrSlump\Protobuf::TYPE_;
      $f->rule      = \DrSlump\Protobuf::RULE_;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <> has a value
     *
     * @return boolean
     */
    public function has(){
      return $this->_has();
    }
    
    /**
     * Clear <> value
     *
     * @return \utilpb\RefineModel
     */
    public function clear(){
      return $this->_clear();
    }
    
    /**
     * Get <> value
     *
     * @return unknown
     */
    public function get(){
      return $this->_get();
    }
    
    /**
     * Set <> value
     *
     * @param unknown $value
     * @return \utilpb\RefineModel
     */
    public function set( $value){
      return $this->_set(, $value);
    }
  }
}

