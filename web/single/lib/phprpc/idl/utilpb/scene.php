<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/scene.proto
//   Date: 2014-12-19 08:23:08

namespace utilpb {

  class ScenePos extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $x = null;
    
    /**  @var int */
    public $y = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.ScenePos');

      // REQUIRED INT32 x = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "x";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 y = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "y";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <x> has a value
     *
     * @return boolean
     */
    public function hasX(){
      return $this->_has(1);
    }
    
    /**
     * Clear <x> value
     *
     * @return \utilpb\ScenePos
     */
    public function clearX(){
      return $this->_clear(1);
    }
    
    /**
     * Get <x> value
     *
     * @return int
     */
    public function getX(){
      return $this->_get(1);
    }
    
    /**
     * Set <x> value
     *
     * @param int $value
     * @return \utilpb\ScenePos
     */
    public function setX( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <y> has a value
     *
     * @return boolean
     */
    public function hasY(){
      return $this->_has(2);
    }
    
    /**
     * Clear <y> value
     *
     * @return \utilpb\ScenePos
     */
    public function clearY(){
      return $this->_clear(2);
    }
    
    /**
     * Get <y> value
     *
     * @return int
     */
    public function getY(){
      return $this->_get(2);
    }
    
    /**
     * Set <y> value
     *
     * @param int $value
     * @return \utilpb\ScenePos
     */
    public function setY( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class ScenePosVideo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $x = null;
    
    /**  @var int */
    public $y = null;
    
    /**  @var int */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.ScenePosVideo');

      // REQUIRED INT32 x = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "x";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 y = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "y";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <x> has a value
     *
     * @return boolean
     */
    public function hasX(){
      return $this->_has(1);
    }
    
    /**
     * Clear <x> value
     *
     * @return \utilpb\ScenePosVideo
     */
    public function clearX(){
      return $this->_clear(1);
    }
    
    /**
     * Get <x> value
     *
     * @return int
     */
    public function getX(){
      return $this->_get(1);
    }
    
    /**
     * Set <x> value
     *
     * @param int $value
     * @return \utilpb\ScenePosVideo
     */
    public function setX( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <y> has a value
     *
     * @return boolean
     */
    public function hasY(){
      return $this->_has(2);
    }
    
    /**
     * Clear <y> value
     *
     * @return \utilpb\ScenePosVideo
     */
    public function clearY(){
      return $this->_clear(2);
    }
    
    /**
     * Get <y> value
     *
     * @return int
     */
    public function getY(){
      return $this->_get(2);
    }
    
    /**
     * Set <y> value
     *
     * @param int $value
     * @return \utilpb\ScenePosVideo
     */
    public function setY( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\ScenePosVideo
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\ScenePosVideo
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class SceneID extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $entryId = null;
    
    /**  @var string */
    public $copyId = null;
    
    /**  @var int */
    public $mapId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SceneID');

      // REQUIRED INT32 entryId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entryId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING copyId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "copyId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 mapId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "mapId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entryId> has a value
     *
     * @return boolean
     */
    public function hasEntryId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entryId> value
     *
     * @return \utilpb\SceneID
     */
    public function clearEntryId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entryId> value
     *
     * @return int
     */
    public function getEntryId(){
      return $this->_get(1);
    }
    
    /**
     * Set <entryId> value
     *
     * @param int $value
     * @return \utilpb\SceneID
     */
    public function setEntryId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <copyId> has a value
     *
     * @return boolean
     */
    public function hasCopyId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <copyId> value
     *
     * @return \utilpb\SceneID
     */
    public function clearCopyId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <copyId> value
     *
     * @return string
     */
    public function getCopyId(){
      return $this->_get(2);
    }
    
    /**
     * Set <copyId> value
     *
     * @param string $value
     * @return \utilpb\SceneID
     */
    public function setCopyId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <mapId> has a value
     *
     * @return boolean
     */
    public function hasMapId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <mapId> value
     *
     * @return \utilpb\SceneID
     */
    public function clearMapId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <mapId> value
     *
     * @return int
     */
    public function getMapId(){
      return $this->_get(3);
    }
    
    /**
     * Set <mapId> value
     *
     * @param int $value
     * @return \utilpb\SceneID
     */
    public function setMapId( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class SceneInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\SceneID */
    public $sceneId = null;
    
    /**  @var int */
    public $x = null;
    
    /**  @var int */
    public $y = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SceneInfo');

      // REQUIRED MESSAGE sceneId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sceneId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\SceneID';
      $descriptor->addField($f);

      // REQUIRED INT32 x = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "x";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 y = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "y";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sceneId> has a value
     *
     * @return boolean
     */
    public function hasSceneId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sceneId> value
     *
     * @return \utilpb\SceneInfo
     */
    public function clearSceneId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sceneId> value
     *
     * @return \utilpb\SceneID
     */
    public function getSceneId(){
      return $this->_get(1);
    }
    
    /**
     * Set <sceneId> value
     *
     * @param \utilpb\SceneID $value
     * @return \utilpb\SceneInfo
     */
    public function setSceneId(\utilpb\SceneID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <x> has a value
     *
     * @return boolean
     */
    public function hasX(){
      return $this->_has(2);
    }
    
    /**
     * Clear <x> value
     *
     * @return \utilpb\SceneInfo
     */
    public function clearX(){
      return $this->_clear(2);
    }
    
    /**
     * Get <x> value
     *
     * @return int
     */
    public function getX(){
      return $this->_get(2);
    }
    
    /**
     * Set <x> value
     *
     * @param int $value
     * @return \utilpb\SceneInfo
     */
    public function setX( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <y> has a value
     *
     * @return boolean
     */
    public function hasY(){
      return $this->_has(3);
    }
    
    /**
     * Clear <y> value
     *
     * @return \utilpb\SceneInfo
     */
    public function clearY(){
      return $this->_clear(3);
    }
    
    /**
     * Get <y> value
     *
     * @return int
     */
    public function getY(){
      return $this->_get(3);
    }
    
    /**
     * Set <y> value
     *
     * @param int $value
     * @return \utilpb\SceneInfo
     */
    public function setY( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class SceneObjInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $id = null;
    
    /**  @var \utilpb\SceneID */
    public $sceneId = null;
    
    /**  @var int */
    public $x = null;
    
    /**  @var int */
    public $y = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SceneObjInfo');

      // REQUIRED MESSAGE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED MESSAGE sceneId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sceneId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\SceneID';
      $descriptor->addField($f);

      // REQUIRED INT32 x = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "x";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 y = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "y";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\SceneObjInfo
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\SceneObjInfo
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sceneId> has a value
     *
     * @return boolean
     */
    public function hasSceneId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sceneId> value
     *
     * @return \utilpb\SceneObjInfo
     */
    public function clearSceneId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sceneId> value
     *
     * @return \utilpb\SceneID
     */
    public function getSceneId(){
      return $this->_get(2);
    }
    
    /**
     * Set <sceneId> value
     *
     * @param \utilpb\SceneID $value
     * @return \utilpb\SceneObjInfo
     */
    public function setSceneId(\utilpb\SceneID $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <x> has a value
     *
     * @return boolean
     */
    public function hasX(){
      return $this->_has(3);
    }
    
    /**
     * Clear <x> value
     *
     * @return \utilpb\SceneObjInfo
     */
    public function clearX(){
      return $this->_clear(3);
    }
    
    /**
     * Get <x> value
     *
     * @return int
     */
    public function getX(){
      return $this->_get(3);
    }
    
    /**
     * Set <x> value
     *
     * @param int $value
     * @return \utilpb\SceneObjInfo
     */
    public function setX( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <y> has a value
     *
     * @return boolean
     */
    public function hasY(){
      return $this->_has(4);
    }
    
    /**
     * Clear <y> value
     *
     * @return \utilpb\SceneObjInfo
     */
    public function clearY(){
      return $this->_clear(4);
    }
    
    /**
     * Get <y> value
     *
     * @return int
     */
    public function getY(){
      return $this->_get(4);
    }
    
    /**
     * Set <y> value
     *
     * @param int $value
     * @return \utilpb\SceneObjInfo
     */
    public function setY( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class SceneObjInfoList extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\SceneObjInfo[]  */
    public $sceneObj = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SceneObjInfoList');

      // REPEATED MESSAGE sceneObj = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sceneObj";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\SceneObjInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sceneObj> has a value
     *
     * @return boolean
     */
    public function hasSceneObj(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sceneObj> value
     *
     * @return \utilpb\SceneObjInfoList
     */
    public function clearSceneObj(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sceneObj> value
     *
     * @param int $idx
     * @return \utilpb\SceneObjInfo
     */
    public function getSceneObj($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <sceneObj> value
     *
     * @param \utilpb\SceneObjInfo $value
     * @return \utilpb\SceneObjInfoList
     */
    public function setSceneObj(\utilpb\SceneObjInfo $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <sceneObj>
     *
     * @return \utilpb\SceneObjInfo[]
     */
    public function getSceneObjList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <sceneObj>
     *
     * @param \utilpb\SceneObjInfo $value
     * @return \utilpb\SceneObjInfoList
     */
    public function addSceneObj(\utilpb\SceneObjInfo $value){
     return $this->_add(1, $value);
    }
  }
}

namespace utilpb {

  class WalkerReport extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $walkerOcc = null;
    
    /**  @var int */
    public $left = null;
    
    /**  @var int */
    public $total = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.WalkerReport');

      // REQUIRED INT32 walkerOcc = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "walkerOcc";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 left = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "left";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 total = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "total";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <walkerOcc> has a value
     *
     * @return boolean
     */
    public function hasWalkerOcc(){
      return $this->_has(1);
    }
    
    /**
     * Clear <walkerOcc> value
     *
     * @return \utilpb\WalkerReport
     */
    public function clearWalkerOcc(){
      return $this->_clear(1);
    }
    
    /**
     * Get <walkerOcc> value
     *
     * @return int
     */
    public function getWalkerOcc(){
      return $this->_get(1);
    }
    
    /**
     * Set <walkerOcc> value
     *
     * @param int $value
     * @return \utilpb\WalkerReport
     */
    public function setWalkerOcc( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <left> has a value
     *
     * @return boolean
     */
    public function hasLeft(){
      return $this->_has(2);
    }
    
    /**
     * Clear <left> value
     *
     * @return \utilpb\WalkerReport
     */
    public function clearLeft(){
      return $this->_clear(2);
    }
    
    /**
     * Get <left> value
     *
     * @return int
     */
    public function getLeft(){
      return $this->_get(2);
    }
    
    /**
     * Set <left> value
     *
     * @param int $value
     * @return \utilpb\WalkerReport
     */
    public function setLeft( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <total> has a value
     *
     * @return boolean
     */
    public function hasTotal(){
      return $this->_has(3);
    }
    
    /**
     * Clear <total> value
     *
     * @return \utilpb\WalkerReport
     */
    public function clearTotal(){
      return $this->_clear(3);
    }
    
    /**
     * Get <total> value
     *
     * @return int
     */
    public function getTotal(){
      return $this->_get(3);
    }
    
    /**
     * Set <total> value
     *
     * @param int $value
     * @return \utilpb\WalkerReport
     */
    public function setTotal( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class FbTimesReq extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $id = null;
    
    /**  @var int */
    public $entryId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.FbTimesReq');

      // REQUIRED MESSAGE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED INT32 entryId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "entryId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\FbTimesReq
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\FbTimesReq
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <entryId> has a value
     *
     * @return boolean
     */
    public function hasEntryId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <entryId> value
     *
     * @return \utilpb\FbTimesReq
     */
    public function clearEntryId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <entryId> value
     *
     * @return int
     */
    public function getEntryId(){
      return $this->_get(2);
    }
    
    /**
     * Set <entryId> value
     *
     * @param int $value
     * @return \utilpb\FbTimesReq
     */
    public function setEntryId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class FbTimesListReq extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\FbTimesReq[]  */
    public $querys = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.FbTimesListReq');

      // REPEATED MESSAGE querys = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "querys";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\FbTimesReq';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <querys> has a value
     *
     * @return boolean
     */
    public function hasQuerys(){
      return $this->_has(1);
    }
    
    /**
     * Clear <querys> value
     *
     * @return \utilpb\FbTimesListReq
     */
    public function clearQuerys(){
      return $this->_clear(1);
    }
    
    /**
     * Get <querys> value
     *
     * @param int $idx
     * @return \utilpb\FbTimesReq
     */
    public function getQuerys($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <querys> value
     *
     * @param \utilpb\FbTimesReq $value
     * @return \utilpb\FbTimesListReq
     */
    public function setQuerys(\utilpb\FbTimesReq $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <querys>
     *
     * @return \utilpb\FbTimesReq[]
     */
    public function getQuerysList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <querys>
     *
     * @param \utilpb\FbTimesReq $value
     * @return \utilpb\FbTimesListReq
     */
    public function addQuerys(\utilpb\FbTimesReq $value){
     return $this->_add(1, $value);
    }
  }
}

namespace utilpb {

  class FbTimes extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $id = null;
    
    /**  @var int */
    public $entryId = null;
    
    /**  @var int */
    public $times = null;
    
    /**  @var float */
    public $tm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.FbTimes');

      // REQUIRED MESSAGE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED INT32 entryId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "entryId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 times = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "times";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE tm = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "tm";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\FbTimes
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\FbTimes
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <entryId> has a value
     *
     * @return boolean
     */
    public function hasEntryId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <entryId> value
     *
     * @return \utilpb\FbTimes
     */
    public function clearEntryId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <entryId> value
     *
     * @return int
     */
    public function getEntryId(){
      return $this->_get(2);
    }
    
    /**
     * Set <entryId> value
     *
     * @param int $value
     * @return \utilpb\FbTimes
     */
    public function setEntryId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <times> has a value
     *
     * @return boolean
     */
    public function hasTimes(){
      return $this->_has(3);
    }
    
    /**
     * Clear <times> value
     *
     * @return \utilpb\FbTimes
     */
    public function clearTimes(){
      return $this->_clear(3);
    }
    
    /**
     * Get <times> value
     *
     * @return int
     */
    public function getTimes(){
      return $this->_get(3);
    }
    
    /**
     * Set <times> value
     *
     * @param int $value
     * @return \utilpb\FbTimes
     */
    public function setTimes( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <tm> has a value
     *
     * @return boolean
     */
    public function hasTm(){
      return $this->_has(4);
    }
    
    /**
     * Clear <tm> value
     *
     * @return \utilpb\FbTimes
     */
    public function clearTm(){
      return $this->_clear(4);
    }
    
    /**
     * Get <tm> value
     *
     * @return float
     */
    public function getTm(){
      return $this->_get(4);
    }
    
    /**
     * Set <tm> value
     *
     * @param float $value
     * @return \utilpb\FbTimes
     */
    public function setTm( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class CrossBossStatus extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $status = null;
    
    /**  @var int */
    public $entryid = null;
    
    /**  @var int */
    public $level = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CrossBossStatus');

      // REQUIRED INT32 status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 entryid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "entryid";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 level = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \utilpb\CrossBossStatus
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return int
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param int $value
     * @return \utilpb\CrossBossStatus
     */
    public function setStatus( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <entryid> has a value
     *
     * @return boolean
     */
    public function hasEntryid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <entryid> value
     *
     * @return \utilpb\CrossBossStatus
     */
    public function clearEntryid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <entryid> value
     *
     * @return int
     */
    public function getEntryid(){
      return $this->_get(2);
    }
    
    /**
     * Set <entryid> value
     *
     * @param int $value
     * @return \utilpb\CrossBossStatus
     */
    public function setEntryid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(3);
    }
    
    /**
     * Clear <level> value
     *
     * @return \utilpb\CrossBossStatus
     */
    public function clearLevel(){
      return $this->_clear(3);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(3);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \utilpb\CrossBossStatus
     */
    public function setLevel( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class CrossBossStatuses extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\CrossBossStatus[]  */
    public $status = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CrossBossStatuses');

      // REPEATED MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\CrossBossStatus';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \utilpb\CrossBossStatuses
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @param int $idx
     * @return \utilpb\CrossBossStatus
     */
    public function getStatus($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <status> value
     *
     * @param \utilpb\CrossBossStatus $value
     * @return \utilpb\CrossBossStatuses
     */
    public function setStatus(\utilpb\CrossBossStatus $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <status>
     *
     * @return \utilpb\CrossBossStatus[]
     */
    public function getStatusList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <status>
     *
     * @param \utilpb\CrossBossStatus $value
     * @return \utilpb\CrossBossStatuses
     */
    public function addStatus(\utilpb\CrossBossStatus $value){
     return $this->_add(1, $value);
    }
  }
}

namespace utilpb {

  class FbExitInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $entryId = null;
    
    /**  @var string */
    public $copyId = null;
    
    /**  @var int */
    public $mapId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.FbExitInfo');

      // OPTIONAL INT32 entryId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entryId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING copyId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "copyId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 mapId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "mapId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entryId> has a value
     *
     * @return boolean
     */
    public function hasEntryId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entryId> value
     *
     * @return \utilpb\FbExitInfo
     */
    public function clearEntryId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entryId> value
     *
     * @return int
     */
    public function getEntryId(){
      return $this->_get(1);
    }
    
    /**
     * Set <entryId> value
     *
     * @param int $value
     * @return \utilpb\FbExitInfo
     */
    public function setEntryId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <copyId> has a value
     *
     * @return boolean
     */
    public function hasCopyId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <copyId> value
     *
     * @return \utilpb\FbExitInfo
     */
    public function clearCopyId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <copyId> value
     *
     * @return string
     */
    public function getCopyId(){
      return $this->_get(2);
    }
    
    /**
     * Set <copyId> value
     *
     * @param string $value
     * @return \utilpb\FbExitInfo
     */
    public function setCopyId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <mapId> has a value
     *
     * @return boolean
     */
    public function hasMapId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <mapId> value
     *
     * @return \utilpb\FbExitInfo
     */
    public function clearMapId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <mapId> value
     *
     * @return int
     */
    public function getMapId(){
      return $this->_get(3);
    }
    
    /**
     * Set <mapId> value
     *
     * @param int $value
     * @return \utilpb\FbExitInfo
     */
    public function setMapId( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class C2oPlantOper extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $landId = null;
    
    /**  @var int */
    public $oper = null;
    
    /**  @var int */
    public $seedId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.C2oPlantOper');

      // REQUIRED INT32 landId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "landId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 oper = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "oper";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 seedId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "seedId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <landId> has a value
     *
     * @return boolean
     */
    public function hasLandId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <landId> value
     *
     * @return \utilpb\C2oPlantOper
     */
    public function clearLandId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <landId> value
     *
     * @return int
     */
    public function getLandId(){
      return $this->_get(1);
    }
    
    /**
     * Set <landId> value
     *
     * @param int $value
     * @return \utilpb\C2oPlantOper
     */
    public function setLandId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <oper> has a value
     *
     * @return boolean
     */
    public function hasOper(){
      return $this->_has(2);
    }
    
    /**
     * Clear <oper> value
     *
     * @return \utilpb\C2oPlantOper
     */
    public function clearOper(){
      return $this->_clear(2);
    }
    
    /**
     * Get <oper> value
     *
     * @return int
     */
    public function getOper(){
      return $this->_get(2);
    }
    
    /**
     * Set <oper> value
     *
     * @param int $value
     * @return \utilpb\C2oPlantOper
     */
    public function setOper( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <seedId> has a value
     *
     * @return boolean
     */
    public function hasSeedId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <seedId> value
     *
     * @return \utilpb\C2oPlantOper
     */
    public function clearSeedId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <seedId> value
     *
     * @return int
     */
    public function getSeedId(){
      return $this->_get(3);
    }
    
    /**
     * Set <seedId> value
     *
     * @param int $value
     * @return \utilpb\C2oPlantOper
     */
    public function setSeedId( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class O2cPlantFlower extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $ownerId = null;
    
    /**  @var int */
    public $landId = null;
    
    /**  @var int */
    public $stealCount = null;
    
    /**  @var int */
    public $totalCollectCount = null;
    
    /**  @var int */
    public $plantCount = null;
    
    /**  @var int */
    public $plantTime = null;
    
    /**  @var int */
    public $isAberrance = null;
    
    /**  @var int */
    public $isTeam = null;
    
    /**  @var int */
    public $seedId = null;
    
    /**  @var int */
    public $sceneId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.O2cPlantFlower');

      // OPTIONAL MESSAGE ownerId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "ownerId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED INT32 landId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "landId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 stealCount = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "stealCount";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 totalCollectCount = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "totalCollectCount";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 plantCount = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "plantCount";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 plantTime = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "plantTime";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 isAberrance = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "isAberrance";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 isTeam = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "isTeam";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 seedId = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "seedId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 sceneId = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "sceneId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <ownerId> has a value
     *
     * @return boolean
     */
    public function hasOwnerId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <ownerId> value
     *
     * @return \utilpb\O2cPlantFlower
     */
    public function clearOwnerId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <ownerId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getOwnerId(){
      return $this->_get(1);
    }
    
    /**
     * Set <ownerId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\O2cPlantFlower
     */
    public function setOwnerId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <landId> has a value
     *
     * @return boolean
     */
    public function hasLandId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <landId> value
     *
     * @return \utilpb\O2cPlantFlower
     */
    public function clearLandId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <landId> value
     *
     * @return int
     */
    public function getLandId(){
      return $this->_get(2);
    }
    
    /**
     * Set <landId> value
     *
     * @param int $value
     * @return \utilpb\O2cPlantFlower
     */
    public function setLandId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <stealCount> has a value
     *
     * @return boolean
     */
    public function hasStealCount(){
      return $this->_has(3);
    }
    
    /**
     * Clear <stealCount> value
     *
     * @return \utilpb\O2cPlantFlower
     */
    public function clearStealCount(){
      return $this->_clear(3);
    }
    
    /**
     * Get <stealCount> value
     *
     * @return int
     */
    public function getStealCount(){
      return $this->_get(3);
    }
    
    /**
     * Set <stealCount> value
     *
     * @param int $value
     * @return \utilpb\O2cPlantFlower
     */
    public function setStealCount( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <totalCollectCount> has a value
     *
     * @return boolean
     */
    public function hasTotalCollectCount(){
      return $this->_has(4);
    }
    
    /**
     * Clear <totalCollectCount> value
     *
     * @return \utilpb\O2cPlantFlower
     */
    public function clearTotalCollectCount(){
      return $this->_clear(4);
    }
    
    /**
     * Get <totalCollectCount> value
     *
     * @return int
     */
    public function getTotalCollectCount(){
      return $this->_get(4);
    }
    
    /**
     * Set <totalCollectCount> value
     *
     * @param int $value
     * @return \utilpb\O2cPlantFlower
     */
    public function setTotalCollectCount( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <plantCount> has a value
     *
     * @return boolean
     */
    public function hasPlantCount(){
      return $this->_has(5);
    }
    
    /**
     * Clear <plantCount> value
     *
     * @return \utilpb\O2cPlantFlower
     */
    public function clearPlantCount(){
      return $this->_clear(5);
    }
    
    /**
     * Get <plantCount> value
     *
     * @return int
     */
    public function getPlantCount(){
      return $this->_get(5);
    }
    
    /**
     * Set <plantCount> value
     *
     * @param int $value
     * @return \utilpb\O2cPlantFlower
     */
    public function setPlantCount( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <plantTime> has a value
     *
     * @return boolean
     */
    public function hasPlantTime(){
      return $this->_has(6);
    }
    
    /**
     * Clear <plantTime> value
     *
     * @return \utilpb\O2cPlantFlower
     */
    public function clearPlantTime(){
      return $this->_clear(6);
    }
    
    /**
     * Get <plantTime> value
     *
     * @return int
     */
    public function getPlantTime(){
      return $this->_get(6);
    }
    
    /**
     * Set <plantTime> value
     *
     * @param int $value
     * @return \utilpb\O2cPlantFlower
     */
    public function setPlantTime( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <isAberrance> has a value
     *
     * @return boolean
     */
    public function hasIsAberrance(){
      return $this->_has(7);
    }
    
    /**
     * Clear <isAberrance> value
     *
     * @return \utilpb\O2cPlantFlower
     */
    public function clearIsAberrance(){
      return $this->_clear(7);
    }
    
    /**
     * Get <isAberrance> value
     *
     * @return int
     */
    public function getIsAberrance(){
      return $this->_get(7);
    }
    
    /**
     * Set <isAberrance> value
     *
     * @param int $value
     * @return \utilpb\O2cPlantFlower
     */
    public function setIsAberrance( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <isTeam> has a value
     *
     * @return boolean
     */
    public function hasIsTeam(){
      return $this->_has(8);
    }
    
    /**
     * Clear <isTeam> value
     *
     * @return \utilpb\O2cPlantFlower
     */
    public function clearIsTeam(){
      return $this->_clear(8);
    }
    
    /**
     * Get <isTeam> value
     *
     * @return int
     */
    public function getIsTeam(){
      return $this->_get(8);
    }
    
    /**
     * Set <isTeam> value
     *
     * @param int $value
     * @return \utilpb\O2cPlantFlower
     */
    public function setIsTeam( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <seedId> has a value
     *
     * @return boolean
     */
    public function hasSeedId(){
      return $this->_has(9);
    }
    
    /**
     * Clear <seedId> value
     *
     * @return \utilpb\O2cPlantFlower
     */
    public function clearSeedId(){
      return $this->_clear(9);
    }
    
    /**
     * Get <seedId> value
     *
     * @return int
     */
    public function getSeedId(){
      return $this->_get(9);
    }
    
    /**
     * Set <seedId> value
     *
     * @param int $value
     * @return \utilpb\O2cPlantFlower
     */
    public function setSeedId( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <sceneId> has a value
     *
     * @return boolean
     */
    public function hasSceneId(){
      return $this->_has(10);
    }
    
    /**
     * Clear <sceneId> value
     *
     * @return \utilpb\O2cPlantFlower
     */
    public function clearSceneId(){
      return $this->_clear(10);
    }
    
    /**
     * Get <sceneId> value
     *
     * @return int
     */
    public function getSceneId(){
      return $this->_get(10);
    }
    
    /**
     * Set <sceneId> value
     *
     * @param int $value
     * @return \utilpb\O2cPlantFlower
     */
    public function setSceneId( $value){
      return $this->_set(10, $value);
    }
  }
}

namespace utilpb {

  class O2cPlantFlowerList extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\O2cPlantFlower[]  */
    public $landList = array();
    
    /**  @var int */
    public $sceneId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.O2cPlantFlowerList');

      // REPEATED MESSAGE landList = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "landList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\O2cPlantFlower';
      $descriptor->addField($f);

      // REQUIRED INT32 sceneId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sceneId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <landList> has a value
     *
     * @return boolean
     */
    public function hasLandList(){
      return $this->_has(1);
    }
    
    /**
     * Clear <landList> value
     *
     * @return \utilpb\O2cPlantFlowerList
     */
    public function clearLandList(){
      return $this->_clear(1);
    }
    
    /**
     * Get <landList> value
     *
     * @param int $idx
     * @return \utilpb\O2cPlantFlower
     */
    public function getLandList($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <landList> value
     *
     * @param \utilpb\O2cPlantFlower $value
     * @return \utilpb\O2cPlantFlowerList
     */
    public function setLandList(\utilpb\O2cPlantFlower $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <landList>
     *
     * @return \utilpb\O2cPlantFlower[]
     */
    public function getLandListList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <landList>
     *
     * @param \utilpb\O2cPlantFlower $value
     * @return \utilpb\O2cPlantFlowerList
     */
    public function addLandList(\utilpb\O2cPlantFlower $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <sceneId> has a value
     *
     * @return boolean
     */
    public function hasSceneId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sceneId> value
     *
     * @return \utilpb\O2cPlantFlowerList
     */
    public function clearSceneId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sceneId> value
     *
     * @return int
     */
    public function getSceneId(){
      return $this->_get(2);
    }
    
    /**
     * Set <sceneId> value
     *
     * @param int $value
     * @return \utilpb\O2cPlantFlowerList
     */
    public function setSceneId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class SelfFlowerInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $sceneId = null;
    
    /**  @var int */
    public $landId = null;
    
    /**  @var int */
    public $plantTime = null;
    
    /**  @var int */
    public $seedId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SelfFlowerInfo');

      // REQUIRED INT32 sceneId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sceneId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 landId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "landId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 plantTime = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "plantTime";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 seedId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "seedId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sceneId> has a value
     *
     * @return boolean
     */
    public function hasSceneId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sceneId> value
     *
     * @return \utilpb\SelfFlowerInfo
     */
    public function clearSceneId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sceneId> value
     *
     * @return int
     */
    public function getSceneId(){
      return $this->_get(1);
    }
    
    /**
     * Set <sceneId> value
     *
     * @param int $value
     * @return \utilpb\SelfFlowerInfo
     */
    public function setSceneId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <landId> has a value
     *
     * @return boolean
     */
    public function hasLandId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <landId> value
     *
     * @return \utilpb\SelfFlowerInfo
     */
    public function clearLandId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <landId> value
     *
     * @return int
     */
    public function getLandId(){
      return $this->_get(2);
    }
    
    /**
     * Set <landId> value
     *
     * @param int $value
     * @return \utilpb\SelfFlowerInfo
     */
    public function setLandId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <plantTime> has a value
     *
     * @return boolean
     */
    public function hasPlantTime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <plantTime> value
     *
     * @return \utilpb\SelfFlowerInfo
     */
    public function clearPlantTime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <plantTime> value
     *
     * @return int
     */
    public function getPlantTime(){
      return $this->_get(3);
    }
    
    /**
     * Set <plantTime> value
     *
     * @param int $value
     * @return \utilpb\SelfFlowerInfo
     */
    public function setPlantTime( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <seedId> has a value
     *
     * @return boolean
     */
    public function hasSeedId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <seedId> value
     *
     * @return \utilpb\SelfFlowerInfo
     */
    public function clearSeedId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <seedId> value
     *
     * @return int
     */
    public function getSeedId(){
      return $this->_get(4);
    }
    
    /**
     * Set <seedId> value
     *
     * @param int $value
     * @return \utilpb\SelfFlowerInfo
     */
    public function setSeedId( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class O2cSelfFlowerList extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\SelfFlowerInfo[]  */
    public $flowerList = array();
    
    /**  @var int */
    public $plantCount = null;
    
    /**  @var int */
    public $stealCount = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.O2cSelfFlowerList');

      // REPEATED MESSAGE flowerList = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "flowerList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\SelfFlowerInfo';
      $descriptor->addField($f);

      // OPTIONAL INT32 plantCount = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "plantCount";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 stealCount = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "stealCount";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <flowerList> has a value
     *
     * @return boolean
     */
    public function hasFlowerList(){
      return $this->_has(1);
    }
    
    /**
     * Clear <flowerList> value
     *
     * @return \utilpb\O2cSelfFlowerList
     */
    public function clearFlowerList(){
      return $this->_clear(1);
    }
    
    /**
     * Get <flowerList> value
     *
     * @param int $idx
     * @return \utilpb\SelfFlowerInfo
     */
    public function getFlowerList($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <flowerList> value
     *
     * @param \utilpb\SelfFlowerInfo $value
     * @return \utilpb\O2cSelfFlowerList
     */
    public function setFlowerList(\utilpb\SelfFlowerInfo $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <flowerList>
     *
     * @return \utilpb\SelfFlowerInfo[]
     */
    public function getFlowerListList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <flowerList>
     *
     * @param \utilpb\SelfFlowerInfo $value
     * @return \utilpb\O2cSelfFlowerList
     */
    public function addFlowerList(\utilpb\SelfFlowerInfo $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <plantCount> has a value
     *
     * @return boolean
     */
    public function hasPlantCount(){
      return $this->_has(2);
    }
    
    /**
     * Clear <plantCount> value
     *
     * @return \utilpb\O2cSelfFlowerList
     */
    public function clearPlantCount(){
      return $this->_clear(2);
    }
    
    /**
     * Get <plantCount> value
     *
     * @return int
     */
    public function getPlantCount(){
      return $this->_get(2);
    }
    
    /**
     * Set <plantCount> value
     *
     * @param int $value
     * @return \utilpb\O2cSelfFlowerList
     */
    public function setPlantCount( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <stealCount> has a value
     *
     * @return boolean
     */
    public function hasStealCount(){
      return $this->_has(3);
    }
    
    /**
     * Clear <stealCount> value
     *
     * @return \utilpb\O2cSelfFlowerList
     */
    public function clearStealCount(){
      return $this->_clear(3);
    }
    
    /**
     * Get <stealCount> value
     *
     * @return int
     */
    public function getStealCount(){
      return $this->_get(3);
    }
    
    /**
     * Set <stealCount> value
     *
     * @param int $value
     * @return \utilpb\O2cSelfFlowerList
     */
    public function setStealCount( $value){
      return $this->_set(3, $value);
    }
  }
}

