<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/pet_hunt.proto
//   Date: 2014-12-19 08:23:08

namespace utilpb {

  class ItemInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $index = null;
    
    /**  @var int */
    public $itemId = null;
    
    /**  @var int */
    public $exp = null;
    
    /**  @var int */
    public $lock = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.ItemInfo');

      // REQUIRED INT32 index = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 itemId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "itemId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 exp = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "exp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED INT32 lock = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "lock";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(1);
    }
    
    /**
     * Clear <index> value
     *
     * @return \utilpb\ItemInfo
     */
    public function clearIndex(){
      return $this->_clear(1);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(1);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \utilpb\ItemInfo
     */
    public function setIndex( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <itemId> has a value
     *
     * @return boolean
     */
    public function hasItemId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <itemId> value
     *
     * @return \utilpb\ItemInfo
     */
    public function clearItemId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <itemId> value
     *
     * @return int
     */
    public function getItemId(){
      return $this->_get(2);
    }
    
    /**
     * Set <itemId> value
     *
     * @param int $value
     * @return \utilpb\ItemInfo
     */
    public function setItemId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <exp> has a value
     *
     * @return boolean
     */
    public function hasExp(){
      return $this->_has(3);
    }
    
    /**
     * Clear <exp> value
     *
     * @return \utilpb\ItemInfo
     */
    public function clearExp(){
      return $this->_clear(3);
    }
    
    /**
     * Get <exp> value
     *
     * @return int
     */
    public function getExp(){
      return $this->_get(3);
    }
    
    /**
     * Set <exp> value
     *
     * @param int $value
     * @return \utilpb\ItemInfo
     */
    public function setExp( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <lock> has a value
     *
     * @return boolean
     */
    public function hasLock(){
      return $this->_has(4);
    }
    
    /**
     * Clear <lock> value
     *
     * @return \utilpb\ItemInfo
     */
    public function clearLock(){
      return $this->_clear(4);
    }
    
    /**
     * Get <lock> value
     *
     * @return int
     */
    public function getLock(){
      return $this->_get(4);
    }
    
    /**
     * Set <lock> value
     *
     * @param int $value
     * @return \utilpb\ItemInfo
     */
    public function setLock( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class HuntingInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\IdInt[]  */
    public $typeList = array();
    
    /**  @var int */
    public $count = null;
    
    /**  @var int */
    public $doubleCount = null;
    
    /**  @var int */
    public $point = null;
    
    /**  @var \utilpb\ItemInfo[]  */
    public $itemList = array();
    
    /**  @var int */
    public $lookCount = null;
    
    /**  @var int */
    public $autoHuntCount = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.HuntingInfo');

      // REPEATED MESSAGE typeList = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "typeList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\IdInt';
      $descriptor->addField($f);

      // REQUIRED INT32 count = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 doubleCount = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "doubleCount";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 point = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "point";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE itemList = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "itemList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\ItemInfo';
      $descriptor->addField($f);

      // REQUIRED INT32 lookCount = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "lookCount";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 autoHuntCount = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "autoHuntCount";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <typeList> has a value
     *
     * @return boolean
     */
    public function hasTypeList(){
      return $this->_has(1);
    }
    
    /**
     * Clear <typeList> value
     *
     * @return \utilpb\HuntingInfo
     */
    public function clearTypeList(){
      return $this->_clear(1);
    }
    
    /**
     * Get <typeList> value
     *
     * @param int $idx
     * @return \utilpb\IdInt
     */
    public function getTypeList($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <typeList> value
     *
     * @param \utilpb\IdInt $value
     * @return \utilpb\HuntingInfo
     */
    public function setTypeList(\utilpb\IdInt $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <typeList>
     *
     * @return \utilpb\IdInt[]
     */
    public function getTypeListList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <typeList>
     *
     * @param \utilpb\IdInt $value
     * @return \utilpb\HuntingInfo
     */
    public function addTypeList(\utilpb\IdInt $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(2);
    }
    
    /**
     * Clear <count> value
     *
     * @return \utilpb\HuntingInfo
     */
    public function clearCount(){
      return $this->_clear(2);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(2);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \utilpb\HuntingInfo
     */
    public function setCount( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <doubleCount> has a value
     *
     * @return boolean
     */
    public function hasDoubleCount(){
      return $this->_has(3);
    }
    
    /**
     * Clear <doubleCount> value
     *
     * @return \utilpb\HuntingInfo
     */
    public function clearDoubleCount(){
      return $this->_clear(3);
    }
    
    /**
     * Get <doubleCount> value
     *
     * @return int
     */
    public function getDoubleCount(){
      return $this->_get(3);
    }
    
    /**
     * Set <doubleCount> value
     *
     * @param int $value
     * @return \utilpb\HuntingInfo
     */
    public function setDoubleCount( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <point> has a value
     *
     * @return boolean
     */
    public function hasPoint(){
      return $this->_has(4);
    }
    
    /**
     * Clear <point> value
     *
     * @return \utilpb\HuntingInfo
     */
    public function clearPoint(){
      return $this->_clear(4);
    }
    
    /**
     * Get <point> value
     *
     * @return int
     */
    public function getPoint(){
      return $this->_get(4);
    }
    
    /**
     * Set <point> value
     *
     * @param int $value
     * @return \utilpb\HuntingInfo
     */
    public function setPoint( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <itemList> has a value
     *
     * @return boolean
     */
    public function hasItemList(){
      return $this->_has(5);
    }
    
    /**
     * Clear <itemList> value
     *
     * @return \utilpb\HuntingInfo
     */
    public function clearItemList(){
      return $this->_clear(5);
    }
    
    /**
     * Get <itemList> value
     *
     * @param int $idx
     * @return \utilpb\ItemInfo
     */
    public function getItemList($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <itemList> value
     *
     * @param \utilpb\ItemInfo $value
     * @return \utilpb\HuntingInfo
     */
    public function setItemList(\utilpb\ItemInfo $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <itemList>
     *
     * @return \utilpb\ItemInfo[]
     */
    public function getItemListList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <itemList>
     *
     * @param \utilpb\ItemInfo $value
     * @return \utilpb\HuntingInfo
     */
    public function addItemList(\utilpb\ItemInfo $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <lookCount> has a value
     *
     * @return boolean
     */
    public function hasLookCount(){
      return $this->_has(6);
    }
    
    /**
     * Clear <lookCount> value
     *
     * @return \utilpb\HuntingInfo
     */
    public function clearLookCount(){
      return $this->_clear(6);
    }
    
    /**
     * Get <lookCount> value
     *
     * @return int
     */
    public function getLookCount(){
      return $this->_get(6);
    }
    
    /**
     * Set <lookCount> value
     *
     * @param int $value
     * @return \utilpb\HuntingInfo
     */
    public function setLookCount( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <autoHuntCount> has a value
     *
     * @return boolean
     */
    public function hasAutoHuntCount(){
      return $this->_has(7);
    }
    
    /**
     * Clear <autoHuntCount> value
     *
     * @return \utilpb\HuntingInfo
     */
    public function clearAutoHuntCount(){
      return $this->_clear(7);
    }
    
    /**
     * Get <autoHuntCount> value
     *
     * @return int
     */
    public function getAutoHuntCount(){
      return $this->_get(7);
    }
    
    /**
     * Set <autoHuntCount> value
     *
     * @param int $value
     * @return \utilpb\HuntingInfo
     */
    public function setAutoHuntCount( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace utilpb {

  class HuntBagInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\HuntPublicBag */
    public $publicBag = null;
    
    /**  @var \utilpb\HuntPetBag[]  */
    public $petList = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.HuntBagInfo');

      // REQUIRED MESSAGE publicBag = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "publicBag";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\HuntPublicBag';
      $descriptor->addField($f);

      // REPEATED MESSAGE petList = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "petList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\HuntPetBag';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <publicBag> has a value
     *
     * @return boolean
     */
    public function hasPublicBag(){
      return $this->_has(1);
    }
    
    /**
     * Clear <publicBag> value
     *
     * @return \utilpb\HuntBagInfo
     */
    public function clearPublicBag(){
      return $this->_clear(1);
    }
    
    /**
     * Get <publicBag> value
     *
     * @return \utilpb\HuntPublicBag
     */
    public function getPublicBag(){
      return $this->_get(1);
    }
    
    /**
     * Set <publicBag> value
     *
     * @param \utilpb\HuntPublicBag $value
     * @return \utilpb\HuntBagInfo
     */
    public function setPublicBag(\utilpb\HuntPublicBag $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <petList> has a value
     *
     * @return boolean
     */
    public function hasPetList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <petList> value
     *
     * @return \utilpb\HuntBagInfo
     */
    public function clearPetList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <petList> value
     *
     * @param int $idx
     * @return \utilpb\HuntPetBag
     */
    public function getPetList($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <petList> value
     *
     * @param \utilpb\HuntPetBag $value
     * @return \utilpb\HuntBagInfo
     */
    public function setPetList(\utilpb\HuntPetBag $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <petList>
     *
     * @return \utilpb\HuntPetBag[]
     */
    public function getPetListList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <petList>
     *
     * @param \utilpb\HuntPetBag $value
     * @return \utilpb\HuntBagInfo
     */
    public function addPetList(\utilpb\HuntPetBag $value){
     return $this->_add(2, $value);
    }
  }
}

namespace utilpb {

  class HuntPublicBag extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ItemInfo[]  */
    public $itemList = array();
    
    /**  @var int */
    public $bagSize = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.HuntPublicBag');

      // REPEATED MESSAGE itemList = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "itemList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\ItemInfo';
      $descriptor->addField($f);

      // REQUIRED INT32 bagSize = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "bagSize";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <itemList> has a value
     *
     * @return boolean
     */
    public function hasItemList(){
      return $this->_has(1);
    }
    
    /**
     * Clear <itemList> value
     *
     * @return \utilpb\HuntPublicBag
     */
    public function clearItemList(){
      return $this->_clear(1);
    }
    
    /**
     * Get <itemList> value
     *
     * @param int $idx
     * @return \utilpb\ItemInfo
     */
    public function getItemList($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <itemList> value
     *
     * @param \utilpb\ItemInfo $value
     * @return \utilpb\HuntPublicBag
     */
    public function setItemList(\utilpb\ItemInfo $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <itemList>
     *
     * @return \utilpb\ItemInfo[]
     */
    public function getItemListList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <itemList>
     *
     * @param \utilpb\ItemInfo $value
     * @return \utilpb\HuntPublicBag
     */
    public function addItemList(\utilpb\ItemInfo $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <bagSize> has a value
     *
     * @return boolean
     */
    public function hasBagSize(){
      return $this->_has(2);
    }
    
    /**
     * Clear <bagSize> value
     *
     * @return \utilpb\HuntPublicBag
     */
    public function clearBagSize(){
      return $this->_clear(2);
    }
    
    /**
     * Get <bagSize> value
     *
     * @return int
     */
    public function getBagSize(){
      return $this->_get(2);
    }
    
    /**
     * Set <bagSize> value
     *
     * @param int $value
     * @return \utilpb\HuntPublicBag
     */
    public function setBagSize( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class HuntPetBag extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $petId = null;
    
    /**  @var \utilpb\ItemInfo[]  */
    public $petItemList = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.HuntPetBag');

      // REQUIRED MESSAGE petId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REPEATED MESSAGE petItemList = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "petItemList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\ItemInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\HuntPetBag
     */
    public function clearPetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\HuntPetBag
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <petItemList> has a value
     *
     * @return boolean
     */
    public function hasPetItemList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <petItemList> value
     *
     * @return \utilpb\HuntPetBag
     */
    public function clearPetItemList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <petItemList> value
     *
     * @param int $idx
     * @return \utilpb\ItemInfo
     */
    public function getPetItemList($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <petItemList> value
     *
     * @param \utilpb\ItemInfo $value
     * @return \utilpb\HuntPetBag
     */
    public function setPetItemList(\utilpb\ItemInfo $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <petItemList>
     *
     * @return \utilpb\ItemInfo[]
     */
    public function getPetItemListList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <petItemList>
     *
     * @param \utilpb\ItemInfo $value
     * @return \utilpb\HuntPetBag
     */
    public function addPetItemList(\utilpb\ItemInfo $value){
     return $this->_add(2, $value);
    }
  }
}

namespace utilpb {

  class HuntExchangeItem extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $petId = null;
    
    /**  @var int */
    public $type = null;
    
    /**  @var int */
    public $bagIndex = null;
    
    /**  @var int */
    public $petIndex = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.HuntExchangeItem');

      // REQUIRED MESSAGE petId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED INT32 type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 bagIndex = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "bagIndex";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 petIndex = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "petIndex";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\HuntExchangeItem
     */
    public function clearPetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\HuntExchangeItem
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\HuntExchangeItem
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\HuntExchangeItem
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <bagIndex> has a value
     *
     * @return boolean
     */
    public function hasBagIndex(){
      return $this->_has(3);
    }
    
    /**
     * Clear <bagIndex> value
     *
     * @return \utilpb\HuntExchangeItem
     */
    public function clearBagIndex(){
      return $this->_clear(3);
    }
    
    /**
     * Get <bagIndex> value
     *
     * @return int
     */
    public function getBagIndex(){
      return $this->_get(3);
    }
    
    /**
     * Set <bagIndex> value
     *
     * @param int $value
     * @return \utilpb\HuntExchangeItem
     */
    public function setBagIndex( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <petIndex> has a value
     *
     * @return boolean
     */
    public function hasPetIndex(){
      return $this->_has(4);
    }
    
    /**
     * Clear <petIndex> value
     *
     * @return \utilpb\HuntExchangeItem
     */
    public function clearPetIndex(){
      return $this->_clear(4);
    }
    
    /**
     * Get <petIndex> value
     *
     * @return int
     */
    public function getPetIndex(){
      return $this->_get(4);
    }
    
    /**
     * Set <petIndex> value
     *
     * @param int $value
     * @return \utilpb\HuntExchangeItem
     */
    public function setPetIndex( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class HuntReturn extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $index = null;
    
    /**  @var int */
    public $money = null;
    
    /**  @var int */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.HuntReturn');

      // OPTIONAL INT32 index = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 money = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "money";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED INT32 type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(1);
    }
    
    /**
     * Clear <index> value
     *
     * @return \utilpb\HuntReturn
     */
    public function clearIndex(){
      return $this->_clear(1);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(1);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \utilpb\HuntReturn
     */
    public function setIndex( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <money> has a value
     *
     * @return boolean
     */
    public function hasMoney(){
      return $this->_has(2);
    }
    
    /**
     * Clear <money> value
     *
     * @return \utilpb\HuntReturn
     */
    public function clearMoney(){
      return $this->_clear(2);
    }
    
    /**
     * Get <money> value
     *
     * @return int
     */
    public function getMoney(){
      return $this->_get(2);
    }
    
    /**
     * Set <money> value
     *
     * @param int $value
     * @return \utilpb\HuntReturn
     */
    public function setMoney( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\HuntReturn
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\HuntReturn
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class HuntRetCode extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $code = null;
    
    /**  @var \utilpb\HuntReturn[]  */
    public $info = array();
    
    /**  @var \utilpb\IdInt[]  */
    public $item = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.HuntRetCode');

      // REQUIRED INT32 code = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\HuntReturn';
      $descriptor->addField($f);

      // REPEATED MESSAGE item = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "item";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\IdInt';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <code> value
     *
     * @return \utilpb\HuntRetCode
     */
    public function clearCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <code> value
     *
     * @return int
     */
    public function getCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <code> value
     *
     * @param int $value
     * @return \utilpb\HuntRetCode
     */
    public function setCode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(2);
    }
    
    /**
     * Clear <info> value
     *
     * @return \utilpb\HuntRetCode
     */
    public function clearInfo(){
      return $this->_clear(2);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \utilpb\HuntReturn
     */
    public function getInfo($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \utilpb\HuntReturn $value
     * @return \utilpb\HuntRetCode
     */
    public function setInfo(\utilpb\HuntReturn $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \utilpb\HuntReturn[]
     */
    public function getInfoList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \utilpb\HuntReturn $value
     * @return \utilpb\HuntRetCode
     */
    public function addInfo(\utilpb\HuntReturn $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <item> has a value
     *
     * @return boolean
     */
    public function hasItem(){
      return $this->_has(3);
    }
    
    /**
     * Clear <item> value
     *
     * @return \utilpb\HuntRetCode
     */
    public function clearItem(){
      return $this->_clear(3);
    }
    
    /**
     * Get <item> value
     *
     * @param int $idx
     * @return \utilpb\IdInt
     */
    public function getItem($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <item> value
     *
     * @param \utilpb\IdInt $value
     * @return \utilpb\HuntRetCode
     */
    public function setItem(\utilpb\IdInt $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <item>
     *
     * @return \utilpb\IdInt[]
     */
    public function getItemList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <item>
     *
     * @param \utilpb\IdInt $value
     * @return \utilpb\HuntRetCode
     */
    public function addItem(\utilpb\IdInt $value){
     return $this->_add(3, $value);
    }
  }
}

namespace utilpb {

  class HuntPetMove extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $petId = null;
    
    /**  @var int */
    public $souIndex = null;
    
    /**  @var int */
    public $desIndex = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.HuntPetMove');

      // REQUIRED MESSAGE petId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED INT32 souIndex = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "souIndex";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 desIndex = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "desIndex";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\HuntPetMove
     */
    public function clearPetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\HuntPetMove
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <souIndex> has a value
     *
     * @return boolean
     */
    public function hasSouIndex(){
      return $this->_has(2);
    }
    
    /**
     * Clear <souIndex> value
     *
     * @return \utilpb\HuntPetMove
     */
    public function clearSouIndex(){
      return $this->_clear(2);
    }
    
    /**
     * Get <souIndex> value
     *
     * @return int
     */
    public function getSouIndex(){
      return $this->_get(2);
    }
    
    /**
     * Set <souIndex> value
     *
     * @param int $value
     * @return \utilpb\HuntPetMove
     */
    public function setSouIndex( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <desIndex> has a value
     *
     * @return boolean
     */
    public function hasDesIndex(){
      return $this->_has(3);
    }
    
    /**
     * Clear <desIndex> value
     *
     * @return \utilpb\HuntPetMove
     */
    public function clearDesIndex(){
      return $this->_clear(3);
    }
    
    /**
     * Get <desIndex> value
     *
     * @return int
     */
    public function getDesIndex(){
      return $this->_get(3);
    }
    
    /**
     * Set <desIndex> value
     *
     * @param int $value
     * @return \utilpb\HuntPetMove
     */
    public function setDesIndex( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class BuyHigherItem extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $itemId = null;
    
    /**  @var \utilpb\HigherItemNeedInfo[]  */
    public $itemList = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.BuyHigherItem');

      // REQUIRED INT32 itemId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "itemId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE itemList = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "itemList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\HigherItemNeedInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <itemId> has a value
     *
     * @return boolean
     */
    public function hasItemId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <itemId> value
     *
     * @return \utilpb\BuyHigherItem
     */
    public function clearItemId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <itemId> value
     *
     * @return int
     */
    public function getItemId(){
      return $this->_get(1);
    }
    
    /**
     * Set <itemId> value
     *
     * @param int $value
     * @return \utilpb\BuyHigherItem
     */
    public function setItemId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <itemList> has a value
     *
     * @return boolean
     */
    public function hasItemList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <itemList> value
     *
     * @return \utilpb\BuyHigherItem
     */
    public function clearItemList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <itemList> value
     *
     * @param int $idx
     * @return \utilpb\HigherItemNeedInfo
     */
    public function getItemList($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <itemList> value
     *
     * @param \utilpb\HigherItemNeedInfo $value
     * @return \utilpb\BuyHigherItem
     */
    public function setItemList(\utilpb\HigherItemNeedInfo $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <itemList>
     *
     * @return \utilpb\HigherItemNeedInfo[]
     */
    public function getItemListList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <itemList>
     *
     * @param \utilpb\HigherItemNeedInfo $value
     * @return \utilpb\BuyHigherItem
     */
    public function addItemList(\utilpb\HigherItemNeedInfo $value){
     return $this->_add(2, $value);
    }
  }
}

namespace utilpb {

  class HigherItemNeedInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $itemId = null;
    
    /**  @var int */
    public $index = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.HigherItemNeedInfo');

      // REQUIRED INT32 itemId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "itemId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 index = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <itemId> has a value
     *
     * @return boolean
     */
    public function hasItemId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <itemId> value
     *
     * @return \utilpb\HigherItemNeedInfo
     */
    public function clearItemId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <itemId> value
     *
     * @return int
     */
    public function getItemId(){
      return $this->_get(1);
    }
    
    /**
     * Set <itemId> value
     *
     * @param int $value
     * @return \utilpb\HigherItemNeedInfo
     */
    public function setItemId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(2);
    }
    
    /**
     * Clear <index> value
     *
     * @return \utilpb\HigherItemNeedInfo
     */
    public function clearIndex(){
      return $this->_clear(2);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(2);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \utilpb\HigherItemNeedInfo
     */
    public function setIndex( $value){
      return $this->_set(2, $value);
    }
  }
}

