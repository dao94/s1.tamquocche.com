<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/title_challenge.proto
//   Date: 2014-12-19 08:23:09

namespace utilpb {

  class WholeTitleInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\SingleBossInfo[]  */
    public $bossInfo = array();
    
    /**  @var \utilpb\SelfPlayerInfo */
    public $playerInfo = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.WholeTitleInfo');

      // REPEATED MESSAGE bossInfo = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bossInfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\SingleBossInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE playerInfo = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "playerInfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\SelfPlayerInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <bossInfo> has a value
     *
     * @return boolean
     */
    public function hasBossInfo(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bossInfo> value
     *
     * @return \utilpb\WholeTitleInfo
     */
    public function clearBossInfo(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bossInfo> value
     *
     * @param int $idx
     * @return \utilpb\SingleBossInfo
     */
    public function getBossInfo($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <bossInfo> value
     *
     * @param \utilpb\SingleBossInfo $value
     * @return \utilpb\WholeTitleInfo
     */
    public function setBossInfo(\utilpb\SingleBossInfo $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <bossInfo>
     *
     * @return \utilpb\SingleBossInfo[]
     */
    public function getBossInfoList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <bossInfo>
     *
     * @param \utilpb\SingleBossInfo $value
     * @return \utilpb\WholeTitleInfo
     */
    public function addBossInfo(\utilpb\SingleBossInfo $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <playerInfo> has a value
     *
     * @return boolean
     */
    public function hasPlayerInfo(){
      return $this->_has(2);
    }
    
    /**
     * Clear <playerInfo> value
     *
     * @return \utilpb\WholeTitleInfo
     */
    public function clearPlayerInfo(){
      return $this->_clear(2);
    }
    
    /**
     * Get <playerInfo> value
     *
     * @return \utilpb\SelfPlayerInfo
     */
    public function getPlayerInfo(){
      return $this->_get(2);
    }
    
    /**
     * Set <playerInfo> value
     *
     * @param \utilpb\SelfPlayerInfo $value
     * @return \utilpb\WholeTitleInfo
     */
    public function setPlayerInfo(\utilpb\SelfPlayerInfo $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class SelfPlayerInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $coolTime = null;
    
    /**  @var \utilpb\EncourageList[]  */
    public $encourageList = array();
    
    /**  @var int */
    public $code = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SelfPlayerInfo');

      // REQUIRED INT32 coolTime = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "coolTime";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE encourageList = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "encourageList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\EncourageList';
      $descriptor->addField($f);

      // OPTIONAL INT32 code = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <coolTime> has a value
     *
     * @return boolean
     */
    public function hasCoolTime(){
      return $this->_has(1);
    }
    
    /**
     * Clear <coolTime> value
     *
     * @return \utilpb\SelfPlayerInfo
     */
    public function clearCoolTime(){
      return $this->_clear(1);
    }
    
    /**
     * Get <coolTime> value
     *
     * @return int
     */
    public function getCoolTime(){
      return $this->_get(1);
    }
    
    /**
     * Set <coolTime> value
     *
     * @param int $value
     * @return \utilpb\SelfPlayerInfo
     */
    public function setCoolTime( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <encourageList> has a value
     *
     * @return boolean
     */
    public function hasEncourageList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <encourageList> value
     *
     * @return \utilpb\SelfPlayerInfo
     */
    public function clearEncourageList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <encourageList> value
     *
     * @param int $idx
     * @return \utilpb\EncourageList
     */
    public function getEncourageList($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <encourageList> value
     *
     * @param \utilpb\EncourageList $value
     * @return \utilpb\SelfPlayerInfo
     */
    public function setEncourageList(\utilpb\EncourageList $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <encourageList>
     *
     * @return \utilpb\EncourageList[]
     */
    public function getEncourageListList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <encourageList>
     *
     * @param \utilpb\EncourageList $value
     * @return \utilpb\SelfPlayerInfo
     */
    public function addEncourageList(\utilpb\EncourageList $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(3);
    }
    
    /**
     * Clear <code> value
     *
     * @return \utilpb\SelfPlayerInfo
     */
    public function clearCode(){
      return $this->_clear(3);
    }
    
    /**
     * Get <code> value
     *
     * @return int
     */
    public function getCode(){
      return $this->_get(3);
    }
    
    /**
     * Set <code> value
     *
     * @param int $value
     * @return \utilpb\SelfPlayerInfo
     */
    public function setCode( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class EncourageList extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var float */
    public $charId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.EncourageList');

      // REQUIRED INT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE charId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "charId";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\EncourageList
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \utilpb\EncourageList
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <charId> has a value
     *
     * @return boolean
     */
    public function hasCharId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <charId> value
     *
     * @return \utilpb\EncourageList
     */
    public function clearCharId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <charId> value
     *
     * @return float
     */
    public function getCharId(){
      return $this->_get(2);
    }
    
    /**
     * Set <charId> value
     *
     * @param float $value
     * @return \utilpb\EncourageList
     */
    public function setCharId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class SingleBossInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $level = null;
    
    /**  @var int */
    public $haveKill = null;
    
    /**  @var \utilpb\TitleOwner */
    public $owner = null;
    
    /**  @var \utilpb\BeKillInfo[]  */
    public $killList = array();
    
    /**  @var \utilpb\EncourageInfo[]  */
    public $encouageList = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SingleBossInfo');

      // REQUIRED INT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 level = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 haveKill = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "haveKill";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE owner = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "owner";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\TitleOwner';
      $descriptor->addField($f);

      // REPEATED MESSAGE killList = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "killList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\BeKillInfo';
      $descriptor->addField($f);

      // REPEATED MESSAGE encouageList = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "encouageList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\EncourageInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\SingleBossInfo
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \utilpb\SingleBossInfo
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(2);
    }
    
    /**
     * Clear <level> value
     *
     * @return \utilpb\SingleBossInfo
     */
    public function clearLevel(){
      return $this->_clear(2);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(2);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \utilpb\SingleBossInfo
     */
    public function setLevel( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <haveKill> has a value
     *
     * @return boolean
     */
    public function hasHaveKill(){
      return $this->_has(3);
    }
    
    /**
     * Clear <haveKill> value
     *
     * @return \utilpb\SingleBossInfo
     */
    public function clearHaveKill(){
      return $this->_clear(3);
    }
    
    /**
     * Get <haveKill> value
     *
     * @return int
     */
    public function getHaveKill(){
      return $this->_get(3);
    }
    
    /**
     * Set <haveKill> value
     *
     * @param int $value
     * @return \utilpb\SingleBossInfo
     */
    public function setHaveKill( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <owner> has a value
     *
     * @return boolean
     */
    public function hasOwner(){
      return $this->_has(4);
    }
    
    /**
     * Clear <owner> value
     *
     * @return \utilpb\SingleBossInfo
     */
    public function clearOwner(){
      return $this->_clear(4);
    }
    
    /**
     * Get <owner> value
     *
     * @return \utilpb\TitleOwner
     */
    public function getOwner(){
      return $this->_get(4);
    }
    
    /**
     * Set <owner> value
     *
     * @param \utilpb\TitleOwner $value
     * @return \utilpb\SingleBossInfo
     */
    public function setOwner(\utilpb\TitleOwner $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <killList> has a value
     *
     * @return boolean
     */
    public function hasKillList(){
      return $this->_has(5);
    }
    
    /**
     * Clear <killList> value
     *
     * @return \utilpb\SingleBossInfo
     */
    public function clearKillList(){
      return $this->_clear(5);
    }
    
    /**
     * Get <killList> value
     *
     * @param int $idx
     * @return \utilpb\BeKillInfo
     */
    public function getKillList($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <killList> value
     *
     * @param \utilpb\BeKillInfo $value
     * @return \utilpb\SingleBossInfo
     */
    public function setKillList(\utilpb\BeKillInfo $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <killList>
     *
     * @return \utilpb\BeKillInfo[]
     */
    public function getKillListList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <killList>
     *
     * @param \utilpb\BeKillInfo $value
     * @return \utilpb\SingleBossInfo
     */
    public function addKillList(\utilpb\BeKillInfo $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <encouageList> has a value
     *
     * @return boolean
     */
    public function hasEncouageList(){
      return $this->_has(6);
    }
    
    /**
     * Clear <encouageList> value
     *
     * @return \utilpb\SingleBossInfo
     */
    public function clearEncouageList(){
      return $this->_clear(6);
    }
    
    /**
     * Get <encouageList> value
     *
     * @param int $idx
     * @return \utilpb\EncourageInfo
     */
    public function getEncouageList($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <encouageList> value
     *
     * @param \utilpb\EncourageInfo $value
     * @return \utilpb\SingleBossInfo
     */
    public function setEncouageList(\utilpb\EncourageInfo $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <encouageList>
     *
     * @return \utilpb\EncourageInfo[]
     */
    public function getEncouageListList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <encouageList>
     *
     * @param \utilpb\EncourageInfo $value
     * @return \utilpb\SingleBossInfo
     */
    public function addEncouageList(\utilpb\EncourageInfo $value){
     return $this->_add(6, $value);
    }
  }
}

namespace utilpb {

  class TitleOwner extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $factionName = null;
    
    /**  @var int */
    public $factionPro = null;
    
    /**  @var float */
    public $fight = null;
    
    /**  @var int */
    public $gender = null;
    
    /**  @var \utilpb\OwnerClothes */
    public $clothes = null;
    
    /**  @var int */
    public $personOcc = null;
    
    /**  @var float */
    public $charId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.TitleOwner');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING factionName = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "factionName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 factionPro = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "factionPro";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED DOUBLE fight = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "fight";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 gender = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "gender";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE clothes = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "clothes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\OwnerClothes';
      $descriptor->addField($f);

      // OPTIONAL INT32 personOcc = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "personOcc";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE charId = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "charId";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\TitleOwner
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\TitleOwner
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <factionName> has a value
     *
     * @return boolean
     */
    public function hasFactionName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <factionName> value
     *
     * @return \utilpb\TitleOwner
     */
    public function clearFactionName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <factionName> value
     *
     * @return string
     */
    public function getFactionName(){
      return $this->_get(2);
    }
    
    /**
     * Set <factionName> value
     *
     * @param string $value
     * @return \utilpb\TitleOwner
     */
    public function setFactionName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <factionPro> has a value
     *
     * @return boolean
     */
    public function hasFactionPro(){
      return $this->_has(3);
    }
    
    /**
     * Clear <factionPro> value
     *
     * @return \utilpb\TitleOwner
     */
    public function clearFactionPro(){
      return $this->_clear(3);
    }
    
    /**
     * Get <factionPro> value
     *
     * @return int
     */
    public function getFactionPro(){
      return $this->_get(3);
    }
    
    /**
     * Set <factionPro> value
     *
     * @param int $value
     * @return \utilpb\TitleOwner
     */
    public function setFactionPro( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <fight> has a value
     *
     * @return boolean
     */
    public function hasFight(){
      return $this->_has(4);
    }
    
    /**
     * Clear <fight> value
     *
     * @return \utilpb\TitleOwner
     */
    public function clearFight(){
      return $this->_clear(4);
    }
    
    /**
     * Get <fight> value
     *
     * @return float
     */
    public function getFight(){
      return $this->_get(4);
    }
    
    /**
     * Set <fight> value
     *
     * @param float $value
     * @return \utilpb\TitleOwner
     */
    public function setFight( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <gender> has a value
     *
     * @return boolean
     */
    public function hasGender(){
      return $this->_has(5);
    }
    
    /**
     * Clear <gender> value
     *
     * @return \utilpb\TitleOwner
     */
    public function clearGender(){
      return $this->_clear(5);
    }
    
    /**
     * Get <gender> value
     *
     * @return int
     */
    public function getGender(){
      return $this->_get(5);
    }
    
    /**
     * Set <gender> value
     *
     * @param int $value
     * @return \utilpb\TitleOwner
     */
    public function setGender( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <clothes> has a value
     *
     * @return boolean
     */
    public function hasClothes(){
      return $this->_has(6);
    }
    
    /**
     * Clear <clothes> value
     *
     * @return \utilpb\TitleOwner
     */
    public function clearClothes(){
      return $this->_clear(6);
    }
    
    /**
     * Get <clothes> value
     *
     * @return \utilpb\OwnerClothes
     */
    public function getClothes(){
      return $this->_get(6);
    }
    
    /**
     * Set <clothes> value
     *
     * @param \utilpb\OwnerClothes $value
     * @return \utilpb\TitleOwner
     */
    public function setClothes(\utilpb\OwnerClothes $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <personOcc> has a value
     *
     * @return boolean
     */
    public function hasPersonOcc(){
      return $this->_has(7);
    }
    
    /**
     * Clear <personOcc> value
     *
     * @return \utilpb\TitleOwner
     */
    public function clearPersonOcc(){
      return $this->_clear(7);
    }
    
    /**
     * Get <personOcc> value
     *
     * @return int
     */
    public function getPersonOcc(){
      return $this->_get(7);
    }
    
    /**
     * Set <personOcc> value
     *
     * @param int $value
     * @return \utilpb\TitleOwner
     */
    public function setPersonOcc( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <charId> has a value
     *
     * @return boolean
     */
    public function hasCharId(){
      return $this->_has(8);
    }
    
    /**
     * Clear <charId> value
     *
     * @return \utilpb\TitleOwner
     */
    public function clearCharId(){
      return $this->_clear(8);
    }
    
    /**
     * Get <charId> value
     *
     * @return float
     */
    public function getCharId(){
      return $this->_get(8);
    }
    
    /**
     * Set <charId> value
     *
     * @param float $value
     * @return \utilpb\TitleOwner
     */
    public function setCharId( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace utilpb {

  class OwnerClothes extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $weapon = null;
    
    /**  @var int */
    public $trinket = null;
    
    /**  @var int */
    public $fashion = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.OwnerClothes');

      // OPTIONAL INT32 weapon = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "weapon";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 trinket = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "trinket";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 fashion = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "fashion";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <weapon> has a value
     *
     * @return boolean
     */
    public function hasWeapon(){
      return $this->_has(1);
    }
    
    /**
     * Clear <weapon> value
     *
     * @return \utilpb\OwnerClothes
     */
    public function clearWeapon(){
      return $this->_clear(1);
    }
    
    /**
     * Get <weapon> value
     *
     * @return int
     */
    public function getWeapon(){
      return $this->_get(1);
    }
    
    /**
     * Set <weapon> value
     *
     * @param int $value
     * @return \utilpb\OwnerClothes
     */
    public function setWeapon( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <trinket> has a value
     *
     * @return boolean
     */
    public function hasTrinket(){
      return $this->_has(2);
    }
    
    /**
     * Clear <trinket> value
     *
     * @return \utilpb\OwnerClothes
     */
    public function clearTrinket(){
      return $this->_clear(2);
    }
    
    /**
     * Get <trinket> value
     *
     * @return int
     */
    public function getTrinket(){
      return $this->_get(2);
    }
    
    /**
     * Set <trinket> value
     *
     * @param int $value
     * @return \utilpb\OwnerClothes
     */
    public function setTrinket( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <fashion> has a value
     *
     * @return boolean
     */
    public function hasFashion(){
      return $this->_has(3);
    }
    
    /**
     * Clear <fashion> value
     *
     * @return \utilpb\OwnerClothes
     */
    public function clearFashion(){
      return $this->_clear(3);
    }
    
    /**
     * Get <fashion> value
     *
     * @return int
     */
    public function getFashion(){
      return $this->_get(3);
    }
    
    /**
     * Set <fashion> value
     *
     * @param int $value
     * @return \utilpb\OwnerClothes
     */
    public function setFashion( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class BeKillInfo extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var float */
    public $fight = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.BeKillInfo');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE fight = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "fight";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\BeKillInfo
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\BeKillInfo
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <fight> has a value
     *
     * @return boolean
     */
    public function hasFight(){
      return $this->_has(2);
    }
    
    /**
     * Clear <fight> value
     *
     * @return \utilpb\BeKillInfo
     */
    public function clearFight(){
      return $this->_clear(2);
    }
    
    /**
     * Get <fight> value
     *
     * @return float
     */
    public function getFight(){
      return $this->_get(2);
    }
    
    /**
     * Set <fight> value
     *
     * @param float $value
     * @return \utilpb\BeKillInfo
     */
    public function setFight( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class EncourageInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $rank = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var float */
    public $killHp = null;
    
    /**  @var float */
    public $charId = null;
    
    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $flag = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.EncourageInfo');

      // REQUIRED INT32 rank = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "rank";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE killHp = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "killHp";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE charId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "charId";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 flag = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <rank> has a value
     *
     * @return boolean
     */
    public function hasRank(){
      return $this->_has(1);
    }
    
    /**
     * Clear <rank> value
     *
     * @return \utilpb\EncourageInfo
     */
    public function clearRank(){
      return $this->_clear(1);
    }
    
    /**
     * Get <rank> value
     *
     * @return int
     */
    public function getRank(){
      return $this->_get(1);
    }
    
    /**
     * Set <rank> value
     *
     * @param int $value
     * @return \utilpb\EncourageInfo
     */
    public function setRank( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\EncourageInfo
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\EncourageInfo
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <killHp> has a value
     *
     * @return boolean
     */
    public function hasKillHp(){
      return $this->_has(3);
    }
    
    /**
     * Clear <killHp> value
     *
     * @return \utilpb\EncourageInfo
     */
    public function clearKillHp(){
      return $this->_clear(3);
    }
    
    /**
     * Get <killHp> value
     *
     * @return float
     */
    public function getKillHp(){
      return $this->_get(3);
    }
    
    /**
     * Set <killHp> value
     *
     * @param float $value
     * @return \utilpb\EncourageInfo
     */
    public function setKillHp( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <charId> has a value
     *
     * @return boolean
     */
    public function hasCharId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <charId> value
     *
     * @return \utilpb\EncourageInfo
     */
    public function clearCharId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <charId> value
     *
     * @return float
     */
    public function getCharId(){
      return $this->_get(4);
    }
    
    /**
     * Set <charId> value
     *
     * @param float $value
     * @return \utilpb\EncourageInfo
     */
    public function setCharId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\EncourageInfo
     */
    public function clearId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(5);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \utilpb\EncourageInfo
     */
    public function setId( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(6);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\EncourageInfo
     */
    public function clearFlag(){
      return $this->_clear(6);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(6);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\EncourageInfo
     */
    public function setFlag( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace utilpb {

  class TitleChangeInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var float */
    public $charId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.TitleChangeInfo');

      // REQUIRED INT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE charId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "charId";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\TitleChangeInfo
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \utilpb\TitleChangeInfo
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\TitleChangeInfo
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\TitleChangeInfo
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <charId> has a value
     *
     * @return boolean
     */
    public function hasCharId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <charId> value
     *
     * @return \utilpb\TitleChangeInfo
     */
    public function clearCharId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <charId> value
     *
     * @return float
     */
    public function getCharId(){
      return $this->_get(3);
    }
    
    /**
     * Set <charId> value
     *
     * @param float $value
     * @return \utilpb\TitleChangeInfo
     */
    public function setCharId( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class encourageClientInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var float */
    public $charId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.encourageClientInfo');

      // REQUIRED INT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE charId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "charId";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\encourageClientInfo
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \utilpb\encourageClientInfo
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <charId> has a value
     *
     * @return boolean
     */
    public function hasCharId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <charId> value
     *
     * @return \utilpb\encourageClientInfo
     */
    public function clearCharId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <charId> value
     *
     * @return float
     */
    public function getCharId(){
      return $this->_get(2);
    }
    
    /**
     * Set <charId> value
     *
     * @param float $value
     * @return \utilpb\encourageClientInfo
     */
    public function setCharId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class TitleCharInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\encourageClientInfo[]  */
    public $info = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.TitleCharInfo');

      // REPEATED MESSAGE info = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\encourageClientInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(1);
    }
    
    /**
     * Clear <info> value
     *
     * @return \utilpb\TitleCharInfo
     */
    public function clearInfo(){
      return $this->_clear(1);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \utilpb\encourageClientInfo
     */
    public function getInfo($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \utilpb\encourageClientInfo $value
     * @return \utilpb\TitleCharInfo
     */
    public function setInfo(\utilpb\encourageClientInfo $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \utilpb\encourageClientInfo[]
     */
    public function getInfoList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \utilpb\encourageClientInfo $value
     * @return \utilpb\TitleCharInfo
     */
    public function addInfo(\utilpb\encourageClientInfo $value){
     return $this->_add(1, $value);
    }
  }
}

