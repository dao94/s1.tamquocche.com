<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/attr.proto
//   Date: 2014-12-19 08:23:08

namespace utilpb {

  class RealTimeAttr extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $hp = null;
    
    /**  @var int */
    public $hpMax = null;
    
    /**  @var int */
    public $mp = null;
    
    /**  @var int */
    public $mpMax = null;
    
    /**  @var int */
    public $vigor = null;
    
    /**  @var int */
    public $vigorMax = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.RealTimeAttr');

      // REQUIRED INT32 hp = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "hp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 hpMax = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "hpMax";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 mp = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "mp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 mpMax = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "mpMax";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 vigor = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "vigor";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 vigorMax = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "vigorMax";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <hp> has a value
     *
     * @return boolean
     */
    public function hasHp(){
      return $this->_has(1);
    }
    
    /**
     * Clear <hp> value
     *
     * @return \utilpb\RealTimeAttr
     */
    public function clearHp(){
      return $this->_clear(1);
    }
    
    /**
     * Get <hp> value
     *
     * @return int
     */
    public function getHp(){
      return $this->_get(1);
    }
    
    /**
     * Set <hp> value
     *
     * @param int $value
     * @return \utilpb\RealTimeAttr
     */
    public function setHp( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <hpMax> has a value
     *
     * @return boolean
     */
    public function hasHpMax(){
      return $this->_has(2);
    }
    
    /**
     * Clear <hpMax> value
     *
     * @return \utilpb\RealTimeAttr
     */
    public function clearHpMax(){
      return $this->_clear(2);
    }
    
    /**
     * Get <hpMax> value
     *
     * @return int
     */
    public function getHpMax(){
      return $this->_get(2);
    }
    
    /**
     * Set <hpMax> value
     *
     * @param int $value
     * @return \utilpb\RealTimeAttr
     */
    public function setHpMax( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <mp> has a value
     *
     * @return boolean
     */
    public function hasMp(){
      return $this->_has(3);
    }
    
    /**
     * Clear <mp> value
     *
     * @return \utilpb\RealTimeAttr
     */
    public function clearMp(){
      return $this->_clear(3);
    }
    
    /**
     * Get <mp> value
     *
     * @return int
     */
    public function getMp(){
      return $this->_get(3);
    }
    
    /**
     * Set <mp> value
     *
     * @param int $value
     * @return \utilpb\RealTimeAttr
     */
    public function setMp( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <mpMax> has a value
     *
     * @return boolean
     */
    public function hasMpMax(){
      return $this->_has(4);
    }
    
    /**
     * Clear <mpMax> value
     *
     * @return \utilpb\RealTimeAttr
     */
    public function clearMpMax(){
      return $this->_clear(4);
    }
    
    /**
     * Get <mpMax> value
     *
     * @return int
     */
    public function getMpMax(){
      return $this->_get(4);
    }
    
    /**
     * Set <mpMax> value
     *
     * @param int $value
     * @return \utilpb\RealTimeAttr
     */
    public function setMpMax( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <vigor> has a value
     *
     * @return boolean
     */
    public function hasVigor(){
      return $this->_has(5);
    }
    
    /**
     * Clear <vigor> value
     *
     * @return \utilpb\RealTimeAttr
     */
    public function clearVigor(){
      return $this->_clear(5);
    }
    
    /**
     * Get <vigor> value
     *
     * @return int
     */
    public function getVigor(){
      return $this->_get(5);
    }
    
    /**
     * Set <vigor> value
     *
     * @param int $value
     * @return \utilpb\RealTimeAttr
     */
    public function setVigor( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <vigorMax> has a value
     *
     * @return boolean
     */
    public function hasVigorMax(){
      return $this->_has(6);
    }
    
    /**
     * Clear <vigorMax> value
     *
     * @return \utilpb\RealTimeAttr
     */
    public function clearVigorMax(){
      return $this->_clear(6);
    }
    
    /**
     * Get <vigorMax> value
     *
     * @return int
     */
    public function getVigorMax(){
      return $this->_get(6);
    }
    
    /**
     * Set <vigorMax> value
     *
     * @param int $value
     * @return \utilpb\RealTimeAttr
     */
    public function setVigorMax( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace utilpb {

  class VariableAttr extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $hp = null;
    
    /**  @var int */
    public $mp = null;
    
    /**  @var int */
    public $vigor = null;
    
    /**  @var int */
    public $anger = null;
    
    /**  @var \utilpb\ComposeID */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.VariableAttr');

      // OPTIONAL INT32 hp = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "hp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 mp = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 vigor = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "vigor";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 anger = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "anger";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL STRING name = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 type = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <hp> has a value
     *
     * @return boolean
     */
    public function hasHp(){
      return $this->_has(1);
    }
    
    /**
     * Clear <hp> value
     *
     * @return \utilpb\VariableAttr
     */
    public function clearHp(){
      return $this->_clear(1);
    }
    
    /**
     * Get <hp> value
     *
     * @return int
     */
    public function getHp(){
      return $this->_get(1);
    }
    
    /**
     * Set <hp> value
     *
     * @param int $value
     * @return \utilpb\VariableAttr
     */
    public function setHp( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <mp> has a value
     *
     * @return boolean
     */
    public function hasMp(){
      return $this->_has(2);
    }
    
    /**
     * Clear <mp> value
     *
     * @return \utilpb\VariableAttr
     */
    public function clearMp(){
      return $this->_clear(2);
    }
    
    /**
     * Get <mp> value
     *
     * @return int
     */
    public function getMp(){
      return $this->_get(2);
    }
    
    /**
     * Set <mp> value
     *
     * @param int $value
     * @return \utilpb\VariableAttr
     */
    public function setMp( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <vigor> has a value
     *
     * @return boolean
     */
    public function hasVigor(){
      return $this->_has(3);
    }
    
    /**
     * Clear <vigor> value
     *
     * @return \utilpb\VariableAttr
     */
    public function clearVigor(){
      return $this->_clear(3);
    }
    
    /**
     * Get <vigor> value
     *
     * @return int
     */
    public function getVigor(){
      return $this->_get(3);
    }
    
    /**
     * Set <vigor> value
     *
     * @param int $value
     * @return \utilpb\VariableAttr
     */
    public function setVigor( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <anger> has a value
     *
     * @return boolean
     */
    public function hasAnger(){
      return $this->_has(4);
    }
    
    /**
     * Clear <anger> value
     *
     * @return \utilpb\VariableAttr
     */
    public function clearAnger(){
      return $this->_clear(4);
    }
    
    /**
     * Get <anger> value
     *
     * @return int
     */
    public function getAnger(){
      return $this->_get(4);
    }
    
    /**
     * Set <anger> value
     *
     * @param int $value
     * @return \utilpb\VariableAttr
     */
    public function setAnger( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\VariableAttr
     */
    public function clearId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(5);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\VariableAttr
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(6);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\VariableAttr
     */
    public function clearName(){
      return $this->_clear(6);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(6);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\VariableAttr
     */
    public function setName( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(7);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\VariableAttr
     */
    public function clearType(){
      return $this->_clear(7);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(7);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\VariableAttr
     */
    public function setType( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace utilpb {

  class CombatAttrCombat extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $hp = null;
    
    /**  @var int */
    public $mp = null;
    
    /**  @var int */
    public $vigor = null;
    
    /**  @var int */
    public $anger = null;
    
    /**  @var int */
    public $attack = null;
    
    /**  @var int */
    public $defense = null;
    
    /**  @var int */
    public $point = null;
    
    /**  @var int */
    public $dodge = null;
    
    /**  @var int */
    public $critical = null;
    
    /**  @var int */
    public $criticalDf = null;
    
    /**  @var int */
    public $criticalEffect = null;
    
    /**  @var int */
    public $criticalEffectdf = null;
    
    /**  @var int */
    public $iceAttack = null;
    
    /**  @var int */
    public $iceDefense = null;
    
    /**  @var int */
    public $poisonAttack = null;
    
    /**  @var int */
    public $poisonDefense = null;
    
    /**  @var int */
    public $fireAttack = null;
    
    /**  @var int */
    public $fireDefense = null;
    
    /**  @var int */
    public $speed = null;
    
    /**  @var int */
    public $addhp = null;
    
    /**  @var int */
    public $addmp = null;
    
    /**  @var int */
    public $fighting = null;
    
    /**  @var int */
    public $stopdf = null;
    
    /**  @var int */
    public $pulldf = null;
    
    /**  @var int */
    public $decSpeeddf = null;
    
    /**  @var int */
    public $retreatdf = null;
    
    /**  @var int */
    public $silencedf = null;
    
    /**  @var int */
    public $dizzydf = null;
    
    /**  @var int */
    public $defhpper = null;
    
    /**  @var int */
    public $damageaddper = null;
    
    /**  @var int */
    public $ignoredefense = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CombatAttrCombat');

      // OPTIONAL INT32 hp = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "hp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 mp = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 vigor = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "vigor";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 anger = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "anger";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 attack = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "attack";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 defense = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "defense";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 point = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "point";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 dodge = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "dodge";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 critical = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "critical";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 criticalDf = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "criticalDf";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 criticalEffect = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "criticalEffect";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 criticalEffectdf = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "criticalEffectdf";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 iceAttack = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "iceAttack";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 iceDefense = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "iceDefense";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 poisonAttack = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "poisonAttack";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 poisonDefense = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "poisonDefense";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 fireAttack = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "fireAttack";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 fireDefense = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "fireDefense";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 speed = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "speed";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 addhp = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "addhp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 addmp = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "addmp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 fighting = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "fighting";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 stopdf = 23
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 23;
      $f->name      = "stopdf";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 pulldf = 24
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 24;
      $f->name      = "pulldf";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 decSpeeddf = 25
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 25;
      $f->name      = "decSpeeddf";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 retreatdf = 26
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 26;
      $f->name      = "retreatdf";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 silencedf = 27
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 27;
      $f->name      = "silencedf";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 dizzydf = 28
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 28;
      $f->name      = "dizzydf";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 defhpper = 29
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 29;
      $f->name      = "defhpper";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 damageaddper = 30
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30;
      $f->name      = "damageaddper";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 ignoredefense = 31
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 31;
      $f->name      = "ignoredefense";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <hp> has a value
     *
     * @return boolean
     */
    public function hasHp(){
      return $this->_has(1);
    }
    
    /**
     * Clear <hp> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearHp(){
      return $this->_clear(1);
    }
    
    /**
     * Get <hp> value
     *
     * @return int
     */
    public function getHp(){
      return $this->_get(1);
    }
    
    /**
     * Set <hp> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setHp( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <mp> has a value
     *
     * @return boolean
     */
    public function hasMp(){
      return $this->_has(2);
    }
    
    /**
     * Clear <mp> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearMp(){
      return $this->_clear(2);
    }
    
    /**
     * Get <mp> value
     *
     * @return int
     */
    public function getMp(){
      return $this->_get(2);
    }
    
    /**
     * Set <mp> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setMp( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <vigor> has a value
     *
     * @return boolean
     */
    public function hasVigor(){
      return $this->_has(3);
    }
    
    /**
     * Clear <vigor> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearVigor(){
      return $this->_clear(3);
    }
    
    /**
     * Get <vigor> value
     *
     * @return int
     */
    public function getVigor(){
      return $this->_get(3);
    }
    
    /**
     * Set <vigor> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setVigor( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <anger> has a value
     *
     * @return boolean
     */
    public function hasAnger(){
      return $this->_has(4);
    }
    
    /**
     * Clear <anger> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearAnger(){
      return $this->_clear(4);
    }
    
    /**
     * Get <anger> value
     *
     * @return int
     */
    public function getAnger(){
      return $this->_get(4);
    }
    
    /**
     * Set <anger> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setAnger( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <attack> has a value
     *
     * @return boolean
     */
    public function hasAttack(){
      return $this->_has(5);
    }
    
    /**
     * Clear <attack> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearAttack(){
      return $this->_clear(5);
    }
    
    /**
     * Get <attack> value
     *
     * @return int
     */
    public function getAttack(){
      return $this->_get(5);
    }
    
    /**
     * Set <attack> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setAttack( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <defense> has a value
     *
     * @return boolean
     */
    public function hasDefense(){
      return $this->_has(6);
    }
    
    /**
     * Clear <defense> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearDefense(){
      return $this->_clear(6);
    }
    
    /**
     * Get <defense> value
     *
     * @return int
     */
    public function getDefense(){
      return $this->_get(6);
    }
    
    /**
     * Set <defense> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setDefense( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <point> has a value
     *
     * @return boolean
     */
    public function hasPoint(){
      return $this->_has(7);
    }
    
    /**
     * Clear <point> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearPoint(){
      return $this->_clear(7);
    }
    
    /**
     * Get <point> value
     *
     * @return int
     */
    public function getPoint(){
      return $this->_get(7);
    }
    
    /**
     * Set <point> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setPoint( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <dodge> has a value
     *
     * @return boolean
     */
    public function hasDodge(){
      return $this->_has(8);
    }
    
    /**
     * Clear <dodge> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearDodge(){
      return $this->_clear(8);
    }
    
    /**
     * Get <dodge> value
     *
     * @return int
     */
    public function getDodge(){
      return $this->_get(8);
    }
    
    /**
     * Set <dodge> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setDodge( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <critical> has a value
     *
     * @return boolean
     */
    public function hasCritical(){
      return $this->_has(9);
    }
    
    /**
     * Clear <critical> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearCritical(){
      return $this->_clear(9);
    }
    
    /**
     * Get <critical> value
     *
     * @return int
     */
    public function getCritical(){
      return $this->_get(9);
    }
    
    /**
     * Set <critical> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setCritical( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <criticalDf> has a value
     *
     * @return boolean
     */
    public function hasCriticalDf(){
      return $this->_has(10);
    }
    
    /**
     * Clear <criticalDf> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearCriticalDf(){
      return $this->_clear(10);
    }
    
    /**
     * Get <criticalDf> value
     *
     * @return int
     */
    public function getCriticalDf(){
      return $this->_get(10);
    }
    
    /**
     * Set <criticalDf> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setCriticalDf( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <criticalEffect> has a value
     *
     * @return boolean
     */
    public function hasCriticalEffect(){
      return $this->_has(11);
    }
    
    /**
     * Clear <criticalEffect> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearCriticalEffect(){
      return $this->_clear(11);
    }
    
    /**
     * Get <criticalEffect> value
     *
     * @return int
     */
    public function getCriticalEffect(){
      return $this->_get(11);
    }
    
    /**
     * Set <criticalEffect> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setCriticalEffect( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <criticalEffectdf> has a value
     *
     * @return boolean
     */
    public function hasCriticalEffectdf(){
      return $this->_has(12);
    }
    
    /**
     * Clear <criticalEffectdf> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearCriticalEffectdf(){
      return $this->_clear(12);
    }
    
    /**
     * Get <criticalEffectdf> value
     *
     * @return int
     */
    public function getCriticalEffectdf(){
      return $this->_get(12);
    }
    
    /**
     * Set <criticalEffectdf> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setCriticalEffectdf( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <iceAttack> has a value
     *
     * @return boolean
     */
    public function hasIceAttack(){
      return $this->_has(13);
    }
    
    /**
     * Clear <iceAttack> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearIceAttack(){
      return $this->_clear(13);
    }
    
    /**
     * Get <iceAttack> value
     *
     * @return int
     */
    public function getIceAttack(){
      return $this->_get(13);
    }
    
    /**
     * Set <iceAttack> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setIceAttack( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <iceDefense> has a value
     *
     * @return boolean
     */
    public function hasIceDefense(){
      return $this->_has(14);
    }
    
    /**
     * Clear <iceDefense> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearIceDefense(){
      return $this->_clear(14);
    }
    
    /**
     * Get <iceDefense> value
     *
     * @return int
     */
    public function getIceDefense(){
      return $this->_get(14);
    }
    
    /**
     * Set <iceDefense> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setIceDefense( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <poisonAttack> has a value
     *
     * @return boolean
     */
    public function hasPoisonAttack(){
      return $this->_has(15);
    }
    
    /**
     * Clear <poisonAttack> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearPoisonAttack(){
      return $this->_clear(15);
    }
    
    /**
     * Get <poisonAttack> value
     *
     * @return int
     */
    public function getPoisonAttack(){
      return $this->_get(15);
    }
    
    /**
     * Set <poisonAttack> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setPoisonAttack( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <poisonDefense> has a value
     *
     * @return boolean
     */
    public function hasPoisonDefense(){
      return $this->_has(16);
    }
    
    /**
     * Clear <poisonDefense> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearPoisonDefense(){
      return $this->_clear(16);
    }
    
    /**
     * Get <poisonDefense> value
     *
     * @return int
     */
    public function getPoisonDefense(){
      return $this->_get(16);
    }
    
    /**
     * Set <poisonDefense> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setPoisonDefense( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <fireAttack> has a value
     *
     * @return boolean
     */
    public function hasFireAttack(){
      return $this->_has(17);
    }
    
    /**
     * Clear <fireAttack> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearFireAttack(){
      return $this->_clear(17);
    }
    
    /**
     * Get <fireAttack> value
     *
     * @return int
     */
    public function getFireAttack(){
      return $this->_get(17);
    }
    
    /**
     * Set <fireAttack> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setFireAttack( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <fireDefense> has a value
     *
     * @return boolean
     */
    public function hasFireDefense(){
      return $this->_has(18);
    }
    
    /**
     * Clear <fireDefense> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearFireDefense(){
      return $this->_clear(18);
    }
    
    /**
     * Get <fireDefense> value
     *
     * @return int
     */
    public function getFireDefense(){
      return $this->_get(18);
    }
    
    /**
     * Set <fireDefense> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setFireDefense( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <speed> has a value
     *
     * @return boolean
     */
    public function hasSpeed(){
      return $this->_has(19);
    }
    
    /**
     * Clear <speed> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearSpeed(){
      return $this->_clear(19);
    }
    
    /**
     * Get <speed> value
     *
     * @return int
     */
    public function getSpeed(){
      return $this->_get(19);
    }
    
    /**
     * Set <speed> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setSpeed( $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <addhp> has a value
     *
     * @return boolean
     */
    public function hasAddhp(){
      return $this->_has(20);
    }
    
    /**
     * Clear <addhp> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearAddhp(){
      return $this->_clear(20);
    }
    
    /**
     * Get <addhp> value
     *
     * @return int
     */
    public function getAddhp(){
      return $this->_get(20);
    }
    
    /**
     * Set <addhp> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setAddhp( $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <addmp> has a value
     *
     * @return boolean
     */
    public function hasAddmp(){
      return $this->_has(21);
    }
    
    /**
     * Clear <addmp> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearAddmp(){
      return $this->_clear(21);
    }
    
    /**
     * Get <addmp> value
     *
     * @return int
     */
    public function getAddmp(){
      return $this->_get(21);
    }
    
    /**
     * Set <addmp> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setAddmp( $value){
      return $this->_set(21, $value);
    }
    
    /**
     * Check if <fighting> has a value
     *
     * @return boolean
     */
    public function hasFighting(){
      return $this->_has(22);
    }
    
    /**
     * Clear <fighting> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearFighting(){
      return $this->_clear(22);
    }
    
    /**
     * Get <fighting> value
     *
     * @return int
     */
    public function getFighting(){
      return $this->_get(22);
    }
    
    /**
     * Set <fighting> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setFighting( $value){
      return $this->_set(22, $value);
    }
    
    /**
     * Check if <stopdf> has a value
     *
     * @return boolean
     */
    public function hasStopdf(){
      return $this->_has(23);
    }
    
    /**
     * Clear <stopdf> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearStopdf(){
      return $this->_clear(23);
    }
    
    /**
     * Get <stopdf> value
     *
     * @return int
     */
    public function getStopdf(){
      return $this->_get(23);
    }
    
    /**
     * Set <stopdf> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setStopdf( $value){
      return $this->_set(23, $value);
    }
    
    /**
     * Check if <pulldf> has a value
     *
     * @return boolean
     */
    public function hasPulldf(){
      return $this->_has(24);
    }
    
    /**
     * Clear <pulldf> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearPulldf(){
      return $this->_clear(24);
    }
    
    /**
     * Get <pulldf> value
     *
     * @return int
     */
    public function getPulldf(){
      return $this->_get(24);
    }
    
    /**
     * Set <pulldf> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setPulldf( $value){
      return $this->_set(24, $value);
    }
    
    /**
     * Check if <decSpeeddf> has a value
     *
     * @return boolean
     */
    public function hasDecSpeeddf(){
      return $this->_has(25);
    }
    
    /**
     * Clear <decSpeeddf> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearDecSpeeddf(){
      return $this->_clear(25);
    }
    
    /**
     * Get <decSpeeddf> value
     *
     * @return int
     */
    public function getDecSpeeddf(){
      return $this->_get(25);
    }
    
    /**
     * Set <decSpeeddf> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setDecSpeeddf( $value){
      return $this->_set(25, $value);
    }
    
    /**
     * Check if <retreatdf> has a value
     *
     * @return boolean
     */
    public function hasRetreatdf(){
      return $this->_has(26);
    }
    
    /**
     * Clear <retreatdf> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearRetreatdf(){
      return $this->_clear(26);
    }
    
    /**
     * Get <retreatdf> value
     *
     * @return int
     */
    public function getRetreatdf(){
      return $this->_get(26);
    }
    
    /**
     * Set <retreatdf> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setRetreatdf( $value){
      return $this->_set(26, $value);
    }
    
    /**
     * Check if <silencedf> has a value
     *
     * @return boolean
     */
    public function hasSilencedf(){
      return $this->_has(27);
    }
    
    /**
     * Clear <silencedf> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearSilencedf(){
      return $this->_clear(27);
    }
    
    /**
     * Get <silencedf> value
     *
     * @return int
     */
    public function getSilencedf(){
      return $this->_get(27);
    }
    
    /**
     * Set <silencedf> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setSilencedf( $value){
      return $this->_set(27, $value);
    }
    
    /**
     * Check if <dizzydf> has a value
     *
     * @return boolean
     */
    public function hasDizzydf(){
      return $this->_has(28);
    }
    
    /**
     * Clear <dizzydf> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearDizzydf(){
      return $this->_clear(28);
    }
    
    /**
     * Get <dizzydf> value
     *
     * @return int
     */
    public function getDizzydf(){
      return $this->_get(28);
    }
    
    /**
     * Set <dizzydf> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setDizzydf( $value){
      return $this->_set(28, $value);
    }
    
    /**
     * Check if <defhpper> has a value
     *
     * @return boolean
     */
    public function hasDefhpper(){
      return $this->_has(29);
    }
    
    /**
     * Clear <defhpper> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearDefhpper(){
      return $this->_clear(29);
    }
    
    /**
     * Get <defhpper> value
     *
     * @return int
     */
    public function getDefhpper(){
      return $this->_get(29);
    }
    
    /**
     * Set <defhpper> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setDefhpper( $value){
      return $this->_set(29, $value);
    }
    
    /**
     * Check if <damageaddper> has a value
     *
     * @return boolean
     */
    public function hasDamageaddper(){
      return $this->_has(30);
    }
    
    /**
     * Clear <damageaddper> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearDamageaddper(){
      return $this->_clear(30);
    }
    
    /**
     * Get <damageaddper> value
     *
     * @return int
     */
    public function getDamageaddper(){
      return $this->_get(30);
    }
    
    /**
     * Set <damageaddper> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setDamageaddper( $value){
      return $this->_set(30, $value);
    }
    
    /**
     * Check if <ignoredefense> has a value
     *
     * @return boolean
     */
    public function hasIgnoredefense(){
      return $this->_has(31);
    }
    
    /**
     * Clear <ignoredefense> value
     *
     * @return \utilpb\CombatAttrCombat
     */
    public function clearIgnoredefense(){
      return $this->_clear(31);
    }
    
    /**
     * Get <ignoredefense> value
     *
     * @return int
     */
    public function getIgnoredefense(){
      return $this->_get(31);
    }
    
    /**
     * Set <ignoredefense> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrCombat
     */
    public function setIgnoredefense( $value){
      return $this->_set(31, $value);
    }
  }
}

namespace utilpb {

  class CombatAttrAll extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $hp = null;
    
    /**  @var int */
    public $maxHp = null;
    
    /**  @var int */
    public $mp = null;
    
    /**  @var int */
    public $maxMp = null;
    
    /**  @var int */
    public $anger = null;
    
    /**  @var int */
    public $maxAnger = null;
    
    /**  @var int */
    public $vigor = null;
    
    /**  @var int */
    public $attack = null;
    
    /**  @var int */
    public $defense = null;
    
    /**  @var int */
    public $point = null;
    
    /**  @var int */
    public $dodge = null;
    
    /**  @var int */
    public $critical = null;
    
    /**  @var int */
    public $criticalDf = null;
    
    /**  @var int */
    public $criticalEffect = null;
    
    /**  @var int */
    public $criticalEffectdf = null;
    
    /**  @var int */
    public $iceAttack = null;
    
    /**  @var int */
    public $iceDefense = null;
    
    /**  @var int */
    public $poisonAttack = null;
    
    /**  @var int */
    public $poisonDefense = null;
    
    /**  @var int */
    public $fireAttack = null;
    
    /**  @var int */
    public $fireDefense = null;
    
    /**  @var int */
    public $speed = null;
    
    /**  @var int */
    public $addhp = null;
    
    /**  @var int */
    public $addmp = null;
    
    /**  @var int */
    public $maxVigor = null;
    
    /**  @var int */
    public $stopdf = null;
    
    /**  @var int */
    public $pulldf = null;
    
    /**  @var int */
    public $decSpeeddf = null;
    
    /**  @var int */
    public $retreatdf = null;
    
    /**  @var int */
    public $silencedf = null;
    
    /**  @var int */
    public $dizzydf = null;
    
    /**  @var int */
    public $defhpper = null;
    
    /**  @var int */
    public $damageaddper = null;
    
    /**  @var int */
    public $ignoredefense = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CombatAttrAll');

      // OPTIONAL INT32 hp = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "hp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 maxHp = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "maxHp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 mp = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "mp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 maxMp = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "maxMp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 anger = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "anger";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 maxAnger = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "maxAnger";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 vigor = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "vigor";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 attack = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "attack";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 defense = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "defense";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 point = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "point";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 dodge = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "dodge";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 critical = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "critical";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 criticalDf = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "criticalDf";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 criticalEffect = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "criticalEffect";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 criticalEffectdf = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "criticalEffectdf";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 iceAttack = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "iceAttack";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 iceDefense = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "iceDefense";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 poisonAttack = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "poisonAttack";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 poisonDefense = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "poisonDefense";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 fireAttack = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "fireAttack";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 fireDefense = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "fireDefense";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 speed = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "speed";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 addhp = 23
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 23;
      $f->name      = "addhp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 addmp = 24
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 24;
      $f->name      = "addmp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 maxVigor = 25
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 25;
      $f->name      = "maxVigor";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 stopdf = 26
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 26;
      $f->name      = "stopdf";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 pulldf = 27
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 27;
      $f->name      = "pulldf";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 decSpeeddf = 28
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 28;
      $f->name      = "decSpeeddf";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 retreatdf = 29
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 29;
      $f->name      = "retreatdf";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 silencedf = 30
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30;
      $f->name      = "silencedf";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 dizzydf = 31
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 31;
      $f->name      = "dizzydf";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 defhpper = 32
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 32;
      $f->name      = "defhpper";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 damageaddper = 33
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 33;
      $f->name      = "damageaddper";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 ignoredefense = 34
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 34;
      $f->name      = "ignoredefense";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <hp> has a value
     *
     * @return boolean
     */
    public function hasHp(){
      return $this->_has(1);
    }
    
    /**
     * Clear <hp> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearHp(){
      return $this->_clear(1);
    }
    
    /**
     * Get <hp> value
     *
     * @return int
     */
    public function getHp(){
      return $this->_get(1);
    }
    
    /**
     * Set <hp> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setHp( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <maxHp> has a value
     *
     * @return boolean
     */
    public function hasMaxHp(){
      return $this->_has(2);
    }
    
    /**
     * Clear <maxHp> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearMaxHp(){
      return $this->_clear(2);
    }
    
    /**
     * Get <maxHp> value
     *
     * @return int
     */
    public function getMaxHp(){
      return $this->_get(2);
    }
    
    /**
     * Set <maxHp> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setMaxHp( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <mp> has a value
     *
     * @return boolean
     */
    public function hasMp(){
      return $this->_has(3);
    }
    
    /**
     * Clear <mp> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearMp(){
      return $this->_clear(3);
    }
    
    /**
     * Get <mp> value
     *
     * @return int
     */
    public function getMp(){
      return $this->_get(3);
    }
    
    /**
     * Set <mp> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setMp( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <maxMp> has a value
     *
     * @return boolean
     */
    public function hasMaxMp(){
      return $this->_has(4);
    }
    
    /**
     * Clear <maxMp> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearMaxMp(){
      return $this->_clear(4);
    }
    
    /**
     * Get <maxMp> value
     *
     * @return int
     */
    public function getMaxMp(){
      return $this->_get(4);
    }
    
    /**
     * Set <maxMp> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setMaxMp( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <anger> has a value
     *
     * @return boolean
     */
    public function hasAnger(){
      return $this->_has(5);
    }
    
    /**
     * Clear <anger> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearAnger(){
      return $this->_clear(5);
    }
    
    /**
     * Get <anger> value
     *
     * @return int
     */
    public function getAnger(){
      return $this->_get(5);
    }
    
    /**
     * Set <anger> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setAnger( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <maxAnger> has a value
     *
     * @return boolean
     */
    public function hasMaxAnger(){
      return $this->_has(6);
    }
    
    /**
     * Clear <maxAnger> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearMaxAnger(){
      return $this->_clear(6);
    }
    
    /**
     * Get <maxAnger> value
     *
     * @return int
     */
    public function getMaxAnger(){
      return $this->_get(6);
    }
    
    /**
     * Set <maxAnger> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setMaxAnger( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <vigor> has a value
     *
     * @return boolean
     */
    public function hasVigor(){
      return $this->_has(7);
    }
    
    /**
     * Clear <vigor> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearVigor(){
      return $this->_clear(7);
    }
    
    /**
     * Get <vigor> value
     *
     * @return int
     */
    public function getVigor(){
      return $this->_get(7);
    }
    
    /**
     * Set <vigor> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setVigor( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <attack> has a value
     *
     * @return boolean
     */
    public function hasAttack(){
      return $this->_has(8);
    }
    
    /**
     * Clear <attack> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearAttack(){
      return $this->_clear(8);
    }
    
    /**
     * Get <attack> value
     *
     * @return int
     */
    public function getAttack(){
      return $this->_get(8);
    }
    
    /**
     * Set <attack> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setAttack( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <defense> has a value
     *
     * @return boolean
     */
    public function hasDefense(){
      return $this->_has(9);
    }
    
    /**
     * Clear <defense> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearDefense(){
      return $this->_clear(9);
    }
    
    /**
     * Get <defense> value
     *
     * @return int
     */
    public function getDefense(){
      return $this->_get(9);
    }
    
    /**
     * Set <defense> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setDefense( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <point> has a value
     *
     * @return boolean
     */
    public function hasPoint(){
      return $this->_has(10);
    }
    
    /**
     * Clear <point> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearPoint(){
      return $this->_clear(10);
    }
    
    /**
     * Get <point> value
     *
     * @return int
     */
    public function getPoint(){
      return $this->_get(10);
    }
    
    /**
     * Set <point> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setPoint( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <dodge> has a value
     *
     * @return boolean
     */
    public function hasDodge(){
      return $this->_has(11);
    }
    
    /**
     * Clear <dodge> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearDodge(){
      return $this->_clear(11);
    }
    
    /**
     * Get <dodge> value
     *
     * @return int
     */
    public function getDodge(){
      return $this->_get(11);
    }
    
    /**
     * Set <dodge> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setDodge( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <critical> has a value
     *
     * @return boolean
     */
    public function hasCritical(){
      return $this->_has(12);
    }
    
    /**
     * Clear <critical> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearCritical(){
      return $this->_clear(12);
    }
    
    /**
     * Get <critical> value
     *
     * @return int
     */
    public function getCritical(){
      return $this->_get(12);
    }
    
    /**
     * Set <critical> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setCritical( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <criticalDf> has a value
     *
     * @return boolean
     */
    public function hasCriticalDf(){
      return $this->_has(13);
    }
    
    /**
     * Clear <criticalDf> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearCriticalDf(){
      return $this->_clear(13);
    }
    
    /**
     * Get <criticalDf> value
     *
     * @return int
     */
    public function getCriticalDf(){
      return $this->_get(13);
    }
    
    /**
     * Set <criticalDf> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setCriticalDf( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <criticalEffect> has a value
     *
     * @return boolean
     */
    public function hasCriticalEffect(){
      return $this->_has(14);
    }
    
    /**
     * Clear <criticalEffect> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearCriticalEffect(){
      return $this->_clear(14);
    }
    
    /**
     * Get <criticalEffect> value
     *
     * @return int
     */
    public function getCriticalEffect(){
      return $this->_get(14);
    }
    
    /**
     * Set <criticalEffect> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setCriticalEffect( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <criticalEffectdf> has a value
     *
     * @return boolean
     */
    public function hasCriticalEffectdf(){
      return $this->_has(15);
    }
    
    /**
     * Clear <criticalEffectdf> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearCriticalEffectdf(){
      return $this->_clear(15);
    }
    
    /**
     * Get <criticalEffectdf> value
     *
     * @return int
     */
    public function getCriticalEffectdf(){
      return $this->_get(15);
    }
    
    /**
     * Set <criticalEffectdf> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setCriticalEffectdf( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <iceAttack> has a value
     *
     * @return boolean
     */
    public function hasIceAttack(){
      return $this->_has(16);
    }
    
    /**
     * Clear <iceAttack> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearIceAttack(){
      return $this->_clear(16);
    }
    
    /**
     * Get <iceAttack> value
     *
     * @return int
     */
    public function getIceAttack(){
      return $this->_get(16);
    }
    
    /**
     * Set <iceAttack> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setIceAttack( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <iceDefense> has a value
     *
     * @return boolean
     */
    public function hasIceDefense(){
      return $this->_has(17);
    }
    
    /**
     * Clear <iceDefense> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearIceDefense(){
      return $this->_clear(17);
    }
    
    /**
     * Get <iceDefense> value
     *
     * @return int
     */
    public function getIceDefense(){
      return $this->_get(17);
    }
    
    /**
     * Set <iceDefense> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setIceDefense( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <poisonAttack> has a value
     *
     * @return boolean
     */
    public function hasPoisonAttack(){
      return $this->_has(18);
    }
    
    /**
     * Clear <poisonAttack> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearPoisonAttack(){
      return $this->_clear(18);
    }
    
    /**
     * Get <poisonAttack> value
     *
     * @return int
     */
    public function getPoisonAttack(){
      return $this->_get(18);
    }
    
    /**
     * Set <poisonAttack> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setPoisonAttack( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <poisonDefense> has a value
     *
     * @return boolean
     */
    public function hasPoisonDefense(){
      return $this->_has(19);
    }
    
    /**
     * Clear <poisonDefense> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearPoisonDefense(){
      return $this->_clear(19);
    }
    
    /**
     * Get <poisonDefense> value
     *
     * @return int
     */
    public function getPoisonDefense(){
      return $this->_get(19);
    }
    
    /**
     * Set <poisonDefense> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setPoisonDefense( $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <fireAttack> has a value
     *
     * @return boolean
     */
    public function hasFireAttack(){
      return $this->_has(20);
    }
    
    /**
     * Clear <fireAttack> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearFireAttack(){
      return $this->_clear(20);
    }
    
    /**
     * Get <fireAttack> value
     *
     * @return int
     */
    public function getFireAttack(){
      return $this->_get(20);
    }
    
    /**
     * Set <fireAttack> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setFireAttack( $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <fireDefense> has a value
     *
     * @return boolean
     */
    public function hasFireDefense(){
      return $this->_has(21);
    }
    
    /**
     * Clear <fireDefense> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearFireDefense(){
      return $this->_clear(21);
    }
    
    /**
     * Get <fireDefense> value
     *
     * @return int
     */
    public function getFireDefense(){
      return $this->_get(21);
    }
    
    /**
     * Set <fireDefense> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setFireDefense( $value){
      return $this->_set(21, $value);
    }
    
    /**
     * Check if <speed> has a value
     *
     * @return boolean
     */
    public function hasSpeed(){
      return $this->_has(22);
    }
    
    /**
     * Clear <speed> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearSpeed(){
      return $this->_clear(22);
    }
    
    /**
     * Get <speed> value
     *
     * @return int
     */
    public function getSpeed(){
      return $this->_get(22);
    }
    
    /**
     * Set <speed> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setSpeed( $value){
      return $this->_set(22, $value);
    }
    
    /**
     * Check if <addhp> has a value
     *
     * @return boolean
     */
    public function hasAddhp(){
      return $this->_has(23);
    }
    
    /**
     * Clear <addhp> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearAddhp(){
      return $this->_clear(23);
    }
    
    /**
     * Get <addhp> value
     *
     * @return int
     */
    public function getAddhp(){
      return $this->_get(23);
    }
    
    /**
     * Set <addhp> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setAddhp( $value){
      return $this->_set(23, $value);
    }
    
    /**
     * Check if <addmp> has a value
     *
     * @return boolean
     */
    public function hasAddmp(){
      return $this->_has(24);
    }
    
    /**
     * Clear <addmp> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearAddmp(){
      return $this->_clear(24);
    }
    
    /**
     * Get <addmp> value
     *
     * @return int
     */
    public function getAddmp(){
      return $this->_get(24);
    }
    
    /**
     * Set <addmp> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setAddmp( $value){
      return $this->_set(24, $value);
    }
    
    /**
     * Check if <maxVigor> has a value
     *
     * @return boolean
     */
    public function hasMaxVigor(){
      return $this->_has(25);
    }
    
    /**
     * Clear <maxVigor> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearMaxVigor(){
      return $this->_clear(25);
    }
    
    /**
     * Get <maxVigor> value
     *
     * @return int
     */
    public function getMaxVigor(){
      return $this->_get(25);
    }
    
    /**
     * Set <maxVigor> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setMaxVigor( $value){
      return $this->_set(25, $value);
    }
    
    /**
     * Check if <stopdf> has a value
     *
     * @return boolean
     */
    public function hasStopdf(){
      return $this->_has(26);
    }
    
    /**
     * Clear <stopdf> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearStopdf(){
      return $this->_clear(26);
    }
    
    /**
     * Get <stopdf> value
     *
     * @return int
     */
    public function getStopdf(){
      return $this->_get(26);
    }
    
    /**
     * Set <stopdf> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setStopdf( $value){
      return $this->_set(26, $value);
    }
    
    /**
     * Check if <pulldf> has a value
     *
     * @return boolean
     */
    public function hasPulldf(){
      return $this->_has(27);
    }
    
    /**
     * Clear <pulldf> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearPulldf(){
      return $this->_clear(27);
    }
    
    /**
     * Get <pulldf> value
     *
     * @return int
     */
    public function getPulldf(){
      return $this->_get(27);
    }
    
    /**
     * Set <pulldf> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setPulldf( $value){
      return $this->_set(27, $value);
    }
    
    /**
     * Check if <decSpeeddf> has a value
     *
     * @return boolean
     */
    public function hasDecSpeeddf(){
      return $this->_has(28);
    }
    
    /**
     * Clear <decSpeeddf> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearDecSpeeddf(){
      return $this->_clear(28);
    }
    
    /**
     * Get <decSpeeddf> value
     *
     * @return int
     */
    public function getDecSpeeddf(){
      return $this->_get(28);
    }
    
    /**
     * Set <decSpeeddf> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setDecSpeeddf( $value){
      return $this->_set(28, $value);
    }
    
    /**
     * Check if <retreatdf> has a value
     *
     * @return boolean
     */
    public function hasRetreatdf(){
      return $this->_has(29);
    }
    
    /**
     * Clear <retreatdf> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearRetreatdf(){
      return $this->_clear(29);
    }
    
    /**
     * Get <retreatdf> value
     *
     * @return int
     */
    public function getRetreatdf(){
      return $this->_get(29);
    }
    
    /**
     * Set <retreatdf> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setRetreatdf( $value){
      return $this->_set(29, $value);
    }
    
    /**
     * Check if <silencedf> has a value
     *
     * @return boolean
     */
    public function hasSilencedf(){
      return $this->_has(30);
    }
    
    /**
     * Clear <silencedf> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearSilencedf(){
      return $this->_clear(30);
    }
    
    /**
     * Get <silencedf> value
     *
     * @return int
     */
    public function getSilencedf(){
      return $this->_get(30);
    }
    
    /**
     * Set <silencedf> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setSilencedf( $value){
      return $this->_set(30, $value);
    }
    
    /**
     * Check if <dizzydf> has a value
     *
     * @return boolean
     */
    public function hasDizzydf(){
      return $this->_has(31);
    }
    
    /**
     * Clear <dizzydf> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearDizzydf(){
      return $this->_clear(31);
    }
    
    /**
     * Get <dizzydf> value
     *
     * @return int
     */
    public function getDizzydf(){
      return $this->_get(31);
    }
    
    /**
     * Set <dizzydf> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setDizzydf( $value){
      return $this->_set(31, $value);
    }
    
    /**
     * Check if <defhpper> has a value
     *
     * @return boolean
     */
    public function hasDefhpper(){
      return $this->_has(32);
    }
    
    /**
     * Clear <defhpper> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearDefhpper(){
      return $this->_clear(32);
    }
    
    /**
     * Get <defhpper> value
     *
     * @return int
     */
    public function getDefhpper(){
      return $this->_get(32);
    }
    
    /**
     * Set <defhpper> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setDefhpper( $value){
      return $this->_set(32, $value);
    }
    
    /**
     * Check if <damageaddper> has a value
     *
     * @return boolean
     */
    public function hasDamageaddper(){
      return $this->_has(33);
    }
    
    /**
     * Clear <damageaddper> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearDamageaddper(){
      return $this->_clear(33);
    }
    
    /**
     * Get <damageaddper> value
     *
     * @return int
     */
    public function getDamageaddper(){
      return $this->_get(33);
    }
    
    /**
     * Set <damageaddper> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setDamageaddper( $value){
      return $this->_set(33, $value);
    }
    
    /**
     * Check if <ignoredefense> has a value
     *
     * @return boolean
     */
    public function hasIgnoredefense(){
      return $this->_has(34);
    }
    
    /**
     * Clear <ignoredefense> value
     *
     * @return \utilpb\CombatAttrAll
     */
    public function clearIgnoredefense(){
      return $this->_clear(34);
    }
    
    /**
     * Get <ignoredefense> value
     *
     * @return int
     */
    public function getIgnoredefense(){
      return $this->_get(34);
    }
    
    /**
     * Set <ignoredefense> value
     *
     * @param int $value
     * @return \utilpb\CombatAttrAll
     */
    public function setIgnoredefense( $value){
      return $this->_set(34, $value);
    }
  }
}

namespace utilpb {

  class BaseAttr extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $level = null;
    
    /**  @var int */
    public $exp = null;
    
    /**  @var int */
    public $maxexp = null;
    
    /**  @var int */
    public $occ = null;
    
    /**  @var int */
    public $sex = null;
    
    /**  @var int */
    public $fight = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.BaseAttr');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 level = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 exp = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "exp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 maxexp = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "maxexp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 occ = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "occ";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 sex = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "sex";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 fight = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "fight";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\BaseAttr
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\BaseAttr
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(2);
    }
    
    /**
     * Clear <level> value
     *
     * @return \utilpb\BaseAttr
     */
    public function clearLevel(){
      return $this->_clear(2);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(2);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \utilpb\BaseAttr
     */
    public function setLevel( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <exp> has a value
     *
     * @return boolean
     */
    public function hasExp(){
      return $this->_has(3);
    }
    
    /**
     * Clear <exp> value
     *
     * @return \utilpb\BaseAttr
     */
    public function clearExp(){
      return $this->_clear(3);
    }
    
    /**
     * Get <exp> value
     *
     * @return int
     */
    public function getExp(){
      return $this->_get(3);
    }
    
    /**
     * Set <exp> value
     *
     * @param int $value
     * @return \utilpb\BaseAttr
     */
    public function setExp( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <maxexp> has a value
     *
     * @return boolean
     */
    public function hasMaxexp(){
      return $this->_has(4);
    }
    
    /**
     * Clear <maxexp> value
     *
     * @return \utilpb\BaseAttr
     */
    public function clearMaxexp(){
      return $this->_clear(4);
    }
    
    /**
     * Get <maxexp> value
     *
     * @return int
     */
    public function getMaxexp(){
      return $this->_get(4);
    }
    
    /**
     * Set <maxexp> value
     *
     * @param int $value
     * @return \utilpb\BaseAttr
     */
    public function setMaxexp( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <occ> has a value
     *
     * @return boolean
     */
    public function hasOcc(){
      return $this->_has(5);
    }
    
    /**
     * Clear <occ> value
     *
     * @return \utilpb\BaseAttr
     */
    public function clearOcc(){
      return $this->_clear(5);
    }
    
    /**
     * Get <occ> value
     *
     * @return int
     */
    public function getOcc(){
      return $this->_get(5);
    }
    
    /**
     * Set <occ> value
     *
     * @param int $value
     * @return \utilpb\BaseAttr
     */
    public function setOcc( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <sex> has a value
     *
     * @return boolean
     */
    public function hasSex(){
      return $this->_has(6);
    }
    
    /**
     * Clear <sex> value
     *
     * @return \utilpb\BaseAttr
     */
    public function clearSex(){
      return $this->_clear(6);
    }
    
    /**
     * Get <sex> value
     *
     * @return int
     */
    public function getSex(){
      return $this->_get(6);
    }
    
    /**
     * Set <sex> value
     *
     * @param int $value
     * @return \utilpb\BaseAttr
     */
    public function setSex( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <fight> has a value
     *
     * @return boolean
     */
    public function hasFight(){
      return $this->_has(7);
    }
    
    /**
     * Clear <fight> value
     *
     * @return \utilpb\BaseAttr
     */
    public function clearFight(){
      return $this->_clear(7);
    }
    
    /**
     * Get <fight> value
     *
     * @return int
     */
    public function getFight(){
      return $this->_get(7);
    }
    
    /**
     * Set <fight> value
     *
     * @param int $value
     * @return \utilpb\BaseAttr
     */
    public function setFight( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace utilpb {

  class AdvancedAttr extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $faction = null;
    
    /**  @var int */
    public $position = null;
    
    /**  @var string */
    public $lover = null;
    
    /**  @var string */
    public $teacher = null;
    
    /**  @var int */
    public $vip = null;
    
    /**  @var int */
    public $camp = null;
    
    /**  @var int */
    public $ringLv = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.AdvancedAttr');

      // OPTIONAL STRING faction = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "faction";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 position = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "position";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING lover = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "lover";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING teacher = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "teacher";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 vip = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "vip";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 camp = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "camp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 ringLv = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "ringLv";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <faction> has a value
     *
     * @return boolean
     */
    public function hasFaction(){
      return $this->_has(1);
    }
    
    /**
     * Clear <faction> value
     *
     * @return \utilpb\AdvancedAttr
     */
    public function clearFaction(){
      return $this->_clear(1);
    }
    
    /**
     * Get <faction> value
     *
     * @return string
     */
    public function getFaction(){
      return $this->_get(1);
    }
    
    /**
     * Set <faction> value
     *
     * @param string $value
     * @return \utilpb\AdvancedAttr
     */
    public function setFaction( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <position> has a value
     *
     * @return boolean
     */
    public function hasPosition(){
      return $this->_has(2);
    }
    
    /**
     * Clear <position> value
     *
     * @return \utilpb\AdvancedAttr
     */
    public function clearPosition(){
      return $this->_clear(2);
    }
    
    /**
     * Get <position> value
     *
     * @return int
     */
    public function getPosition(){
      return $this->_get(2);
    }
    
    /**
     * Set <position> value
     *
     * @param int $value
     * @return \utilpb\AdvancedAttr
     */
    public function setPosition( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <lover> has a value
     *
     * @return boolean
     */
    public function hasLover(){
      return $this->_has(3);
    }
    
    /**
     * Clear <lover> value
     *
     * @return \utilpb\AdvancedAttr
     */
    public function clearLover(){
      return $this->_clear(3);
    }
    
    /**
     * Get <lover> value
     *
     * @return string
     */
    public function getLover(){
      return $this->_get(3);
    }
    
    /**
     * Set <lover> value
     *
     * @param string $value
     * @return \utilpb\AdvancedAttr
     */
    public function setLover( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <teacher> has a value
     *
     * @return boolean
     */
    public function hasTeacher(){
      return $this->_has(4);
    }
    
    /**
     * Clear <teacher> value
     *
     * @return \utilpb\AdvancedAttr
     */
    public function clearTeacher(){
      return $this->_clear(4);
    }
    
    /**
     * Get <teacher> value
     *
     * @return string
     */
    public function getTeacher(){
      return $this->_get(4);
    }
    
    /**
     * Set <teacher> value
     *
     * @param string $value
     * @return \utilpb\AdvancedAttr
     */
    public function setTeacher( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <vip> has a value
     *
     * @return boolean
     */
    public function hasVip(){
      return $this->_has(5);
    }
    
    /**
     * Clear <vip> value
     *
     * @return \utilpb\AdvancedAttr
     */
    public function clearVip(){
      return $this->_clear(5);
    }
    
    /**
     * Get <vip> value
     *
     * @return int
     */
    public function getVip(){
      return $this->_get(5);
    }
    
    /**
     * Set <vip> value
     *
     * @param int $value
     * @return \utilpb\AdvancedAttr
     */
    public function setVip( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <camp> has a value
     *
     * @return boolean
     */
    public function hasCamp(){
      return $this->_has(6);
    }
    
    /**
     * Clear <camp> value
     *
     * @return \utilpb\AdvancedAttr
     */
    public function clearCamp(){
      return $this->_clear(6);
    }
    
    /**
     * Get <camp> value
     *
     * @return int
     */
    public function getCamp(){
      return $this->_get(6);
    }
    
    /**
     * Set <camp> value
     *
     * @param int $value
     * @return \utilpb\AdvancedAttr
     */
    public function setCamp( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <ringLv> has a value
     *
     * @return boolean
     */
    public function hasRingLv(){
      return $this->_has(7);
    }
    
    /**
     * Clear <ringLv> value
     *
     * @return \utilpb\AdvancedAttr
     */
    public function clearRingLv(){
      return $this->_clear(7);
    }
    
    /**
     * Get <ringLv> value
     *
     * @return int
     */
    public function getRingLv(){
      return $this->_get(7);
    }
    
    /**
     * Set <ringLv> value
     *
     * @param int $value
     * @return \utilpb\AdvancedAttr
     */
    public function setRingLv( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace utilpb {

  class SitDownInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SitDownInfo');

      // REQUIRED INT32 type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\SitDownInfo
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\SitDownInfo
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace utilpb {

  class AdvancedStatus extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $escort = null;
    
    /**  @var \utilpb\IntDouble */
    public $combatStatus = null;
    
    /**  @var boolean */
    public $ride = null;
    
    /**  @var \utilpb\SitDownInfo */
    public $sitdown = null;
    
    /**  @var boolean */
    public $fly = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.AdvancedStatus');

      // OPTIONAL INT32 escort = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "escort";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE combatStatus = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "combatStatus";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\IntDouble';
      $descriptor->addField($f);

      // OPTIONAL BOOL ride = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "ride";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE sitdown = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "sitdown";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\SitDownInfo';
      $descriptor->addField($f);

      // OPTIONAL BOOL fly = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "fly";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <escort> has a value
     *
     * @return boolean
     */
    public function hasEscort(){
      return $this->_has(1);
    }
    
    /**
     * Clear <escort> value
     *
     * @return \utilpb\AdvancedStatus
     */
    public function clearEscort(){
      return $this->_clear(1);
    }
    
    /**
     * Get <escort> value
     *
     * @return int
     */
    public function getEscort(){
      return $this->_get(1);
    }
    
    /**
     * Set <escort> value
     *
     * @param int $value
     * @return \utilpb\AdvancedStatus
     */
    public function setEscort( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <combatStatus> has a value
     *
     * @return boolean
     */
    public function hasCombatStatus(){
      return $this->_has(2);
    }
    
    /**
     * Clear <combatStatus> value
     *
     * @return \utilpb\AdvancedStatus
     */
    public function clearCombatStatus(){
      return $this->_clear(2);
    }
    
    /**
     * Get <combatStatus> value
     *
     * @return \utilpb\IntDouble
     */
    public function getCombatStatus(){
      return $this->_get(2);
    }
    
    /**
     * Set <combatStatus> value
     *
     * @param \utilpb\IntDouble $value
     * @return \utilpb\AdvancedStatus
     */
    public function setCombatStatus(\utilpb\IntDouble $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <ride> has a value
     *
     * @return boolean
     */
    public function hasRide(){
      return $this->_has(3);
    }
    
    /**
     * Clear <ride> value
     *
     * @return \utilpb\AdvancedStatus
     */
    public function clearRide(){
      return $this->_clear(3);
    }
    
    /**
     * Get <ride> value
     *
     * @return boolean
     */
    public function getRide(){
      return $this->_get(3);
    }
    
    /**
     * Set <ride> value
     *
     * @param boolean $value
     * @return \utilpb\AdvancedStatus
     */
    public function setRide( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <sitdown> has a value
     *
     * @return boolean
     */
    public function hasSitdown(){
      return $this->_has(4);
    }
    
    /**
     * Clear <sitdown> value
     *
     * @return \utilpb\AdvancedStatus
     */
    public function clearSitdown(){
      return $this->_clear(4);
    }
    
    /**
     * Get <sitdown> value
     *
     * @return \utilpb\SitDownInfo
     */
    public function getSitdown(){
      return $this->_get(4);
    }
    
    /**
     * Set <sitdown> value
     *
     * @param \utilpb\SitDownInfo $value
     * @return \utilpb\AdvancedStatus
     */
    public function setSitdown(\utilpb\SitDownInfo $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <fly> has a value
     *
     * @return boolean
     */
    public function hasFly(){
      return $this->_has(5);
    }
    
    /**
     * Clear <fly> value
     *
     * @return \utilpb\AdvancedStatus
     */
    public function clearFly(){
      return $this->_clear(5);
    }
    
    /**
     * Get <fly> value
     *
     * @return boolean
     */
    public function getFly(){
      return $this->_get(5);
    }
    
    /**
     * Set <fly> value
     *
     * @param boolean $value
     * @return \utilpb\AdvancedStatus
     */
    public function setFly( $value){
      return $this->_set(5, $value);
    }
  }
}

