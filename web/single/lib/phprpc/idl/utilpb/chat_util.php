<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/chat_util.proto
//   Date: 2014-12-19 08:23:05

namespace utilpb {

  class Content extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $content = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.Content');

      // REQUIRED STRING content = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <content> value
     *
     * @return \utilpb\Content
     */
    public function clearContent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <content> value
     *
     * @return string
     */
    public function getContent(){
      return $this->_get(1);
    }
    
    /**
     * Set <content> value
     *
     * @param string $value
     * @return \utilpb\Content
     */
    public function setContent( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace utilpb {

  class PlayerInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $gender = null;
    
    /**  @var int */
    public $occ = null;
    
    /**  @var int */
    public $camp = null;
    
    /**  @var int */
    public $vipLv = null;
    
    /**  @var string */
    public $teamid = null;
    
    /**  @var string */
    public $factionid = null;
    
    /**  @var int */
    public $position = null;
    
    /**  @var int */
    public $identity = null;
    
    /**  @var int */
    public $level = null;
    
    /**  @var string */
    public $account = null;
    
    /**  @var string */
    public $serverName = null;
    
    /**  @var string */
    public $platName = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PlayerInfo');

      // REQUIRED MESSAGE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 gender = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "gender";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 occ = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "occ";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 camp = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "camp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 vipLv = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "vipLv";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING teamid = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "teamid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING factionid = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "factionid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 position = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "position";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 identity = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "identity";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 level = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING account = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "account";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING serverName = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "serverName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING platName = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "platName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\PlayerInfo
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PlayerInfo
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\PlayerInfo
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\PlayerInfo
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <gender> has a value
     *
     * @return boolean
     */
    public function hasGender(){
      return $this->_has(3);
    }
    
    /**
     * Clear <gender> value
     *
     * @return \utilpb\PlayerInfo
     */
    public function clearGender(){
      return $this->_clear(3);
    }
    
    /**
     * Get <gender> value
     *
     * @return int
     */
    public function getGender(){
      return $this->_get(3);
    }
    
    /**
     * Set <gender> value
     *
     * @param int $value
     * @return \utilpb\PlayerInfo
     */
    public function setGender( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <occ> has a value
     *
     * @return boolean
     */
    public function hasOcc(){
      return $this->_has(4);
    }
    
    /**
     * Clear <occ> value
     *
     * @return \utilpb\PlayerInfo
     */
    public function clearOcc(){
      return $this->_clear(4);
    }
    
    /**
     * Get <occ> value
     *
     * @return int
     */
    public function getOcc(){
      return $this->_get(4);
    }
    
    /**
     * Set <occ> value
     *
     * @param int $value
     * @return \utilpb\PlayerInfo
     */
    public function setOcc( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <camp> has a value
     *
     * @return boolean
     */
    public function hasCamp(){
      return $this->_has(5);
    }
    
    /**
     * Clear <camp> value
     *
     * @return \utilpb\PlayerInfo
     */
    public function clearCamp(){
      return $this->_clear(5);
    }
    
    /**
     * Get <camp> value
     *
     * @return int
     */
    public function getCamp(){
      return $this->_get(5);
    }
    
    /**
     * Set <camp> value
     *
     * @param int $value
     * @return \utilpb\PlayerInfo
     */
    public function setCamp( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <vipLv> has a value
     *
     * @return boolean
     */
    public function hasVipLv(){
      return $this->_has(6);
    }
    
    /**
     * Clear <vipLv> value
     *
     * @return \utilpb\PlayerInfo
     */
    public function clearVipLv(){
      return $this->_clear(6);
    }
    
    /**
     * Get <vipLv> value
     *
     * @return int
     */
    public function getVipLv(){
      return $this->_get(6);
    }
    
    /**
     * Set <vipLv> value
     *
     * @param int $value
     * @return \utilpb\PlayerInfo
     */
    public function setVipLv( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <teamid> has a value
     *
     * @return boolean
     */
    public function hasTeamid(){
      return $this->_has(7);
    }
    
    /**
     * Clear <teamid> value
     *
     * @return \utilpb\PlayerInfo
     */
    public function clearTeamid(){
      return $this->_clear(7);
    }
    
    /**
     * Get <teamid> value
     *
     * @return string
     */
    public function getTeamid(){
      return $this->_get(7);
    }
    
    /**
     * Set <teamid> value
     *
     * @param string $value
     * @return \utilpb\PlayerInfo
     */
    public function setTeamid( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <factionid> has a value
     *
     * @return boolean
     */
    public function hasFactionid(){
      return $this->_has(8);
    }
    
    /**
     * Clear <factionid> value
     *
     * @return \utilpb\PlayerInfo
     */
    public function clearFactionid(){
      return $this->_clear(8);
    }
    
    /**
     * Get <factionid> value
     *
     * @return string
     */
    public function getFactionid(){
      return $this->_get(8);
    }
    
    /**
     * Set <factionid> value
     *
     * @param string $value
     * @return \utilpb\PlayerInfo
     */
    public function setFactionid( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <position> has a value
     *
     * @return boolean
     */
    public function hasPosition(){
      return $this->_has(9);
    }
    
    /**
     * Clear <position> value
     *
     * @return \utilpb\PlayerInfo
     */
    public function clearPosition(){
      return $this->_clear(9);
    }
    
    /**
     * Get <position> value
     *
     * @return int
     */
    public function getPosition(){
      return $this->_get(9);
    }
    
    /**
     * Set <position> value
     *
     * @param int $value
     * @return \utilpb\PlayerInfo
     */
    public function setPosition( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <identity> has a value
     *
     * @return boolean
     */
    public function hasIdentity(){
      return $this->_has(10);
    }
    
    /**
     * Clear <identity> value
     *
     * @return \utilpb\PlayerInfo
     */
    public function clearIdentity(){
      return $this->_clear(10);
    }
    
    /**
     * Get <identity> value
     *
     * @return int
     */
    public function getIdentity(){
      return $this->_get(10);
    }
    
    /**
     * Set <identity> value
     *
     * @param int $value
     * @return \utilpb\PlayerInfo
     */
    public function setIdentity( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(11);
    }
    
    /**
     * Clear <level> value
     *
     * @return \utilpb\PlayerInfo
     */
    public function clearLevel(){
      return $this->_clear(11);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(11);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \utilpb\PlayerInfo
     */
    public function setLevel( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <account> has a value
     *
     * @return boolean
     */
    public function hasAccount(){
      return $this->_has(12);
    }
    
    /**
     * Clear <account> value
     *
     * @return \utilpb\PlayerInfo
     */
    public function clearAccount(){
      return $this->_clear(12);
    }
    
    /**
     * Get <account> value
     *
     * @return string
     */
    public function getAccount(){
      return $this->_get(12);
    }
    
    /**
     * Set <account> value
     *
     * @param string $value
     * @return \utilpb\PlayerInfo
     */
    public function setAccount( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <serverName> has a value
     *
     * @return boolean
     */
    public function hasServerName(){
      return $this->_has(13);
    }
    
    /**
     * Clear <serverName> value
     *
     * @return \utilpb\PlayerInfo
     */
    public function clearServerName(){
      return $this->_clear(13);
    }
    
    /**
     * Get <serverName> value
     *
     * @return string
     */
    public function getServerName(){
      return $this->_get(13);
    }
    
    /**
     * Set <serverName> value
     *
     * @param string $value
     * @return \utilpb\PlayerInfo
     */
    public function setServerName( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <platName> has a value
     *
     * @return boolean
     */
    public function hasPlatName(){
      return $this->_has(14);
    }
    
    /**
     * Clear <platName> value
     *
     * @return \utilpb\PlayerInfo
     */
    public function clearPlatName(){
      return $this->_clear(14);
    }
    
    /**
     * Get <platName> value
     *
     * @return string
     */
    public function getPlatName(){
      return $this->_get(14);
    }
    
    /**
     * Set <platName> value
     *
     * @param string $value
     * @return \utilpb\PlayerInfo
     */
    public function setPlatName( $value){
      return $this->_set(14, $value);
    }
  }
}

namespace utilpb {

  class Goods extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $type = null;
    
    /**  @var string */
    public $content = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.Goods');

      // REQUIRED INT32 type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING content = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\Goods
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\Goods
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(2);
    }
    
    /**
     * Clear <content> value
     *
     * @return \utilpb\Goods
     */
    public function clearContent(){
      return $this->_clear(2);
    }
    
    /**
     * Get <content> value
     *
     * @return string
     */
    public function getContent(){
      return $this->_get(2);
    }
    
    /**
     * Set <content> value
     *
     * @param string $value
     * @return \utilpb\Goods
     */
    public function setContent( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class MsgClient extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $channel = null;
    
    /**  @var \utilpb\Content */
    public $content = null;
    
    /**  @var \utilpb\Goods[]  */
    public $goodsList = array();
    
    /**  @var \utilpb\ComposeID */
    public $otherId = null;
    
    /**  @var int */
    public $type = null;
    
    /**  @var \utilpb\PlayerInfo */
    public $playerInfo = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.MsgClient');

      // REQUIRED INT32 channel = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "channel";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE content = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\Content';
      $descriptor->addField($f);

      // REPEATED MESSAGE goodsList = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "goodsList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\Goods';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE otherId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "otherId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL INT32 type = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE playerInfo = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "playerInfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\PlayerInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <channel> has a value
     *
     * @return boolean
     */
    public function hasChannel(){
      return $this->_has(1);
    }
    
    /**
     * Clear <channel> value
     *
     * @return \utilpb\MsgClient
     */
    public function clearChannel(){
      return $this->_clear(1);
    }
    
    /**
     * Get <channel> value
     *
     * @return int
     */
    public function getChannel(){
      return $this->_get(1);
    }
    
    /**
     * Set <channel> value
     *
     * @param int $value
     * @return \utilpb\MsgClient
     */
    public function setChannel( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(2);
    }
    
    /**
     * Clear <content> value
     *
     * @return \utilpb\MsgClient
     */
    public function clearContent(){
      return $this->_clear(2);
    }
    
    /**
     * Get <content> value
     *
     * @return \utilpb\Content
     */
    public function getContent(){
      return $this->_get(2);
    }
    
    /**
     * Set <content> value
     *
     * @param \utilpb\Content $value
     * @return \utilpb\MsgClient
     */
    public function setContent(\utilpb\Content $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <goodsList> has a value
     *
     * @return boolean
     */
    public function hasGoodsList(){
      return $this->_has(3);
    }
    
    /**
     * Clear <goodsList> value
     *
     * @return \utilpb\MsgClient
     */
    public function clearGoodsList(){
      return $this->_clear(3);
    }
    
    /**
     * Get <goodsList> value
     *
     * @param int $idx
     * @return \utilpb\Goods
     */
    public function getGoodsList($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <goodsList> value
     *
     * @param \utilpb\Goods $value
     * @return \utilpb\MsgClient
     */
    public function setGoodsList(\utilpb\Goods $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <goodsList>
     *
     * @return \utilpb\Goods[]
     */
    public function getGoodsListList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <goodsList>
     *
     * @param \utilpb\Goods $value
     * @return \utilpb\MsgClient
     */
    public function addGoodsList(\utilpb\Goods $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <otherId> has a value
     *
     * @return boolean
     */
    public function hasOtherId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <otherId> value
     *
     * @return \utilpb\MsgClient
     */
    public function clearOtherId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <otherId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getOtherId(){
      return $this->_get(4);
    }
    
    /**
     * Set <otherId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\MsgClient
     */
    public function setOtherId(\utilpb\ComposeID $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(5);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\MsgClient
     */
    public function clearType(){
      return $this->_clear(5);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(5);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\MsgClient
     */
    public function setType( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <playerInfo> has a value
     *
     * @return boolean
     */
    public function hasPlayerInfo(){
      return $this->_has(6);
    }
    
    /**
     * Clear <playerInfo> value
     *
     * @return \utilpb\MsgClient
     */
    public function clearPlayerInfo(){
      return $this->_clear(6);
    }
    
    /**
     * Get <playerInfo> value
     *
     * @return \utilpb\PlayerInfo
     */
    public function getPlayerInfo(){
      return $this->_get(6);
    }
    
    /**
     * Set <playerInfo> value
     *
     * @param \utilpb\PlayerInfo $value
     * @return \utilpb\MsgClient
     */
    public function setPlayerInfo(\utilpb\PlayerInfo $value){
      return $this->_set(6, $value);
    }
  }
}

namespace utilpb {

  class Msg extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $type = null;
    
    /**  @var int */
    public $channel = null;
    
    /**  @var \utilpb\PlayerInfo */
    public $playerInfo = null;
    
    /**  @var \utilpb\Content */
    public $content = null;
    
    /**  @var \utilpb\Goods[]  */
    public $goodsList = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.Msg');

      // REQUIRED INT32 type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 channel = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "channel";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE playerInfo = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "playerInfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\PlayerInfo';
      $descriptor->addField($f);

      // REQUIRED MESSAGE content = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\Content';
      $descriptor->addField($f);

      // REPEATED MESSAGE goodsList = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "goodsList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\Goods';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\Msg
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\Msg
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <channel> has a value
     *
     * @return boolean
     */
    public function hasChannel(){
      return $this->_has(2);
    }
    
    /**
     * Clear <channel> value
     *
     * @return \utilpb\Msg
     */
    public function clearChannel(){
      return $this->_clear(2);
    }
    
    /**
     * Get <channel> value
     *
     * @return int
     */
    public function getChannel(){
      return $this->_get(2);
    }
    
    /**
     * Set <channel> value
     *
     * @param int $value
     * @return \utilpb\Msg
     */
    public function setChannel( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <playerInfo> has a value
     *
     * @return boolean
     */
    public function hasPlayerInfo(){
      return $this->_has(3);
    }
    
    /**
     * Clear <playerInfo> value
     *
     * @return \utilpb\Msg
     */
    public function clearPlayerInfo(){
      return $this->_clear(3);
    }
    
    /**
     * Get <playerInfo> value
     *
     * @return \utilpb\PlayerInfo
     */
    public function getPlayerInfo(){
      return $this->_get(3);
    }
    
    /**
     * Set <playerInfo> value
     *
     * @param \utilpb\PlayerInfo $value
     * @return \utilpb\Msg
     */
    public function setPlayerInfo(\utilpb\PlayerInfo $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(4);
    }
    
    /**
     * Clear <content> value
     *
     * @return \utilpb\Msg
     */
    public function clearContent(){
      return $this->_clear(4);
    }
    
    /**
     * Get <content> value
     *
     * @return \utilpb\Content
     */
    public function getContent(){
      return $this->_get(4);
    }
    
    /**
     * Set <content> value
     *
     * @param \utilpb\Content $value
     * @return \utilpb\Msg
     */
    public function setContent(\utilpb\Content $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <goodsList> has a value
     *
     * @return boolean
     */
    public function hasGoodsList(){
      return $this->_has(5);
    }
    
    /**
     * Clear <goodsList> value
     *
     * @return \utilpb\Msg
     */
    public function clearGoodsList(){
      return $this->_clear(5);
    }
    
    /**
     * Get <goodsList> value
     *
     * @param int $idx
     * @return \utilpb\Goods
     */
    public function getGoodsList($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <goodsList> value
     *
     * @param \utilpb\Goods $value
     * @return \utilpb\Msg
     */
    public function setGoodsList(\utilpb\Goods $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <goodsList>
     *
     * @return \utilpb\Goods[]
     */
    public function getGoodsListList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <goodsList>
     *
     * @param \utilpb\Goods $value
     * @return \utilpb\Msg
     */
    public function addGoodsList(\utilpb\Goods $value){
     return $this->_add(5, $value);
    }
  }
}

