<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/crossbattle.proto
//   Date: 2014-12-19 08:23:05

namespace utilpb {

  class CBMemberInfo extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $charId = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $fight = null;
    
    /**  @var int */
    public $level = null;
    
    /**  @var int */
    public $occ = null;
    
    /**  @var int */
    public $sex = null;
    
    /**  @var int */
    public $ready = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CBMemberInfo');

      // REQUIRED DOUBLE charId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "charId";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 fight = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "fight";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 level = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 occ = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "occ";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 sex = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "sex";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 ready = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "ready";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <charId> has a value
     *
     * @return boolean
     */
    public function hasCharId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <charId> value
     *
     * @return \utilpb\CBMemberInfo
     */
    public function clearCharId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <charId> value
     *
     * @return float
     */
    public function getCharId(){
      return $this->_get(1);
    }
    
    /**
     * Set <charId> value
     *
     * @param float $value
     * @return \utilpb\CBMemberInfo
     */
    public function setCharId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\CBMemberInfo
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\CBMemberInfo
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <fight> has a value
     *
     * @return boolean
     */
    public function hasFight(){
      return $this->_has(3);
    }
    
    /**
     * Clear <fight> value
     *
     * @return \utilpb\CBMemberInfo
     */
    public function clearFight(){
      return $this->_clear(3);
    }
    
    /**
     * Get <fight> value
     *
     * @return int
     */
    public function getFight(){
      return $this->_get(3);
    }
    
    /**
     * Set <fight> value
     *
     * @param int $value
     * @return \utilpb\CBMemberInfo
     */
    public function setFight( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(4);
    }
    
    /**
     * Clear <level> value
     *
     * @return \utilpb\CBMemberInfo
     */
    public function clearLevel(){
      return $this->_clear(4);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(4);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \utilpb\CBMemberInfo
     */
    public function setLevel( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <occ> has a value
     *
     * @return boolean
     */
    public function hasOcc(){
      return $this->_has(5);
    }
    
    /**
     * Clear <occ> value
     *
     * @return \utilpb\CBMemberInfo
     */
    public function clearOcc(){
      return $this->_clear(5);
    }
    
    /**
     * Get <occ> value
     *
     * @return int
     */
    public function getOcc(){
      return $this->_get(5);
    }
    
    /**
     * Set <occ> value
     *
     * @param int $value
     * @return \utilpb\CBMemberInfo
     */
    public function setOcc( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <sex> has a value
     *
     * @return boolean
     */
    public function hasSex(){
      return $this->_has(6);
    }
    
    /**
     * Clear <sex> value
     *
     * @return \utilpb\CBMemberInfo
     */
    public function clearSex(){
      return $this->_clear(6);
    }
    
    /**
     * Get <sex> value
     *
     * @return int
     */
    public function getSex(){
      return $this->_get(6);
    }
    
    /**
     * Set <sex> value
     *
     * @param int $value
     * @return \utilpb\CBMemberInfo
     */
    public function setSex( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <ready> has a value
     *
     * @return boolean
     */
    public function hasReady(){
      return $this->_has(7);
    }
    
    /**
     * Clear <ready> value
     *
     * @return \utilpb\CBMemberInfo
     */
    public function clearReady(){
      return $this->_clear(7);
    }
    
    /**
     * Get <ready> value
     *
     * @return int
     */
    public function getReady(){
      return $this->_get(7);
    }
    
    /**
     * Set <ready> value
     *
     * @param int $value
     * @return \utilpb\CBMemberInfo
     */
    public function setReady( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace utilpb {

  class CBTeamInfo extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $uuid = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var float */
    public $leader = null;
    
    /**  @var int */
    public $num = null;
    
    /**  @var int */
    public $isConfirm = null;
    
    /**  @var int */
    public $fight = null;
    
    /**  @var int */
    public $point = null;
    
    /**  @var int */
    public $rank = null;
    
    /**  @var \utilpb\CBMemberInfo[]  */
    public $member = array();
    
    /**  @var int[]  */
    public $score = array();
    
    /**  @var string */
    public $platName = null;
    
    /**  @var int */
    public $sid = null;
    
    /**  @var int */
    public $session = null;
    
    /**  @var int */
    public $honor = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CBTeamInfo');

      // OPTIONAL STRING uuid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "uuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE leader = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "leader";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 num = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "num";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 isConfirm = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "isConfirm";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 fight = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "fight";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 point = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "point";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 rank = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "rank";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE member = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "member";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\CBMemberInfo';
      $descriptor->addField($f);

      // REPEATED INT32 score = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "score";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING platName = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "platName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 sid = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "sid";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 session = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "session";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 honor = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "honor";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <uuid> has a value
     *
     * @return boolean
     */
    public function hasUuid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <uuid> value
     *
     * @return \utilpb\CBTeamInfo
     */
    public function clearUuid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <uuid> value
     *
     * @return string
     */
    public function getUuid(){
      return $this->_get(1);
    }
    
    /**
     * Set <uuid> value
     *
     * @param string $value
     * @return \utilpb\CBTeamInfo
     */
    public function setUuid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\CBTeamInfo
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\CBTeamInfo
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <leader> has a value
     *
     * @return boolean
     */
    public function hasLeader(){
      return $this->_has(3);
    }
    
    /**
     * Clear <leader> value
     *
     * @return \utilpb\CBTeamInfo
     */
    public function clearLeader(){
      return $this->_clear(3);
    }
    
    /**
     * Get <leader> value
     *
     * @return float
     */
    public function getLeader(){
      return $this->_get(3);
    }
    
    /**
     * Set <leader> value
     *
     * @param float $value
     * @return \utilpb\CBTeamInfo
     */
    public function setLeader( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <num> has a value
     *
     * @return boolean
     */
    public function hasNum(){
      return $this->_has(4);
    }
    
    /**
     * Clear <num> value
     *
     * @return \utilpb\CBTeamInfo
     */
    public function clearNum(){
      return $this->_clear(4);
    }
    
    /**
     * Get <num> value
     *
     * @return int
     */
    public function getNum(){
      return $this->_get(4);
    }
    
    /**
     * Set <num> value
     *
     * @param int $value
     * @return \utilpb\CBTeamInfo
     */
    public function setNum( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <isConfirm> has a value
     *
     * @return boolean
     */
    public function hasIsConfirm(){
      return $this->_has(5);
    }
    
    /**
     * Clear <isConfirm> value
     *
     * @return \utilpb\CBTeamInfo
     */
    public function clearIsConfirm(){
      return $this->_clear(5);
    }
    
    /**
     * Get <isConfirm> value
     *
     * @return int
     */
    public function getIsConfirm(){
      return $this->_get(5);
    }
    
    /**
     * Set <isConfirm> value
     *
     * @param int $value
     * @return \utilpb\CBTeamInfo
     */
    public function setIsConfirm( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <fight> has a value
     *
     * @return boolean
     */
    public function hasFight(){
      return $this->_has(6);
    }
    
    /**
     * Clear <fight> value
     *
     * @return \utilpb\CBTeamInfo
     */
    public function clearFight(){
      return $this->_clear(6);
    }
    
    /**
     * Get <fight> value
     *
     * @return int
     */
    public function getFight(){
      return $this->_get(6);
    }
    
    /**
     * Set <fight> value
     *
     * @param int $value
     * @return \utilpb\CBTeamInfo
     */
    public function setFight( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <point> has a value
     *
     * @return boolean
     */
    public function hasPoint(){
      return $this->_has(7);
    }
    
    /**
     * Clear <point> value
     *
     * @return \utilpb\CBTeamInfo
     */
    public function clearPoint(){
      return $this->_clear(7);
    }
    
    /**
     * Get <point> value
     *
     * @return int
     */
    public function getPoint(){
      return $this->_get(7);
    }
    
    /**
     * Set <point> value
     *
     * @param int $value
     * @return \utilpb\CBTeamInfo
     */
    public function setPoint( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <rank> has a value
     *
     * @return boolean
     */
    public function hasRank(){
      return $this->_has(8);
    }
    
    /**
     * Clear <rank> value
     *
     * @return \utilpb\CBTeamInfo
     */
    public function clearRank(){
      return $this->_clear(8);
    }
    
    /**
     * Get <rank> value
     *
     * @return int
     */
    public function getRank(){
      return $this->_get(8);
    }
    
    /**
     * Set <rank> value
     *
     * @param int $value
     * @return \utilpb\CBTeamInfo
     */
    public function setRank( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <member> has a value
     *
     * @return boolean
     */
    public function hasMember(){
      return $this->_has(9);
    }
    
    /**
     * Clear <member> value
     *
     * @return \utilpb\CBTeamInfo
     */
    public function clearMember(){
      return $this->_clear(9);
    }
    
    /**
     * Get <member> value
     *
     * @param int $idx
     * @return \utilpb\CBMemberInfo
     */
    public function getMember($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <member> value
     *
     * @param \utilpb\CBMemberInfo $value
     * @return \utilpb\CBTeamInfo
     */
    public function setMember(\utilpb\CBMemberInfo $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <member>
     *
     * @return \utilpb\CBMemberInfo[]
     */
    public function getMemberList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <member>
     *
     * @param \utilpb\CBMemberInfo $value
     * @return \utilpb\CBTeamInfo
     */
    public function addMember(\utilpb\CBMemberInfo $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <score> has a value
     *
     * @return boolean
     */
    public function hasScore(){
      return $this->_has(10);
    }
    
    /**
     * Clear <score> value
     *
     * @return \utilpb\CBTeamInfo
     */
    public function clearScore(){
      return $this->_clear(10);
    }
    
    /**
     * Get <score> value
     *
     * @param int $idx
     * @return int
     */
    public function getScore($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <score> value
     *
     * @param int $value
     * @return \utilpb\CBTeamInfo
     */
    public function setScore( $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <score>
     *
     * @return int[]
     */
    public function getScoreList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <score>
     *
     * @param int $value
     * @return \utilpb\CBTeamInfo
     */
    public function addScore( $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <platName> has a value
     *
     * @return boolean
     */
    public function hasPlatName(){
      return $this->_has(11);
    }
    
    /**
     * Clear <platName> value
     *
     * @return \utilpb\CBTeamInfo
     */
    public function clearPlatName(){
      return $this->_clear(11);
    }
    
    /**
     * Get <platName> value
     *
     * @return string
     */
    public function getPlatName(){
      return $this->_get(11);
    }
    
    /**
     * Set <platName> value
     *
     * @param string $value
     * @return \utilpb\CBTeamInfo
     */
    public function setPlatName( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <sid> has a value
     *
     * @return boolean
     */
    public function hasSid(){
      return $this->_has(12);
    }
    
    /**
     * Clear <sid> value
     *
     * @return \utilpb\CBTeamInfo
     */
    public function clearSid(){
      return $this->_clear(12);
    }
    
    /**
     * Get <sid> value
     *
     * @return int
     */
    public function getSid(){
      return $this->_get(12);
    }
    
    /**
     * Set <sid> value
     *
     * @param int $value
     * @return \utilpb\CBTeamInfo
     */
    public function setSid( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <session> has a value
     *
     * @return boolean
     */
    public function hasSession(){
      return $this->_has(13);
    }
    
    /**
     * Clear <session> value
     *
     * @return \utilpb\CBTeamInfo
     */
    public function clearSession(){
      return $this->_clear(13);
    }
    
    /**
     * Get <session> value
     *
     * @return int
     */
    public function getSession(){
      return $this->_get(13);
    }
    
    /**
     * Set <session> value
     *
     * @param int $value
     * @return \utilpb\CBTeamInfo
     */
    public function setSession( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <honor> has a value
     *
     * @return boolean
     */
    public function hasHonor(){
      return $this->_has(14);
    }
    
    /**
     * Clear <honor> value
     *
     * @return \utilpb\CBTeamInfo
     */
    public function clearHonor(){
      return $this->_clear(14);
    }
    
    /**
     * Get <honor> value
     *
     * @return int
     */
    public function getHonor(){
      return $this->_get(14);
    }
    
    /**
     * Set <honor> value
     *
     * @param int $value
     * @return \utilpb\CBTeamInfo
     */
    public function setHonor( $value){
      return $this->_set(14, $value);
    }
  }
}

namespace utilpb {

  class CBCoSignUp extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $flag = null;
    
    /**  @var string */
    public $uuid = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CBCoSignUp');

      // OPTIONAL INT32 flag = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING uuid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "uuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(1);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\CBCoSignUp
     */
    public function clearFlag(){
      return $this->_clear(1);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(1);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\CBCoSignUp
     */
    public function setFlag( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <uuid> has a value
     *
     * @return boolean
     */
    public function hasUuid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <uuid> value
     *
     * @return \utilpb\CBCoSignUp
     */
    public function clearUuid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <uuid> value
     *
     * @return string
     */
    public function getUuid(){
      return $this->_get(2);
    }
    
    /**
     * Set <uuid> value
     *
     * @param string $value
     * @return \utilpb\CBCoSignUp
     */
    public function setUuid( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class CBSvSignUp extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\CBMemberInfo */
    public $member = null;
    
    /**  @var \utilpb\CBCoSignUp */
    public $info = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CBSvSignUp');

      // REQUIRED MESSAGE member = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "member";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\CBMemberInfo';
      $descriptor->addField($f);

      // REQUIRED MESSAGE info = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\CBCoSignUp';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <member> has a value
     *
     * @return boolean
     */
    public function hasMember(){
      return $this->_has(1);
    }
    
    /**
     * Clear <member> value
     *
     * @return \utilpb\CBSvSignUp
     */
    public function clearMember(){
      return $this->_clear(1);
    }
    
    /**
     * Get <member> value
     *
     * @return \utilpb\CBMemberInfo
     */
    public function getMember(){
      return $this->_get(1);
    }
    
    /**
     * Set <member> value
     *
     * @param \utilpb\CBMemberInfo $value
     * @return \utilpb\CBSvSignUp
     */
    public function setMember(\utilpb\CBMemberInfo $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(2);
    }
    
    /**
     * Clear <info> value
     *
     * @return \utilpb\CBSvSignUp
     */
    public function clearInfo(){
      return $this->_clear(2);
    }
    
    /**
     * Get <info> value
     *
     * @return \utilpb\CBCoSignUp
     */
    public function getInfo(){
      return $this->_get(2);
    }
    
    /**
     * Set <info> value
     *
     * @param \utilpb\CBCoSignUp $value
     * @return \utilpb\CBSvSignUp
     */
    public function setInfo(\utilpb\CBCoSignUp $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class CBRqCaptainOper extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $flag = null;
    
    /**  @var float */
    public $charId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CBRqCaptainOper');

      // REQUIRED INT32 flag = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE charId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "charId";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(1);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\CBRqCaptainOper
     */
    public function clearFlag(){
      return $this->_clear(1);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(1);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\CBRqCaptainOper
     */
    public function setFlag( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <charId> has a value
     *
     * @return boolean
     */
    public function hasCharId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <charId> value
     *
     * @return \utilpb\CBRqCaptainOper
     */
    public function clearCharId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <charId> value
     *
     * @return float
     */
    public function getCharId(){
      return $this->_get(2);
    }
    
    /**
     * Set <charId> value
     *
     * @param float $value
     * @return \utilpb\CBRqCaptainOper
     */
    public function setCharId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class CBRtCaptainOper extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $flag = null;
    
    /**  @var int */
    public $code = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CBRtCaptainOper');

      // REQUIRED INT32 flag = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 code = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(1);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\CBRtCaptainOper
     */
    public function clearFlag(){
      return $this->_clear(1);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(1);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\CBRtCaptainOper
     */
    public function setFlag( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(2);
    }
    
    /**
     * Clear <code> value
     *
     * @return \utilpb\CBRtCaptainOper
     */
    public function clearCode(){
      return $this->_clear(2);
    }
    
    /**
     * Get <code> value
     *
     * @return int
     */
    public function getCode(){
      return $this->_get(2);
    }
    
    /**
     * Set <code> value
     *
     * @param int $value
     * @return \utilpb\CBRtCaptainOper
     */
    public function setCode( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class CBSignUpInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\CBTeamInfo */
    public $team = null;
    
    /**  @var \utilpb\CBTeamInfo[]  */
    public $other = array();
    
    /**  @var int */
    public $total = null;
    
    /**  @var int */
    public $page = null;
    
    /**  @var int */
    public $deadline = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CBSignUpInfo');

      // OPTIONAL MESSAGE team = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "team";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\CBTeamInfo';
      $descriptor->addField($f);

      // REPEATED MESSAGE other = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "other";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\CBTeamInfo';
      $descriptor->addField($f);

      // REQUIRED INT32 total = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "total";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 page = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "page";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 deadline = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "deadline";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <team> has a value
     *
     * @return boolean
     */
    public function hasTeam(){
      return $this->_has(1);
    }
    
    /**
     * Clear <team> value
     *
     * @return \utilpb\CBSignUpInfo
     */
    public function clearTeam(){
      return $this->_clear(1);
    }
    
    /**
     * Get <team> value
     *
     * @return \utilpb\CBTeamInfo
     */
    public function getTeam(){
      return $this->_get(1);
    }
    
    /**
     * Set <team> value
     *
     * @param \utilpb\CBTeamInfo $value
     * @return \utilpb\CBSignUpInfo
     */
    public function setTeam(\utilpb\CBTeamInfo $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <other> has a value
     *
     * @return boolean
     */
    public function hasOther(){
      return $this->_has(2);
    }
    
    /**
     * Clear <other> value
     *
     * @return \utilpb\CBSignUpInfo
     */
    public function clearOther(){
      return $this->_clear(2);
    }
    
    /**
     * Get <other> value
     *
     * @param int $idx
     * @return \utilpb\CBTeamInfo
     */
    public function getOther($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <other> value
     *
     * @param \utilpb\CBTeamInfo $value
     * @return \utilpb\CBSignUpInfo
     */
    public function setOther(\utilpb\CBTeamInfo $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <other>
     *
     * @return \utilpb\CBTeamInfo[]
     */
    public function getOtherList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <other>
     *
     * @param \utilpb\CBTeamInfo $value
     * @return \utilpb\CBSignUpInfo
     */
    public function addOther(\utilpb\CBTeamInfo $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <total> has a value
     *
     * @return boolean
     */
    public function hasTotal(){
      return $this->_has(3);
    }
    
    /**
     * Clear <total> value
     *
     * @return \utilpb\CBSignUpInfo
     */
    public function clearTotal(){
      return $this->_clear(3);
    }
    
    /**
     * Get <total> value
     *
     * @return int
     */
    public function getTotal(){
      return $this->_get(3);
    }
    
    /**
     * Set <total> value
     *
     * @param int $value
     * @return \utilpb\CBSignUpInfo
     */
    public function setTotal( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <page> has a value
     *
     * @return boolean
     */
    public function hasPage(){
      return $this->_has(4);
    }
    
    /**
     * Clear <page> value
     *
     * @return \utilpb\CBSignUpInfo
     */
    public function clearPage(){
      return $this->_clear(4);
    }
    
    /**
     * Get <page> value
     *
     * @return int
     */
    public function getPage(){
      return $this->_get(4);
    }
    
    /**
     * Set <page> value
     *
     * @param int $value
     * @return \utilpb\CBSignUpInfo
     */
    public function setPage( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <deadline> has a value
     *
     * @return boolean
     */
    public function hasDeadline(){
      return $this->_has(5);
    }
    
    /**
     * Clear <deadline> value
     *
     * @return \utilpb\CBSignUpInfo
     */
    public function clearDeadline(){
      return $this->_clear(5);
    }
    
    /**
     * Get <deadline> value
     *
     * @return int
     */
    public function getDeadline(){
      return $this->_get(5);
    }
    
    /**
     * Set <deadline> value
     *
     * @param int $value
     * @return \utilpb\CBSignUpInfo
     */
    public function setDeadline( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace utilpb {

  class CBRecordItem extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $ta = null;
    
    /**  @var string */
    public $tb = null;
    
    /**  @var int */
    public $res = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CBRecordItem');

      // OPTIONAL STRING ta = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "ta";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING tb = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "tb";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 res = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "res";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <ta> has a value
     *
     * @return boolean
     */
    public function hasTa(){
      return $this->_has(1);
    }
    
    /**
     * Clear <ta> value
     *
     * @return \utilpb\CBRecordItem
     */
    public function clearTa(){
      return $this->_clear(1);
    }
    
    /**
     * Get <ta> value
     *
     * @return string
     */
    public function getTa(){
      return $this->_get(1);
    }
    
    /**
     * Set <ta> value
     *
     * @param string $value
     * @return \utilpb\CBRecordItem
     */
    public function setTa( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <tb> has a value
     *
     * @return boolean
     */
    public function hasTb(){
      return $this->_has(2);
    }
    
    /**
     * Clear <tb> value
     *
     * @return \utilpb\CBRecordItem
     */
    public function clearTb(){
      return $this->_clear(2);
    }
    
    /**
     * Get <tb> value
     *
     * @return string
     */
    public function getTb(){
      return $this->_get(2);
    }
    
    /**
     * Set <tb> value
     *
     * @param string $value
     * @return \utilpb\CBRecordItem
     */
    public function setTb( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <res> has a value
     *
     * @return boolean
     */
    public function hasRes(){
      return $this->_has(3);
    }
    
    /**
     * Clear <res> value
     *
     * @return \utilpb\CBRecordItem
     */
    public function clearRes(){
      return $this->_clear(3);
    }
    
    /**
     * Get <res> value
     *
     * @return int
     */
    public function getRes(){
      return $this->_get(3);
    }
    
    /**
     * Set <res> value
     *
     * @param int $value
     * @return \utilpb\CBRecordItem
     */
    public function setRes( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class CBPointsRace extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\CBTeamInfo */
    public $team = null;
    
    /**  @var \utilpb\CBTeamInfo[]  */
    public $other = array();
    
    /**  @var \utilpb\CBRecordItem[]  */
    public $record = array();
    
    /**  @var int */
    public $deadline = null;
    
    /**  @var int */
    public $total = null;
    
    /**  @var int */
    public $page = null;
    
    /**  @var int */
    public $point = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CBPointsRace');

      // OPTIONAL MESSAGE team = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "team";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\CBTeamInfo';
      $descriptor->addField($f);

      // REPEATED MESSAGE other = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "other";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\CBTeamInfo';
      $descriptor->addField($f);

      // REPEATED MESSAGE record = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "record";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\CBRecordItem';
      $descriptor->addField($f);

      // OPTIONAL INT32 deadline = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "deadline";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 total = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "total";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 page = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "page";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 point = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "point";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <team> has a value
     *
     * @return boolean
     */
    public function hasTeam(){
      return $this->_has(1);
    }
    
    /**
     * Clear <team> value
     *
     * @return \utilpb\CBPointsRace
     */
    public function clearTeam(){
      return $this->_clear(1);
    }
    
    /**
     * Get <team> value
     *
     * @return \utilpb\CBTeamInfo
     */
    public function getTeam(){
      return $this->_get(1);
    }
    
    /**
     * Set <team> value
     *
     * @param \utilpb\CBTeamInfo $value
     * @return \utilpb\CBPointsRace
     */
    public function setTeam(\utilpb\CBTeamInfo $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <other> has a value
     *
     * @return boolean
     */
    public function hasOther(){
      return $this->_has(2);
    }
    
    /**
     * Clear <other> value
     *
     * @return \utilpb\CBPointsRace
     */
    public function clearOther(){
      return $this->_clear(2);
    }
    
    /**
     * Get <other> value
     *
     * @param int $idx
     * @return \utilpb\CBTeamInfo
     */
    public function getOther($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <other> value
     *
     * @param \utilpb\CBTeamInfo $value
     * @return \utilpb\CBPointsRace
     */
    public function setOther(\utilpb\CBTeamInfo $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <other>
     *
     * @return \utilpb\CBTeamInfo[]
     */
    public function getOtherList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <other>
     *
     * @param \utilpb\CBTeamInfo $value
     * @return \utilpb\CBPointsRace
     */
    public function addOther(\utilpb\CBTeamInfo $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <record> has a value
     *
     * @return boolean
     */
    public function hasRecord(){
      return $this->_has(3);
    }
    
    /**
     * Clear <record> value
     *
     * @return \utilpb\CBPointsRace
     */
    public function clearRecord(){
      return $this->_clear(3);
    }
    
    /**
     * Get <record> value
     *
     * @param int $idx
     * @return \utilpb\CBRecordItem
     */
    public function getRecord($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <record> value
     *
     * @param \utilpb\CBRecordItem $value
     * @return \utilpb\CBPointsRace
     */
    public function setRecord(\utilpb\CBRecordItem $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <record>
     *
     * @return \utilpb\CBRecordItem[]
     */
    public function getRecordList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <record>
     *
     * @param \utilpb\CBRecordItem $value
     * @return \utilpb\CBPointsRace
     */
    public function addRecord(\utilpb\CBRecordItem $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <deadline> has a value
     *
     * @return boolean
     */
    public function hasDeadline(){
      return $this->_has(4);
    }
    
    /**
     * Clear <deadline> value
     *
     * @return \utilpb\CBPointsRace
     */
    public function clearDeadline(){
      return $this->_clear(4);
    }
    
    /**
     * Get <deadline> value
     *
     * @return int
     */
    public function getDeadline(){
      return $this->_get(4);
    }
    
    /**
     * Set <deadline> value
     *
     * @param int $value
     * @return \utilpb\CBPointsRace
     */
    public function setDeadline( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <total> has a value
     *
     * @return boolean
     */
    public function hasTotal(){
      return $this->_has(5);
    }
    
    /**
     * Clear <total> value
     *
     * @return \utilpb\CBPointsRace
     */
    public function clearTotal(){
      return $this->_clear(5);
    }
    
    /**
     * Get <total> value
     *
     * @return int
     */
    public function getTotal(){
      return $this->_get(5);
    }
    
    /**
     * Set <total> value
     *
     * @param int $value
     * @return \utilpb\CBPointsRace
     */
    public function setTotal( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <page> has a value
     *
     * @return boolean
     */
    public function hasPage(){
      return $this->_has(6);
    }
    
    /**
     * Clear <page> value
     *
     * @return \utilpb\CBPointsRace
     */
    public function clearPage(){
      return $this->_clear(6);
    }
    
    /**
     * Get <page> value
     *
     * @return int
     */
    public function getPage(){
      return $this->_get(6);
    }
    
    /**
     * Set <page> value
     *
     * @param int $value
     * @return \utilpb\CBPointsRace
     */
    public function setPage( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <point> has a value
     *
     * @return boolean
     */
    public function hasPoint(){
      return $this->_has(7);
    }
    
    /**
     * Clear <point> value
     *
     * @return \utilpb\CBPointsRace
     */
    public function clearPoint(){
      return $this->_clear(7);
    }
    
    /**
     * Get <point> value
     *
     * @return int
     */
    public function getPoint(){
      return $this->_get(7);
    }
    
    /**
     * Set <point> value
     *
     * @param int $value
     * @return \utilpb\CBPointsRace
     */
    public function setPoint( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace utilpb {

  class CBFinalsInfo extends \DrSlump\Protobuf\Message {

    /**  @var int[]  */
    public $stage1 = array();
    
    /**  @var int[]  */
    public $stage2 = array();
    
    /**  @var int[]  */
    public $stage3 = array();
    
    /**  @var int[]  */
    public $stage4 = array();
    
    /**  @var int[]  */
    public $stage5 = array();
    
    /**  @var \utilpb\CBTeamInfo[]  */
    public $team = array();
    
    /**  @var int */
    public $stage = null;
    
    /**  @var int */
    public $deadline = null;
    
    /**  @var int */
    public $session = null;
    
    /**  @var int */
    public $status = null;
    
    /**  @var \utilpb\CBBetInfo */
    public $betflag = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CBFinalsInfo');

      // REPEATED INT32 stage1 = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "stage1";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED INT32 stage2 = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "stage2";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED INT32 stage3 = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "stage3";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED INT32 stage4 = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "stage4";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED INT32 stage5 = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "stage5";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE team = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "team";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\CBTeamInfo';
      $descriptor->addField($f);

      // REQUIRED INT32 stage = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "stage";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 deadline = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "deadline";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 session = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "session";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 status = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE betflag = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "betflag";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\CBBetInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <stage1> has a value
     *
     * @return boolean
     */
    public function hasStage1(){
      return $this->_has(1);
    }
    
    /**
     * Clear <stage1> value
     *
     * @return \utilpb\CBFinalsInfo
     */
    public function clearStage1(){
      return $this->_clear(1);
    }
    
    /**
     * Get <stage1> value
     *
     * @param int $idx
     * @return int
     */
    public function getStage1($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <stage1> value
     *
     * @param int $value
     * @return \utilpb\CBFinalsInfo
     */
    public function setStage1( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <stage1>
     *
     * @return int[]
     */
    public function getStage1List(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <stage1>
     *
     * @param int $value
     * @return \utilpb\CBFinalsInfo
     */
    public function addStage1( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <stage2> has a value
     *
     * @return boolean
     */
    public function hasStage2(){
      return $this->_has(2);
    }
    
    /**
     * Clear <stage2> value
     *
     * @return \utilpb\CBFinalsInfo
     */
    public function clearStage2(){
      return $this->_clear(2);
    }
    
    /**
     * Get <stage2> value
     *
     * @param int $idx
     * @return int
     */
    public function getStage2($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <stage2> value
     *
     * @param int $value
     * @return \utilpb\CBFinalsInfo
     */
    public function setStage2( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <stage2>
     *
     * @return int[]
     */
    public function getStage2List(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <stage2>
     *
     * @param int $value
     * @return \utilpb\CBFinalsInfo
     */
    public function addStage2( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <stage3> has a value
     *
     * @return boolean
     */
    public function hasStage3(){
      return $this->_has(3);
    }
    
    /**
     * Clear <stage3> value
     *
     * @return \utilpb\CBFinalsInfo
     */
    public function clearStage3(){
      return $this->_clear(3);
    }
    
    /**
     * Get <stage3> value
     *
     * @param int $idx
     * @return int
     */
    public function getStage3($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <stage3> value
     *
     * @param int $value
     * @return \utilpb\CBFinalsInfo
     */
    public function setStage3( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <stage3>
     *
     * @return int[]
     */
    public function getStage3List(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <stage3>
     *
     * @param int $value
     * @return \utilpb\CBFinalsInfo
     */
    public function addStage3( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <stage4> has a value
     *
     * @return boolean
     */
    public function hasStage4(){
      return $this->_has(4);
    }
    
    /**
     * Clear <stage4> value
     *
     * @return \utilpb\CBFinalsInfo
     */
    public function clearStage4(){
      return $this->_clear(4);
    }
    
    /**
     * Get <stage4> value
     *
     * @param int $idx
     * @return int
     */
    public function getStage4($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <stage4> value
     *
     * @param int $value
     * @return \utilpb\CBFinalsInfo
     */
    public function setStage4( $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <stage4>
     *
     * @return int[]
     */
    public function getStage4List(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <stage4>
     *
     * @param int $value
     * @return \utilpb\CBFinalsInfo
     */
    public function addStage4( $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <stage5> has a value
     *
     * @return boolean
     */
    public function hasStage5(){
      return $this->_has(5);
    }
    
    /**
     * Clear <stage5> value
     *
     * @return \utilpb\CBFinalsInfo
     */
    public function clearStage5(){
      return $this->_clear(5);
    }
    
    /**
     * Get <stage5> value
     *
     * @param int $idx
     * @return int
     */
    public function getStage5($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <stage5> value
     *
     * @param int $value
     * @return \utilpb\CBFinalsInfo
     */
    public function setStage5( $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <stage5>
     *
     * @return int[]
     */
    public function getStage5List(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <stage5>
     *
     * @param int $value
     * @return \utilpb\CBFinalsInfo
     */
    public function addStage5( $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <team> has a value
     *
     * @return boolean
     */
    public function hasTeam(){
      return $this->_has(6);
    }
    
    /**
     * Clear <team> value
     *
     * @return \utilpb\CBFinalsInfo
     */
    public function clearTeam(){
      return $this->_clear(6);
    }
    
    /**
     * Get <team> value
     *
     * @param int $idx
     * @return \utilpb\CBTeamInfo
     */
    public function getTeam($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <team> value
     *
     * @param \utilpb\CBTeamInfo $value
     * @return \utilpb\CBFinalsInfo
     */
    public function setTeam(\utilpb\CBTeamInfo $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <team>
     *
     * @return \utilpb\CBTeamInfo[]
     */
    public function getTeamList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <team>
     *
     * @param \utilpb\CBTeamInfo $value
     * @return \utilpb\CBFinalsInfo
     */
    public function addTeam(\utilpb\CBTeamInfo $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <stage> has a value
     *
     * @return boolean
     */
    public function hasStage(){
      return $this->_has(7);
    }
    
    /**
     * Clear <stage> value
     *
     * @return \utilpb\CBFinalsInfo
     */
    public function clearStage(){
      return $this->_clear(7);
    }
    
    /**
     * Get <stage> value
     *
     * @return int
     */
    public function getStage(){
      return $this->_get(7);
    }
    
    /**
     * Set <stage> value
     *
     * @param int $value
     * @return \utilpb\CBFinalsInfo
     */
    public function setStage( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <deadline> has a value
     *
     * @return boolean
     */
    public function hasDeadline(){
      return $this->_has(8);
    }
    
    /**
     * Clear <deadline> value
     *
     * @return \utilpb\CBFinalsInfo
     */
    public function clearDeadline(){
      return $this->_clear(8);
    }
    
    /**
     * Get <deadline> value
     *
     * @return int
     */
    public function getDeadline(){
      return $this->_get(8);
    }
    
    /**
     * Set <deadline> value
     *
     * @param int $value
     * @return \utilpb\CBFinalsInfo
     */
    public function setDeadline( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <session> has a value
     *
     * @return boolean
     */
    public function hasSession(){
      return $this->_has(9);
    }
    
    /**
     * Clear <session> value
     *
     * @return \utilpb\CBFinalsInfo
     */
    public function clearSession(){
      return $this->_clear(9);
    }
    
    /**
     * Get <session> value
     *
     * @return int
     */
    public function getSession(){
      return $this->_get(9);
    }
    
    /**
     * Set <session> value
     *
     * @param int $value
     * @return \utilpb\CBFinalsInfo
     */
    public function setSession( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(10);
    }
    
    /**
     * Clear <status> value
     *
     * @return \utilpb\CBFinalsInfo
     */
    public function clearStatus(){
      return $this->_clear(10);
    }
    
    /**
     * Get <status> value
     *
     * @return int
     */
    public function getStatus(){
      return $this->_get(10);
    }
    
    /**
     * Set <status> value
     *
     * @param int $value
     * @return \utilpb\CBFinalsInfo
     */
    public function setStatus( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <betflag> has a value
     *
     * @return boolean
     */
    public function hasBetflag(){
      return $this->_has(11);
    }
    
    /**
     * Clear <betflag> value
     *
     * @return \utilpb\CBFinalsInfo
     */
    public function clearBetflag(){
      return $this->_clear(11);
    }
    
    /**
     * Get <betflag> value
     *
     * @return \utilpb\CBBetInfo
     */
    public function getBetflag(){
      return $this->_get(11);
    }
    
    /**
     * Set <betflag> value
     *
     * @param \utilpb\CBBetInfo $value
     * @return \utilpb\CBFinalsInfo
     */
    public function setBetflag(\utilpb\CBBetInfo $value){
      return $this->_set(11, $value);
    }
  }
}

namespace utilpb {

  class CBChampionList extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\CBTeamInfo[]  */
    public $team = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CBChampionList');

      // REPEATED MESSAGE team = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "team";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\CBTeamInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <team> has a value
     *
     * @return boolean
     */
    public function hasTeam(){
      return $this->_has(1);
    }
    
    /**
     * Clear <team> value
     *
     * @return \utilpb\CBChampionList
     */
    public function clearTeam(){
      return $this->_clear(1);
    }
    
    /**
     * Get <team> value
     *
     * @param int $idx
     * @return \utilpb\CBTeamInfo
     */
    public function getTeam($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <team> value
     *
     * @param \utilpb\CBTeamInfo $value
     * @return \utilpb\CBChampionList
     */
    public function setTeam(\utilpb\CBTeamInfo $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <team>
     *
     * @return \utilpb\CBTeamInfo[]
     */
    public function getTeamList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <team>
     *
     * @param \utilpb\CBTeamInfo $value
     * @return \utilpb\CBChampionList
     */
    public function addTeam(\utilpb\CBTeamInfo $value){
     return $this->_add(1, $value);
    }
  }
}

namespace utilpb {

  class CBRqGetInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $index = null;
    
    /**  @var int */
    public $flag = null;
    
    /**  @var int */
    public $page = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CBRqGetInfo');

      // REQUIRED INT32 index = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 flag = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 page = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "page";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(1);
    }
    
    /**
     * Clear <index> value
     *
     * @return \utilpb\CBRqGetInfo
     */
    public function clearIndex(){
      return $this->_clear(1);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(1);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \utilpb\CBRqGetInfo
     */
    public function setIndex( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(2);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\CBRqGetInfo
     */
    public function clearFlag(){
      return $this->_clear(2);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(2);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\CBRqGetInfo
     */
    public function setFlag( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <page> has a value
     *
     * @return boolean
     */
    public function hasPage(){
      return $this->_has(3);
    }
    
    /**
     * Clear <page> value
     *
     * @return \utilpb\CBRqGetInfo
     */
    public function clearPage(){
      return $this->_clear(3);
    }
    
    /**
     * Get <page> value
     *
     * @return int
     */
    public function getPage(){
      return $this->_get(3);
    }
    
    /**
     * Set <page> value
     *
     * @param int $value
     * @return \utilpb\CBRqGetInfo
     */
    public function setPage( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class CBPanelInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $status = null;
    
    /**  @var \utilpb\CBSignUpInfo */
    public $signup = null;
    
    /**  @var \utilpb\CBPointsRace */
    public $pointrace = null;
    
    /**  @var \utilpb\CBFinalsInfo */
    public $final = null;
    
    /**  @var \utilpb\CBChampionList */
    public $champion = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CBPanelInfo');

      // REQUIRED INT32 status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE signup = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "signup";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\CBSignUpInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE pointrace = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "pointrace";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\CBPointsRace';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE final = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "final";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\CBFinalsInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE champion = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "champion";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\CBChampionList';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \utilpb\CBPanelInfo
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return int
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param int $value
     * @return \utilpb\CBPanelInfo
     */
    public function setStatus( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <signup> has a value
     *
     * @return boolean
     */
    public function hasSignup(){
      return $this->_has(2);
    }
    
    /**
     * Clear <signup> value
     *
     * @return \utilpb\CBPanelInfo
     */
    public function clearSignup(){
      return $this->_clear(2);
    }
    
    /**
     * Get <signup> value
     *
     * @return \utilpb\CBSignUpInfo
     */
    public function getSignup(){
      return $this->_get(2);
    }
    
    /**
     * Set <signup> value
     *
     * @param \utilpb\CBSignUpInfo $value
     * @return \utilpb\CBPanelInfo
     */
    public function setSignup(\utilpb\CBSignUpInfo $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <pointrace> has a value
     *
     * @return boolean
     */
    public function hasPointrace(){
      return $this->_has(3);
    }
    
    /**
     * Clear <pointrace> value
     *
     * @return \utilpb\CBPanelInfo
     */
    public function clearPointrace(){
      return $this->_clear(3);
    }
    
    /**
     * Get <pointrace> value
     *
     * @return \utilpb\CBPointsRace
     */
    public function getPointrace(){
      return $this->_get(3);
    }
    
    /**
     * Set <pointrace> value
     *
     * @param \utilpb\CBPointsRace $value
     * @return \utilpb\CBPanelInfo
     */
    public function setPointrace(\utilpb\CBPointsRace $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <final> has a value
     *
     * @return boolean
     */
    public function hasFinal(){
      return $this->_has(4);
    }
    
    /**
     * Clear <final> value
     *
     * @return \utilpb\CBPanelInfo
     */
    public function clearFinal(){
      return $this->_clear(4);
    }
    
    /**
     * Get <final> value
     *
     * @return \utilpb\CBFinalsInfo
     */
    public function getFinal(){
      return $this->_get(4);
    }
    
    /**
     * Set <final> value
     *
     * @param \utilpb\CBFinalsInfo $value
     * @return \utilpb\CBPanelInfo
     */
    public function setFinal(\utilpb\CBFinalsInfo $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <champion> has a value
     *
     * @return boolean
     */
    public function hasChampion(){
      return $this->_has(5);
    }
    
    /**
     * Clear <champion> value
     *
     * @return \utilpb\CBPanelInfo
     */
    public function clearChampion(){
      return $this->_clear(5);
    }
    
    /**
     * Get <champion> value
     *
     * @return \utilpb\CBChampionList
     */
    public function getChampion(){
      return $this->_get(5);
    }
    
    /**
     * Set <champion> value
     *
     * @param \utilpb\CBChampionList $value
     * @return \utilpb\CBPanelInfo
     */
    public function setChampion(\utilpb\CBChampionList $value){
      return $this->_set(5, $value);
    }
  }
}

namespace utilpb {

  class CBResult extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $battleId = null;
    
    /**  @var int */
    public $result = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CBResult');

      // REQUIRED STRING battleId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "battleId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 result = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "result";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <battleId> has a value
     *
     * @return boolean
     */
    public function hasBattleId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <battleId> value
     *
     * @return \utilpb\CBResult
     */
    public function clearBattleId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <battleId> value
     *
     * @return string
     */
    public function getBattleId(){
      return $this->_get(1);
    }
    
    /**
     * Set <battleId> value
     *
     * @param string $value
     * @return \utilpb\CBResult
     */
    public function setBattleId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <result> has a value
     *
     * @return boolean
     */
    public function hasResult(){
      return $this->_has(2);
    }
    
    /**
     * Clear <result> value
     *
     * @return \utilpb\CBResult
     */
    public function clearResult(){
      return $this->_clear(2);
    }
    
    /**
     * Get <result> value
     *
     * @return int
     */
    public function getResult(){
      return $this->_get(2);
    }
    
    /**
     * Set <result> value
     *
     * @param int $value
     * @return \utilpb\CBResult
     */
    public function setResult( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class CBBattleTips extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $flag = null;
    
    /**  @var \utilpb\CBTeamInfo */
    public $teamA = null;
    
    /**  @var \utilpb\CBTeamInfo */
    public $teamB = null;
    
    /**  @var int */
    public $result = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CBBattleTips');

      // REQUIRED INT32 flag = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE teamA = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "teamA";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\CBTeamInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE teamB = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "teamB";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\CBTeamInfo';
      $descriptor->addField($f);

      // OPTIONAL INT32 result = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "result";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(1);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\CBBattleTips
     */
    public function clearFlag(){
      return $this->_clear(1);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(1);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\CBBattleTips
     */
    public function setFlag( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <teamA> has a value
     *
     * @return boolean
     */
    public function hasTeamA(){
      return $this->_has(2);
    }
    
    /**
     * Clear <teamA> value
     *
     * @return \utilpb\CBBattleTips
     */
    public function clearTeamA(){
      return $this->_clear(2);
    }
    
    /**
     * Get <teamA> value
     *
     * @return \utilpb\CBTeamInfo
     */
    public function getTeamA(){
      return $this->_get(2);
    }
    
    /**
     * Set <teamA> value
     *
     * @param \utilpb\CBTeamInfo $value
     * @return \utilpb\CBBattleTips
     */
    public function setTeamA(\utilpb\CBTeamInfo $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <teamB> has a value
     *
     * @return boolean
     */
    public function hasTeamB(){
      return $this->_has(3);
    }
    
    /**
     * Clear <teamB> value
     *
     * @return \utilpb\CBBattleTips
     */
    public function clearTeamB(){
      return $this->_clear(3);
    }
    
    /**
     * Get <teamB> value
     *
     * @return \utilpb\CBTeamInfo
     */
    public function getTeamB(){
      return $this->_get(3);
    }
    
    /**
     * Set <teamB> value
     *
     * @param \utilpb\CBTeamInfo $value
     * @return \utilpb\CBBattleTips
     */
    public function setTeamB(\utilpb\CBTeamInfo $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <result> has a value
     *
     * @return boolean
     */
    public function hasResult(){
      return $this->_has(4);
    }
    
    /**
     * Clear <result> value
     *
     * @return \utilpb\CBBattleTips
     */
    public function clearResult(){
      return $this->_clear(4);
    }
    
    /**
     * Get <result> value
     *
     * @return int
     */
    public function getResult(){
      return $this->_get(4);
    }
    
    /**
     * Set <result> value
     *
     * @param int $value
     * @return \utilpb\CBBattleTips
     */
    public function setResult( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class CBRqGetPage extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $index = null;
    
    /**  @var int */
    public $page = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CBRqGetPage');

      // REQUIRED INT32 index = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 page = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "page";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(1);
    }
    
    /**
     * Clear <index> value
     *
     * @return \utilpb\CBRqGetPage
     */
    public function clearIndex(){
      return $this->_clear(1);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(1);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \utilpb\CBRqGetPage
     */
    public function setIndex( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <page> has a value
     *
     * @return boolean
     */
    public function hasPage(){
      return $this->_has(2);
    }
    
    /**
     * Clear <page> value
     *
     * @return \utilpb\CBRqGetPage
     */
    public function clearPage(){
      return $this->_clear(2);
    }
    
    /**
     * Get <page> value
     *
     * @return int
     */
    public function getPage(){
      return $this->_get(2);
    }
    
    /**
     * Set <page> value
     *
     * @param int $value
     * @return \utilpb\CBRqGetPage
     */
    public function setPage( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class CBPageInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $status = null;
    
    /**  @var \utilpb\CBTeamInfo[]  */
    public $other = array();
    
    /**  @var int */
    public $total = null;
    
    /**  @var int */
    public $page = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CBPageInfo');

      // REQUIRED INT32 status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE other = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "other";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\CBTeamInfo';
      $descriptor->addField($f);

      // REQUIRED INT32 total = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "total";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 page = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "page";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \utilpb\CBPageInfo
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return int
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param int $value
     * @return \utilpb\CBPageInfo
     */
    public function setStatus( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <other> has a value
     *
     * @return boolean
     */
    public function hasOther(){
      return $this->_has(2);
    }
    
    /**
     * Clear <other> value
     *
     * @return \utilpb\CBPageInfo
     */
    public function clearOther(){
      return $this->_clear(2);
    }
    
    /**
     * Get <other> value
     *
     * @param int $idx
     * @return \utilpb\CBTeamInfo
     */
    public function getOther($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <other> value
     *
     * @param \utilpb\CBTeamInfo $value
     * @return \utilpb\CBPageInfo
     */
    public function setOther(\utilpb\CBTeamInfo $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <other>
     *
     * @return \utilpb\CBTeamInfo[]
     */
    public function getOtherList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <other>
     *
     * @param \utilpb\CBTeamInfo $value
     * @return \utilpb\CBPageInfo
     */
    public function addOther(\utilpb\CBTeamInfo $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <total> has a value
     *
     * @return boolean
     */
    public function hasTotal(){
      return $this->_has(3);
    }
    
    /**
     * Clear <total> value
     *
     * @return \utilpb\CBPageInfo
     */
    public function clearTotal(){
      return $this->_clear(3);
    }
    
    /**
     * Get <total> value
     *
     * @return int
     */
    public function getTotal(){
      return $this->_get(3);
    }
    
    /**
     * Set <total> value
     *
     * @param int $value
     * @return \utilpb\CBPageInfo
     */
    public function setTotal( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <page> has a value
     *
     * @return boolean
     */
    public function hasPage(){
      return $this->_has(4);
    }
    
    /**
     * Clear <page> value
     *
     * @return \utilpb\CBPageInfo
     */
    public function clearPage(){
      return $this->_clear(4);
    }
    
    /**
     * Get <page> value
     *
     * @return int
     */
    public function getPage(){
      return $this->_get(4);
    }
    
    /**
     * Set <page> value
     *
     * @param int $value
     * @return \utilpb\CBPageInfo
     */
    public function setPage( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class CBRtEnterPrepare extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $code = null;
    
    /**  @var int */
    public $deadline = null;
    
    /**  @var int */
    public $status = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CBRtEnterPrepare');

      // REQUIRED INT32 code = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 deadline = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "deadline";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 status = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <code> value
     *
     * @return \utilpb\CBRtEnterPrepare
     */
    public function clearCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <code> value
     *
     * @return int
     */
    public function getCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <code> value
     *
     * @param int $value
     * @return \utilpb\CBRtEnterPrepare
     */
    public function setCode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <deadline> has a value
     *
     * @return boolean
     */
    public function hasDeadline(){
      return $this->_has(2);
    }
    
    /**
     * Clear <deadline> value
     *
     * @return \utilpb\CBRtEnterPrepare
     */
    public function clearDeadline(){
      return $this->_clear(2);
    }
    
    /**
     * Get <deadline> value
     *
     * @return int
     */
    public function getDeadline(){
      return $this->_get(2);
    }
    
    /**
     * Set <deadline> value
     *
     * @param int $value
     * @return \utilpb\CBRtEnterPrepare
     */
    public function setDeadline( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(3);
    }
    
    /**
     * Clear <status> value
     *
     * @return \utilpb\CBRtEnterPrepare
     */
    public function clearStatus(){
      return $this->_clear(3);
    }
    
    /**
     * Get <status> value
     *
     * @return int
     */
    public function getStatus(){
      return $this->_get(3);
    }
    
    /**
     * Set <status> value
     *
     * @param int $value
     * @return \utilpb\CBRtEnterPrepare
     */
    public function setStatus( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class CBBetInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $groupId = null;
    
    /**  @var int */
    public $betType = null;
    
    /**  @var int */
    public $betIdx = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.CBBetInfo');

      // REQUIRED INT32 groupId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "groupId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 betType = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "betType";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 betIdx = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "betIdx";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <groupId> has a value
     *
     * @return boolean
     */
    public function hasGroupId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <groupId> value
     *
     * @return \utilpb\CBBetInfo
     */
    public function clearGroupId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <groupId> value
     *
     * @return int
     */
    public function getGroupId(){
      return $this->_get(1);
    }
    
    /**
     * Set <groupId> value
     *
     * @param int $value
     * @return \utilpb\CBBetInfo
     */
    public function setGroupId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <betType> has a value
     *
     * @return boolean
     */
    public function hasBetType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <betType> value
     *
     * @return \utilpb\CBBetInfo
     */
    public function clearBetType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <betType> value
     *
     * @return int
     */
    public function getBetType(){
      return $this->_get(2);
    }
    
    /**
     * Set <betType> value
     *
     * @param int $value
     * @return \utilpb\CBBetInfo
     */
    public function setBetType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <betIdx> has a value
     *
     * @return boolean
     */
    public function hasBetIdx(){
      return $this->_has(3);
    }
    
    /**
     * Clear <betIdx> value
     *
     * @return \utilpb\CBBetInfo
     */
    public function clearBetIdx(){
      return $this->_clear(3);
    }
    
    /**
     * Get <betIdx> value
     *
     * @return int
     */
    public function getBetIdx(){
      return $this->_get(3);
    }
    
    /**
     * Set <betIdx> value
     *
     * @param int $value
     * @return \utilpb\CBBetInfo
     */
    public function setBetIdx( $value){
      return $this->_set(3, $value);
    }
  }
}

