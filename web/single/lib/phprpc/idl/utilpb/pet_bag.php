<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/pet_bag.proto
//   Date: 2014-12-19 08:23:08

namespace utilpb {

  class PetEquipItem extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $slot = null;
    
    /**  @var \utilpb\ComposeID */
    public $petId = null;
    
    /**  @var \utilpb\UtilItem */
    public $item = null;
    
    /**  @var int */
    public $useCount = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PetEquipItem');

      // REQUIRED INT32 slot = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "slot";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE petId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE item = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "item";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\UtilItem';
      $descriptor->addField($f);

      // OPTIONAL INT32 useCount = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "useCount";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <slot> has a value
     *
     * @return boolean
     */
    public function hasSlot(){
      return $this->_has(1);
    }
    
    /**
     * Clear <slot> value
     *
     * @return \utilpb\PetEquipItem
     */
    public function clearSlot(){
      return $this->_clear(1);
    }
    
    /**
     * Get <slot> value
     *
     * @return int
     */
    public function getSlot(){
      return $this->_get(1);
    }
    
    /**
     * Set <slot> value
     *
     * @param int $value
     * @return \utilpb\PetEquipItem
     */
    public function setSlot( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\PetEquipItem
     */
    public function clearPetId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(2);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PetEquipItem
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <item> has a value
     *
     * @return boolean
     */
    public function hasItem(){
      return $this->_has(3);
    }
    
    /**
     * Clear <item> value
     *
     * @return \utilpb\PetEquipItem
     */
    public function clearItem(){
      return $this->_clear(3);
    }
    
    /**
     * Get <item> value
     *
     * @return \utilpb\UtilItem
     */
    public function getItem(){
      return $this->_get(3);
    }
    
    /**
     * Set <item> value
     *
     * @param \utilpb\UtilItem $value
     * @return \utilpb\PetEquipItem
     */
    public function setItem(\utilpb\UtilItem $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <useCount> has a value
     *
     * @return boolean
     */
    public function hasUseCount(){
      return $this->_has(4);
    }
    
    /**
     * Clear <useCount> value
     *
     * @return \utilpb\PetEquipItem
     */
    public function clearUseCount(){
      return $this->_clear(4);
    }
    
    /**
     * Get <useCount> value
     *
     * @return int
     */
    public function getUseCount(){
      return $this->_get(4);
    }
    
    /**
     * Set <useCount> value
     *
     * @param int $value
     * @return \utilpb\PetEquipItem
     */
    public function setUseCount( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class PetEquipBag extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $petId = null;
    
    /**  @var \utilpb\PetEquipItem[]  */
    public $itemList = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PetEquipBag');

      // OPTIONAL MESSAGE petId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REPEATED MESSAGE itemList = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "itemList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\PetEquipItem';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\PetEquipBag
     */
    public function clearPetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PetEquipBag
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <itemList> has a value
     *
     * @return boolean
     */
    public function hasItemList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <itemList> value
     *
     * @return \utilpb\PetEquipBag
     */
    public function clearItemList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <itemList> value
     *
     * @param int $idx
     * @return \utilpb\PetEquipItem
     */
    public function getItemList($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <itemList> value
     *
     * @param \utilpb\PetEquipItem $value
     * @return \utilpb\PetEquipBag
     */
    public function setItemList(\utilpb\PetEquipItem $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <itemList>
     *
     * @return \utilpb\PetEquipItem[]
     */
    public function getItemListList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <itemList>
     *
     * @param \utilpb\PetEquipItem $value
     * @return \utilpb\PetEquipBag
     */
    public function addItemList(\utilpb\PetEquipItem $value){
     return $this->_add(2, $value);
    }
  }
}

namespace utilpb {

  class PetEquipExp extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $count = null;
    
    /**  @var int */
    public $type = null;
    
    /**  @var int */
    public $slot = null;
    
    /**  @var \utilpb\ComposeID */
    public $petId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PetEquipExp');

      // REQUIRED INT32 count = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 slot = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "slot";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE petId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(1);
    }
    
    /**
     * Clear <count> value
     *
     * @return \utilpb\PetEquipExp
     */
    public function clearCount(){
      return $this->_clear(1);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(1);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \utilpb\PetEquipExp
     */
    public function setCount( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\PetEquipExp
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\PetEquipExp
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <slot> has a value
     *
     * @return boolean
     */
    public function hasSlot(){
      return $this->_has(3);
    }
    
    /**
     * Clear <slot> value
     *
     * @return \utilpb\PetEquipExp
     */
    public function clearSlot(){
      return $this->_clear(3);
    }
    
    /**
     * Get <slot> value
     *
     * @return int
     */
    public function getSlot(){
      return $this->_get(3);
    }
    
    /**
     * Set <slot> value
     *
     * @param int $value
     * @return \utilpb\PetEquipExp
     */
    public function setSlot( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\PetEquipExp
     */
    public function clearPetId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(4);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PetEquipExp
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class PetReplaceSkill extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $slot = null;
    
    /**  @var string */
    public $bagItemUuid = null;
    
    /**  @var int */
    public $replaceSkill = null;
    
    /**  @var \utilpb\ComposeID */
    public $petId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PetReplaceSkill');

      // REQUIRED INT32 slot = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "slot";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING bagItemUuid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "bagItemUuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 replaceSkill = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "replaceSkill";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE petId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <slot> has a value
     *
     * @return boolean
     */
    public function hasSlot(){
      return $this->_has(1);
    }
    
    /**
     * Clear <slot> value
     *
     * @return \utilpb\PetReplaceSkill
     */
    public function clearSlot(){
      return $this->_clear(1);
    }
    
    /**
     * Get <slot> value
     *
     * @return int
     */
    public function getSlot(){
      return $this->_get(1);
    }
    
    /**
     * Set <slot> value
     *
     * @param int $value
     * @return \utilpb\PetReplaceSkill
     */
    public function setSlot( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <bagItemUuid> has a value
     *
     * @return boolean
     */
    public function hasBagItemUuid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <bagItemUuid> value
     *
     * @return \utilpb\PetReplaceSkill
     */
    public function clearBagItemUuid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <bagItemUuid> value
     *
     * @return string
     */
    public function getBagItemUuid(){
      return $this->_get(2);
    }
    
    /**
     * Set <bagItemUuid> value
     *
     * @param string $value
     * @return \utilpb\PetReplaceSkill
     */
    public function setBagItemUuid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <replaceSkill> has a value
     *
     * @return boolean
     */
    public function hasReplaceSkill(){
      return $this->_has(3);
    }
    
    /**
     * Clear <replaceSkill> value
     *
     * @return \utilpb\PetReplaceSkill
     */
    public function clearReplaceSkill(){
      return $this->_clear(3);
    }
    
    /**
     * Get <replaceSkill> value
     *
     * @return int
     */
    public function getReplaceSkill(){
      return $this->_get(3);
    }
    
    /**
     * Set <replaceSkill> value
     *
     * @param int $value
     * @return \utilpb\PetReplaceSkill
     */
    public function setReplaceSkill( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\PetReplaceSkill
     */
    public function clearPetId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(4);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PetReplaceSkill
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class DressPetEquip extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $type = null;
    
    /**  @var string */
    public $uuid = null;
    
    /**  @var \utilpb\ComposeID */
    public $petId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.DressPetEquip');

      // REQUIRED INT32 type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING uuid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "uuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE petId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\DressPetEquip
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\DressPetEquip
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <uuid> has a value
     *
     * @return boolean
     */
    public function hasUuid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <uuid> value
     *
     * @return \utilpb\DressPetEquip
     */
    public function clearUuid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <uuid> value
     *
     * @return string
     */
    public function getUuid(){
      return $this->_get(2);
    }
    
    /**
     * Set <uuid> value
     *
     * @param string $value
     * @return \utilpb\DressPetEquip
     */
    public function setUuid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\DressPetEquip
     */
    public function clearPetId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(3);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\DressPetEquip
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class PetAddRank extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $petId = null;
    
    /**  @var int */
    public $slot = null;
    
    /**  @var int */
    public $protect = null;
    
    /**  @var int */
    public $autoBuy = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PetAddRank');

      // REQUIRED MESSAGE petId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "petId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED INT32 slot = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "slot";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 protect = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "protect";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 autoBuy = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "autoBuy";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <petId> has a value
     *
     * @return boolean
     */
    public function hasPetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <petId> value
     *
     * @return \utilpb\PetAddRank
     */
    public function clearPetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <petId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getPetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <petId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PetAddRank
     */
    public function setPetId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <slot> has a value
     *
     * @return boolean
     */
    public function hasSlot(){
      return $this->_has(2);
    }
    
    /**
     * Clear <slot> value
     *
     * @return \utilpb\PetAddRank
     */
    public function clearSlot(){
      return $this->_clear(2);
    }
    
    /**
     * Get <slot> value
     *
     * @return int
     */
    public function getSlot(){
      return $this->_get(2);
    }
    
    /**
     * Set <slot> value
     *
     * @param int $value
     * @return \utilpb\PetAddRank
     */
    public function setSlot( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <protect> has a value
     *
     * @return boolean
     */
    public function hasProtect(){
      return $this->_has(3);
    }
    
    /**
     * Clear <protect> value
     *
     * @return \utilpb\PetAddRank
     */
    public function clearProtect(){
      return $this->_clear(3);
    }
    
    /**
     * Get <protect> value
     *
     * @return int
     */
    public function getProtect(){
      return $this->_get(3);
    }
    
    /**
     * Set <protect> value
     *
     * @param int $value
     * @return \utilpb\PetAddRank
     */
    public function setProtect( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <autoBuy> has a value
     *
     * @return boolean
     */
    public function hasAutoBuy(){
      return $this->_has(4);
    }
    
    /**
     * Clear <autoBuy> value
     *
     * @return \utilpb\PetAddRank
     */
    public function clearAutoBuy(){
      return $this->_clear(4);
    }
    
    /**
     * Get <autoBuy> value
     *
     * @return int
     */
    public function getAutoBuy(){
      return $this->_get(4);
    }
    
    /**
     * Set <autoBuy> value
     *
     * @param int $value
     * @return \utilpb\PetAddRank
     */
    public function setAutoBuy( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class PetBagReturn extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $code = null;
    
    /**  @var int */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PetBagReturn');

      // REQUIRED INT32 code = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <code> value
     *
     * @return \utilpb\PetBagReturn
     */
    public function clearCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <code> value
     *
     * @return int
     */
    public function getCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <code> value
     *
     * @param int $value
     * @return \utilpb\PetBagReturn
     */
    public function setCode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\PetBagReturn
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\PetBagReturn
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
  }
}

