<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/factionbattle.proto
//   Date: 2014-12-19 08:23:06

namespace utilpb {

  class PbMemberInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $objId = null;
    
    /**  @var int */
    public $title = null;
    
    /**  @var string */
    public $userName = null;
    
    /**  @var int */
    public $lv = null;
    
    /**  @var int */
    public $fightScore = null;
    
    /**  @var int */
    public $occ = null;
    
    /**  @var float */
    public $loginTm = null;
    
    /**  @var int */
    public $status = null;
    
    /**  @var string */
    public $factionId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbMemberInfo');

      // REQUIRED MESSAGE objId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "objId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL INT32 title = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING userName = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "userName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 lv = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "lv";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 fightScore = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "fightScore";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 occ = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "occ";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE loginTm = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "loginTm";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 status = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING factionId = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "factionId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <objId> has a value
     *
     * @return boolean
     */
    public function hasObjId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <objId> value
     *
     * @return \utilpb\PbMemberInfo
     */
    public function clearObjId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <objId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getObjId(){
      return $this->_get(1);
    }
    
    /**
     * Set <objId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PbMemberInfo
     */
    public function setObjId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <title> value
     *
     * @return \utilpb\PbMemberInfo
     */
    public function clearTitle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <title> value
     *
     * @return int
     */
    public function getTitle(){
      return $this->_get(2);
    }
    
    /**
     * Set <title> value
     *
     * @param int $value
     * @return \utilpb\PbMemberInfo
     */
    public function setTitle( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <userName> has a value
     *
     * @return boolean
     */
    public function hasUserName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <userName> value
     *
     * @return \utilpb\PbMemberInfo
     */
    public function clearUserName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <userName> value
     *
     * @return string
     */
    public function getUserName(){
      return $this->_get(3);
    }
    
    /**
     * Set <userName> value
     *
     * @param string $value
     * @return \utilpb\PbMemberInfo
     */
    public function setUserName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <lv> has a value
     *
     * @return boolean
     */
    public function hasLv(){
      return $this->_has(4);
    }
    
    /**
     * Clear <lv> value
     *
     * @return \utilpb\PbMemberInfo
     */
    public function clearLv(){
      return $this->_clear(4);
    }
    
    /**
     * Get <lv> value
     *
     * @return int
     */
    public function getLv(){
      return $this->_get(4);
    }
    
    /**
     * Set <lv> value
     *
     * @param int $value
     * @return \utilpb\PbMemberInfo
     */
    public function setLv( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <fightScore> has a value
     *
     * @return boolean
     */
    public function hasFightScore(){
      return $this->_has(5);
    }
    
    /**
     * Clear <fightScore> value
     *
     * @return \utilpb\PbMemberInfo
     */
    public function clearFightScore(){
      return $this->_clear(5);
    }
    
    /**
     * Get <fightScore> value
     *
     * @return int
     */
    public function getFightScore(){
      return $this->_get(5);
    }
    
    /**
     * Set <fightScore> value
     *
     * @param int $value
     * @return \utilpb\PbMemberInfo
     */
    public function setFightScore( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <occ> has a value
     *
     * @return boolean
     */
    public function hasOcc(){
      return $this->_has(6);
    }
    
    /**
     * Clear <occ> value
     *
     * @return \utilpb\PbMemberInfo
     */
    public function clearOcc(){
      return $this->_clear(6);
    }
    
    /**
     * Get <occ> value
     *
     * @return int
     */
    public function getOcc(){
      return $this->_get(6);
    }
    
    /**
     * Set <occ> value
     *
     * @param int $value
     * @return \utilpb\PbMemberInfo
     */
    public function setOcc( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <loginTm> has a value
     *
     * @return boolean
     */
    public function hasLoginTm(){
      return $this->_has(7);
    }
    
    /**
     * Clear <loginTm> value
     *
     * @return \utilpb\PbMemberInfo
     */
    public function clearLoginTm(){
      return $this->_clear(7);
    }
    
    /**
     * Get <loginTm> value
     *
     * @return float
     */
    public function getLoginTm(){
      return $this->_get(7);
    }
    
    /**
     * Set <loginTm> value
     *
     * @param float $value
     * @return \utilpb\PbMemberInfo
     */
    public function setLoginTm( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(8);
    }
    
    /**
     * Clear <status> value
     *
     * @return \utilpb\PbMemberInfo
     */
    public function clearStatus(){
      return $this->_clear(8);
    }
    
    /**
     * Get <status> value
     *
     * @return int
     */
    public function getStatus(){
      return $this->_get(8);
    }
    
    /**
     * Set <status> value
     *
     * @param int $value
     * @return \utilpb\PbMemberInfo
     */
    public function setStatus( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <factionId> has a value
     *
     * @return boolean
     */
    public function hasFactionId(){
      return $this->_has(9);
    }
    
    /**
     * Clear <factionId> value
     *
     * @return \utilpb\PbMemberInfo
     */
    public function clearFactionId(){
      return $this->_clear(9);
    }
    
    /**
     * Get <factionId> value
     *
     * @return string
     */
    public function getFactionId(){
      return $this->_get(9);
    }
    
    /**
     * Set <factionId> value
     *
     * @param string $value
     * @return \utilpb\PbMemberInfo
     */
    public function setFactionId( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace utilpb {

  class PbMyFactionInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\PbMemberInfo[]  */
    public $members = array();
    
    /**  @var int */
    public $fightScore = null;
    
    /**  @var float */
    public $signTm = null;
    
    /**  @var string */
    public $factionName = null;
    
    /**  @var string */
    public $factionId = null;
    
    /**  @var \utilpb\ComposeID */
    public $masterId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbMyFactionInfo');

      // REPEATED MESSAGE members = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "members";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\PbMemberInfo';
      $descriptor->addField($f);

      // OPTIONAL INT32 fightScore = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "fightScore";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE signTm = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "signTm";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING factionName = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "factionName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING factionId = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "factionId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE masterId = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "masterId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <members> has a value
     *
     * @return boolean
     */
    public function hasMembers(){
      return $this->_has(1);
    }
    
    /**
     * Clear <members> value
     *
     * @return \utilpb\PbMyFactionInfo
     */
    public function clearMembers(){
      return $this->_clear(1);
    }
    
    /**
     * Get <members> value
     *
     * @param int $idx
     * @return \utilpb\PbMemberInfo
     */
    public function getMembers($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <members> value
     *
     * @param \utilpb\PbMemberInfo $value
     * @return \utilpb\PbMyFactionInfo
     */
    public function setMembers(\utilpb\PbMemberInfo $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <members>
     *
     * @return \utilpb\PbMemberInfo[]
     */
    public function getMembersList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <members>
     *
     * @param \utilpb\PbMemberInfo $value
     * @return \utilpb\PbMyFactionInfo
     */
    public function addMembers(\utilpb\PbMemberInfo $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <fightScore> has a value
     *
     * @return boolean
     */
    public function hasFightScore(){
      return $this->_has(2);
    }
    
    /**
     * Clear <fightScore> value
     *
     * @return \utilpb\PbMyFactionInfo
     */
    public function clearFightScore(){
      return $this->_clear(2);
    }
    
    /**
     * Get <fightScore> value
     *
     * @return int
     */
    public function getFightScore(){
      return $this->_get(2);
    }
    
    /**
     * Set <fightScore> value
     *
     * @param int $value
     * @return \utilpb\PbMyFactionInfo
     */
    public function setFightScore( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <signTm> has a value
     *
     * @return boolean
     */
    public function hasSignTm(){
      return $this->_has(3);
    }
    
    /**
     * Clear <signTm> value
     *
     * @return \utilpb\PbMyFactionInfo
     */
    public function clearSignTm(){
      return $this->_clear(3);
    }
    
    /**
     * Get <signTm> value
     *
     * @return float
     */
    public function getSignTm(){
      return $this->_get(3);
    }
    
    /**
     * Set <signTm> value
     *
     * @param float $value
     * @return \utilpb\PbMyFactionInfo
     */
    public function setSignTm( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <factionName> has a value
     *
     * @return boolean
     */
    public function hasFactionName(){
      return $this->_has(4);
    }
    
    /**
     * Clear <factionName> value
     *
     * @return \utilpb\PbMyFactionInfo
     */
    public function clearFactionName(){
      return $this->_clear(4);
    }
    
    /**
     * Get <factionName> value
     *
     * @return string
     */
    public function getFactionName(){
      return $this->_get(4);
    }
    
    /**
     * Set <factionName> value
     *
     * @param string $value
     * @return \utilpb\PbMyFactionInfo
     */
    public function setFactionName( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <factionId> has a value
     *
     * @return boolean
     */
    public function hasFactionId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <factionId> value
     *
     * @return \utilpb\PbMyFactionInfo
     */
    public function clearFactionId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <factionId> value
     *
     * @return string
     */
    public function getFactionId(){
      return $this->_get(5);
    }
    
    /**
     * Set <factionId> value
     *
     * @param string $value
     * @return \utilpb\PbMyFactionInfo
     */
    public function setFactionId( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <masterId> has a value
     *
     * @return boolean
     */
    public function hasMasterId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <masterId> value
     *
     * @return \utilpb\PbMyFactionInfo
     */
    public function clearMasterId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <masterId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getMasterId(){
      return $this->_get(6);
    }
    
    /**
     * Set <masterId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PbMyFactionInfo
     */
    public function setMasterId(\utilpb\ComposeID $value){
      return $this->_set(6, $value);
    }
  }
}

namespace utilpb {

  class PbChangePanel extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\PbMemberInfo[]  */
    public $player = array();
    
    /**  @var \utilpb\PbMemberInfo[]  */
    public $member = array();
    
    /**  @var int */
    public $code = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbChangePanel');

      // REPEATED MESSAGE player = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "player";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\PbMemberInfo';
      $descriptor->addField($f);

      // REPEATED MESSAGE member = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "member";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\PbMemberInfo';
      $descriptor->addField($f);

      // OPTIONAL INT32 code = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <player> has a value
     *
     * @return boolean
     */
    public function hasPlayer(){
      return $this->_has(1);
    }
    
    /**
     * Clear <player> value
     *
     * @return \utilpb\PbChangePanel
     */
    public function clearPlayer(){
      return $this->_clear(1);
    }
    
    /**
     * Get <player> value
     *
     * @param int $idx
     * @return \utilpb\PbMemberInfo
     */
    public function getPlayer($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <player> value
     *
     * @param \utilpb\PbMemberInfo $value
     * @return \utilpb\PbChangePanel
     */
    public function setPlayer(\utilpb\PbMemberInfo $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <player>
     *
     * @return \utilpb\PbMemberInfo[]
     */
    public function getPlayerList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <player>
     *
     * @param \utilpb\PbMemberInfo $value
     * @return \utilpb\PbChangePanel
     */
    public function addPlayer(\utilpb\PbMemberInfo $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <member> has a value
     *
     * @return boolean
     */
    public function hasMember(){
      return $this->_has(2);
    }
    
    /**
     * Clear <member> value
     *
     * @return \utilpb\PbChangePanel
     */
    public function clearMember(){
      return $this->_clear(2);
    }
    
    /**
     * Get <member> value
     *
     * @param int $idx
     * @return \utilpb\PbMemberInfo
     */
    public function getMember($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <member> value
     *
     * @param \utilpb\PbMemberInfo $value
     * @return \utilpb\PbChangePanel
     */
    public function setMember(\utilpb\PbMemberInfo $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <member>
     *
     * @return \utilpb\PbMemberInfo[]
     */
    public function getMemberList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <member>
     *
     * @param \utilpb\PbMemberInfo $value
     * @return \utilpb\PbChangePanel
     */
    public function addMember(\utilpb\PbMemberInfo $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(3);
    }
    
    /**
     * Clear <code> value
     *
     * @return \utilpb\PbChangePanel
     */
    public function clearCode(){
      return $this->_clear(3);
    }
    
    /**
     * Get <code> value
     *
     * @return int
     */
    public function getCode(){
      return $this->_get(3);
    }
    
    /**
     * Set <code> value
     *
     * @param int $value
     * @return \utilpb\PbChangePanel
     */
    public function setCode( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class PbFactionInfo extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $factionId = null;
    
    /**  @var int */
    public $fightScore = null;
    
    /**  @var string */
    public $factionName = null;
    
    /**  @var int */
    public $cnt = null;
    
    /**  @var int */
    public $rank = null;
    
    /**  @var int */
    public $status = null;
    
    /**  @var int */
    public $winNum = null;
    
    /**  @var int */
    public $loseNum = null;
    
    /**  @var float */
    public $signTm = null;
    
    /**  @var \utilpb\ComposeID */
    public $masterId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbFactionInfo');

      // REQUIRED STRING factionId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "factionId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 fightScore = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "fightScore";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING factionName = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "factionName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 cnt = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "cnt";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 rank = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "rank";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 status = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 winNum = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "winNum";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 loseNum = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "loseNum";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE signTm = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "signTm";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE masterId = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "masterId";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <factionId> has a value
     *
     * @return boolean
     */
    public function hasFactionId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <factionId> value
     *
     * @return \utilpb\PbFactionInfo
     */
    public function clearFactionId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <factionId> value
     *
     * @return string
     */
    public function getFactionId(){
      return $this->_get(1);
    }
    
    /**
     * Set <factionId> value
     *
     * @param string $value
     * @return \utilpb\PbFactionInfo
     */
    public function setFactionId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <fightScore> has a value
     *
     * @return boolean
     */
    public function hasFightScore(){
      return $this->_has(2);
    }
    
    /**
     * Clear <fightScore> value
     *
     * @return \utilpb\PbFactionInfo
     */
    public function clearFightScore(){
      return $this->_clear(2);
    }
    
    /**
     * Get <fightScore> value
     *
     * @return int
     */
    public function getFightScore(){
      return $this->_get(2);
    }
    
    /**
     * Set <fightScore> value
     *
     * @param int $value
     * @return \utilpb\PbFactionInfo
     */
    public function setFightScore( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <factionName> has a value
     *
     * @return boolean
     */
    public function hasFactionName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <factionName> value
     *
     * @return \utilpb\PbFactionInfo
     */
    public function clearFactionName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <factionName> value
     *
     * @return string
     */
    public function getFactionName(){
      return $this->_get(3);
    }
    
    /**
     * Set <factionName> value
     *
     * @param string $value
     * @return \utilpb\PbFactionInfo
     */
    public function setFactionName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <cnt> has a value
     *
     * @return boolean
     */
    public function hasCnt(){
      return $this->_has(4);
    }
    
    /**
     * Clear <cnt> value
     *
     * @return \utilpb\PbFactionInfo
     */
    public function clearCnt(){
      return $this->_clear(4);
    }
    
    /**
     * Get <cnt> value
     *
     * @return int
     */
    public function getCnt(){
      return $this->_get(4);
    }
    
    /**
     * Set <cnt> value
     *
     * @param int $value
     * @return \utilpb\PbFactionInfo
     */
    public function setCnt( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <rank> has a value
     *
     * @return boolean
     */
    public function hasRank(){
      return $this->_has(5);
    }
    
    /**
     * Clear <rank> value
     *
     * @return \utilpb\PbFactionInfo
     */
    public function clearRank(){
      return $this->_clear(5);
    }
    
    /**
     * Get <rank> value
     *
     * @return int
     */
    public function getRank(){
      return $this->_get(5);
    }
    
    /**
     * Set <rank> value
     *
     * @param int $value
     * @return \utilpb\PbFactionInfo
     */
    public function setRank( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(6);
    }
    
    /**
     * Clear <status> value
     *
     * @return \utilpb\PbFactionInfo
     */
    public function clearStatus(){
      return $this->_clear(6);
    }
    
    /**
     * Get <status> value
     *
     * @return int
     */
    public function getStatus(){
      return $this->_get(6);
    }
    
    /**
     * Set <status> value
     *
     * @param int $value
     * @return \utilpb\PbFactionInfo
     */
    public function setStatus( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <winNum> has a value
     *
     * @return boolean
     */
    public function hasWinNum(){
      return $this->_has(7);
    }
    
    /**
     * Clear <winNum> value
     *
     * @return \utilpb\PbFactionInfo
     */
    public function clearWinNum(){
      return $this->_clear(7);
    }
    
    /**
     * Get <winNum> value
     *
     * @return int
     */
    public function getWinNum(){
      return $this->_get(7);
    }
    
    /**
     * Set <winNum> value
     *
     * @param int $value
     * @return \utilpb\PbFactionInfo
     */
    public function setWinNum( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <loseNum> has a value
     *
     * @return boolean
     */
    public function hasLoseNum(){
      return $this->_has(8);
    }
    
    /**
     * Clear <loseNum> value
     *
     * @return \utilpb\PbFactionInfo
     */
    public function clearLoseNum(){
      return $this->_clear(8);
    }
    
    /**
     * Get <loseNum> value
     *
     * @return int
     */
    public function getLoseNum(){
      return $this->_get(8);
    }
    
    /**
     * Set <loseNum> value
     *
     * @param int $value
     * @return \utilpb\PbFactionInfo
     */
    public function setLoseNum( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <signTm> has a value
     *
     * @return boolean
     */
    public function hasSignTm(){
      return $this->_has(9);
    }
    
    /**
     * Clear <signTm> value
     *
     * @return \utilpb\PbFactionInfo
     */
    public function clearSignTm(){
      return $this->_clear(9);
    }
    
    /**
     * Get <signTm> value
     *
     * @return float
     */
    public function getSignTm(){
      return $this->_get(9);
    }
    
    /**
     * Set <signTm> value
     *
     * @param float $value
     * @return \utilpb\PbFactionInfo
     */
    public function setSignTm( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <masterId> has a value
     *
     * @return boolean
     */
    public function hasMasterId(){
      return $this->_has(10);
    }
    
    /**
     * Clear <masterId> value
     *
     * @return \utilpb\PbFactionInfo
     */
    public function clearMasterId(){
      return $this->_clear(10);
    }
    
    /**
     * Get <masterId> value
     *
     * @return \utilpb\ComposeID
     */
    public function getMasterId(){
      return $this->_get(10);
    }
    
    /**
     * Set <masterId> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\PbFactionInfo
     */
    public function setMasterId(\utilpb\ComposeID $value){
      return $this->_set(10, $value);
    }
  }
}

namespace utilpb {

  class PbCombatInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\PbFactionInfo[]  */
    public $factions = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbCombatInfo');

      // REPEATED MESSAGE factions = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "factions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\PbFactionInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <factions> has a value
     *
     * @return boolean
     */
    public function hasFactions(){
      return $this->_has(1);
    }
    
    /**
     * Clear <factions> value
     *
     * @return \utilpb\PbCombatInfo
     */
    public function clearFactions(){
      return $this->_clear(1);
    }
    
    /**
     * Get <factions> value
     *
     * @param int $idx
     * @return \utilpb\PbFactionInfo
     */
    public function getFactions($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <factions> value
     *
     * @param \utilpb\PbFactionInfo $value
     * @return \utilpb\PbCombatInfo
     */
    public function setFactions(\utilpb\PbFactionInfo $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <factions>
     *
     * @return \utilpb\PbFactionInfo[]
     */
    public function getFactionsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <factions>
     *
     * @param \utilpb\PbFactionInfo $value
     * @return \utilpb\PbCombatInfo
     */
    public function addFactions(\utilpb\PbFactionInfo $value){
     return $this->_add(1, $value);
    }
  }
}

namespace utilpb {

  class PbFinalInfo extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $term = null;
    
    /**  @var \utilpb\PbFactionInfo */
    public $faction1 = null;
    
    /**  @var \utilpb\PbFactionInfo */
    public $faction2 = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbFinalInfo');

      // REQUIRED DOUBLE term = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "term";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE faction1 = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "faction1";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\PbFactionInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE faction2 = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "faction2";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\PbFactionInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <term> has a value
     *
     * @return boolean
     */
    public function hasTerm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <term> value
     *
     * @return \utilpb\PbFinalInfo
     */
    public function clearTerm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <term> value
     *
     * @return float
     */
    public function getTerm(){
      return $this->_get(1);
    }
    
    /**
     * Set <term> value
     *
     * @param float $value
     * @return \utilpb\PbFinalInfo
     */
    public function setTerm( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <faction1> has a value
     *
     * @return boolean
     */
    public function hasFaction1(){
      return $this->_has(2);
    }
    
    /**
     * Clear <faction1> value
     *
     * @return \utilpb\PbFinalInfo
     */
    public function clearFaction1(){
      return $this->_clear(2);
    }
    
    /**
     * Get <faction1> value
     *
     * @return \utilpb\PbFactionInfo
     */
    public function getFaction1(){
      return $this->_get(2);
    }
    
    /**
     * Set <faction1> value
     *
     * @param \utilpb\PbFactionInfo $value
     * @return \utilpb\PbFinalInfo
     */
    public function setFaction1(\utilpb\PbFactionInfo $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <faction2> has a value
     *
     * @return boolean
     */
    public function hasFaction2(){
      return $this->_has(3);
    }
    
    /**
     * Clear <faction2> value
     *
     * @return \utilpb\PbFinalInfo
     */
    public function clearFaction2(){
      return $this->_clear(3);
    }
    
    /**
     * Get <faction2> value
     *
     * @return \utilpb\PbFactionInfo
     */
    public function getFaction2(){
      return $this->_get(3);
    }
    
    /**
     * Set <faction2> value
     *
     * @param \utilpb\PbFactionInfo $value
     * @return \utilpb\PbFinalInfo
     */
    public function setFaction2(\utilpb\PbFactionInfo $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class PbCombatFactionInfo extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $factionId = null;
    
    /**  @var string */
    public $factionName = null;
    
    /**  @var int */
    public $fightScore = null;
    
    /**  @var int */
    public $cnt = null;
    
    /**  @var int */
    public $leftCnt = null;
    
    /**  @var int */
    public $isWin = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbCombatFactionInfo');

      // REQUIRED STRING factionId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "factionId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING factionName = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "factionName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 fightScore = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "fightScore";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 cnt = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "cnt";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 leftCnt = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "leftCnt";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 isWin = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "isWin";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <factionId> has a value
     *
     * @return boolean
     */
    public function hasFactionId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <factionId> value
     *
     * @return \utilpb\PbCombatFactionInfo
     */
    public function clearFactionId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <factionId> value
     *
     * @return string
     */
    public function getFactionId(){
      return $this->_get(1);
    }
    
    /**
     * Set <factionId> value
     *
     * @param string $value
     * @return \utilpb\PbCombatFactionInfo
     */
    public function setFactionId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <factionName> has a value
     *
     * @return boolean
     */
    public function hasFactionName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <factionName> value
     *
     * @return \utilpb\PbCombatFactionInfo
     */
    public function clearFactionName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <factionName> value
     *
     * @return string
     */
    public function getFactionName(){
      return $this->_get(3);
    }
    
    /**
     * Set <factionName> value
     *
     * @param string $value
     * @return \utilpb\PbCombatFactionInfo
     */
    public function setFactionName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <fightScore> has a value
     *
     * @return boolean
     */
    public function hasFightScore(){
      return $this->_has(2);
    }
    
    /**
     * Clear <fightScore> value
     *
     * @return \utilpb\PbCombatFactionInfo
     */
    public function clearFightScore(){
      return $this->_clear(2);
    }
    
    /**
     * Get <fightScore> value
     *
     * @return int
     */
    public function getFightScore(){
      return $this->_get(2);
    }
    
    /**
     * Set <fightScore> value
     *
     * @param int $value
     * @return \utilpb\PbCombatFactionInfo
     */
    public function setFightScore( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cnt> has a value
     *
     * @return boolean
     */
    public function hasCnt(){
      return $this->_has(4);
    }
    
    /**
     * Clear <cnt> value
     *
     * @return \utilpb\PbCombatFactionInfo
     */
    public function clearCnt(){
      return $this->_clear(4);
    }
    
    /**
     * Get <cnt> value
     *
     * @return int
     */
    public function getCnt(){
      return $this->_get(4);
    }
    
    /**
     * Set <cnt> value
     *
     * @param int $value
     * @return \utilpb\PbCombatFactionInfo
     */
    public function setCnt( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <leftCnt> has a value
     *
     * @return boolean
     */
    public function hasLeftCnt(){
      return $this->_has(5);
    }
    
    /**
     * Clear <leftCnt> value
     *
     * @return \utilpb\PbCombatFactionInfo
     */
    public function clearLeftCnt(){
      return $this->_clear(5);
    }
    
    /**
     * Get <leftCnt> value
     *
     * @return int
     */
    public function getLeftCnt(){
      return $this->_get(5);
    }
    
    /**
     * Set <leftCnt> value
     *
     * @param int $value
     * @return \utilpb\PbCombatFactionInfo
     */
    public function setLeftCnt( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <isWin> has a value
     *
     * @return boolean
     */
    public function hasIsWin(){
      return $this->_has(6);
    }
    
    /**
     * Clear <isWin> value
     *
     * @return \utilpb\PbCombatFactionInfo
     */
    public function clearIsWin(){
      return $this->_clear(6);
    }
    
    /**
     * Get <isWin> value
     *
     * @return int
     */
    public function getIsWin(){
      return $this->_get(6);
    }
    
    /**
     * Set <isWin> value
     *
     * @param int $value
     * @return \utilpb\PbCombatFactionInfo
     */
    public function setIsWin( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace utilpb {

  class PbCombatingInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\PbCombatFactionInfo */
    public $faction1 = null;
    
    /**  @var \utilpb\PbCombatFactionInfo */
    public $faction2 = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PbCombatingInfo');

      // OPTIONAL MESSAGE faction1 = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "faction1";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\PbCombatFactionInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE faction2 = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "faction2";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\PbCombatFactionInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <faction1> has a value
     *
     * @return boolean
     */
    public function hasFaction1(){
      return $this->_has(1);
    }
    
    /**
     * Clear <faction1> value
     *
     * @return \utilpb\PbCombatingInfo
     */
    public function clearFaction1(){
      return $this->_clear(1);
    }
    
    /**
     * Get <faction1> value
     *
     * @return \utilpb\PbCombatFactionInfo
     */
    public function getFaction1(){
      return $this->_get(1);
    }
    
    /**
     * Set <faction1> value
     *
     * @param \utilpb\PbCombatFactionInfo $value
     * @return \utilpb\PbCombatingInfo
     */
    public function setFaction1(\utilpb\PbCombatFactionInfo $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <faction2> has a value
     *
     * @return boolean
     */
    public function hasFaction2(){
      return $this->_has(2);
    }
    
    /**
     * Clear <faction2> value
     *
     * @return \utilpb\PbCombatingInfo
     */
    public function clearFaction2(){
      return $this->_clear(2);
    }
    
    /**
     * Get <faction2> value
     *
     * @return \utilpb\PbCombatFactionInfo
     */
    public function getFaction2(){
      return $this->_get(2);
    }
    
    /**
     * Set <faction2> value
     *
     * @param \utilpb\PbCombatFactionInfo $value
     * @return \utilpb\PbCombatingInfo
     */
    public function setFaction2(\utilpb\PbCombatFactionInfo $value){
      return $this->_set(2, $value);
    }
  }
}

