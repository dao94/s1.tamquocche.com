<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/equip.proto
//   Date: 2014-12-19 08:23:07

namespace utilpb {

  class Strong extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $sClass = null;
    
    /**  @var int */
    public $index = null;
    
    /**  @var int */
    public $flag = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.Strong');

      // REQUIRED INT32 sClass = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sClass";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 index = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 flag = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sClass> has a value
     *
     * @return boolean
     */
    public function hasSClass(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sClass> value
     *
     * @return \utilpb\Strong
     */
    public function clearSClass(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sClass> value
     *
     * @return int
     */
    public function getSClass(){
      return $this->_get(1);
    }
    
    /**
     * Set <sClass> value
     *
     * @param int $value
     * @return \utilpb\Strong
     */
    public function setSClass( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(2);
    }
    
    /**
     * Clear <index> value
     *
     * @return \utilpb\Strong
     */
    public function clearIndex(){
      return $this->_clear(2);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(2);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \utilpb\Strong
     */
    public function setIndex( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(3);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\Strong
     */
    public function clearFlag(){
      return $this->_clear(3);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(3);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\Strong
     */
    public function setFlag( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class PartListInfo extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\PartInfo[]  */
    public $partInfo = array();
    
    /**  @var int */
    public $suit = null;
    
    /**  @var int */
    public $yfSuit = null;
    
    /**  @var int */
    public $wing = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PartListInfo');

      // REPEATED MESSAGE partInfo = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "partInfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\PartInfo';
      $descriptor->addField($f);

      // OPTIONAL INT32 suit = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "suit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 yfSuit = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "yfSuit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 wing = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "wing";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <partInfo> has a value
     *
     * @return boolean
     */
    public function hasPartInfo(){
      return $this->_has(1);
    }
    
    /**
     * Clear <partInfo> value
     *
     * @return \utilpb\PartListInfo
     */
    public function clearPartInfo(){
      return $this->_clear(1);
    }
    
    /**
     * Get <partInfo> value
     *
     * @param int $idx
     * @return \utilpb\PartInfo
     */
    public function getPartInfo($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <partInfo> value
     *
     * @param \utilpb\PartInfo $value
     * @return \utilpb\PartListInfo
     */
    public function setPartInfo(\utilpb\PartInfo $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <partInfo>
     *
     * @return \utilpb\PartInfo[]
     */
    public function getPartInfoList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <partInfo>
     *
     * @param \utilpb\PartInfo $value
     * @return \utilpb\PartListInfo
     */
    public function addPartInfo(\utilpb\PartInfo $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <suit> has a value
     *
     * @return boolean
     */
    public function hasSuit(){
      return $this->_has(2);
    }
    
    /**
     * Clear <suit> value
     *
     * @return \utilpb\PartListInfo
     */
    public function clearSuit(){
      return $this->_clear(2);
    }
    
    /**
     * Get <suit> value
     *
     * @return int
     */
    public function getSuit(){
      return $this->_get(2);
    }
    
    /**
     * Set <suit> value
     *
     * @param int $value
     * @return \utilpb\PartListInfo
     */
    public function setSuit( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <yfSuit> has a value
     *
     * @return boolean
     */
    public function hasYfSuit(){
      return $this->_has(3);
    }
    
    /**
     * Clear <yfSuit> value
     *
     * @return \utilpb\PartListInfo
     */
    public function clearYfSuit(){
      return $this->_clear(3);
    }
    
    /**
     * Get <yfSuit> value
     *
     * @return int
     */
    public function getYfSuit(){
      return $this->_get(3);
    }
    
    /**
     * Set <yfSuit> value
     *
     * @param int $value
     * @return \utilpb\PartListInfo
     */
    public function setYfSuit( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <wing> has a value
     *
     * @return boolean
     */
    public function hasWing(){
      return $this->_has(4);
    }
    
    /**
     * Clear <wing> value
     *
     * @return \utilpb\PartListInfo
     */
    public function clearWing(){
      return $this->_clear(4);
    }
    
    /**
     * Get <wing> value
     *
     * @return int
     */
    public function getWing(){
      return $this->_get(4);
    }
    
    /**
     * Set <wing> value
     *
     * @param int $value
     * @return \utilpb\PartListInfo
     */
    public function setWing( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class PartInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $fight = null;
    
    /**  @var \utilpb\StrongInfo[]  */
    public $strInfo = array();
    
    /**  @var \utilpb\UtilItem */
    public $item = null;
    
    /**  @var int */
    public $sClass = null;
    
    /**  @var \utilpb\GemInfo[]  */
    public $gemInfo = array();
    
    /**  @var int */
    public $energyExp = null;
    
    /**  @var int */
    public $practiceExp = null;
    
    /**  @var int */
    public $deilyLevel = null;
    
    /**  @var int */
    public $carveLevel = null;
    
    /**  @var int */
    public $fuwenIndex = null;
    
    /**  @var \utilpb\FuhunInfo[]  */
    public $fuHun = array();
    
    /**  @var \utilpb\EquipSoulInfo */
    public $deilySoul = null;
    
    /**  @var \utilpb\EquipSoulInfo */
    public $carveSoul = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.PartInfo');

      // OPTIONAL INT32 fight = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "fight";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE strInfo = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "strInfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\StrongInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE item = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "item";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\UtilItem';
      $descriptor->addField($f);

      // OPTIONAL INT32 sClass = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "sClass";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE gemInfo = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "gemInfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\GemInfo';
      $descriptor->addField($f);

      // OPTIONAL INT32 energyExp = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "energyExp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 practiceExp = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "practiceExp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 deilyLevel = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "deilyLevel";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 carveLevel = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "carveLevel";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 fuwenIndex = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "fuwenIndex";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE fuHun = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "fuHun";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\FuhunInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE deilySoul = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "deilySoul";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\EquipSoulInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE carveSoul = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "carveSoul";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\EquipSoulInfo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <fight> has a value
     *
     * @return boolean
     */
    public function hasFight(){
      return $this->_has(1);
    }
    
    /**
     * Clear <fight> value
     *
     * @return \utilpb\PartInfo
     */
    public function clearFight(){
      return $this->_clear(1);
    }
    
    /**
     * Get <fight> value
     *
     * @return int
     */
    public function getFight(){
      return $this->_get(1);
    }
    
    /**
     * Set <fight> value
     *
     * @param int $value
     * @return \utilpb\PartInfo
     */
    public function setFight( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <strInfo> has a value
     *
     * @return boolean
     */
    public function hasStrInfo(){
      return $this->_has(2);
    }
    
    /**
     * Clear <strInfo> value
     *
     * @return \utilpb\PartInfo
     */
    public function clearStrInfo(){
      return $this->_clear(2);
    }
    
    /**
     * Get <strInfo> value
     *
     * @param int $idx
     * @return \utilpb\StrongInfo
     */
    public function getStrInfo($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <strInfo> value
     *
     * @param \utilpb\StrongInfo $value
     * @return \utilpb\PartInfo
     */
    public function setStrInfo(\utilpb\StrongInfo $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <strInfo>
     *
     * @return \utilpb\StrongInfo[]
     */
    public function getStrInfoList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <strInfo>
     *
     * @param \utilpb\StrongInfo $value
     * @return \utilpb\PartInfo
     */
    public function addStrInfo(\utilpb\StrongInfo $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <item> has a value
     *
     * @return boolean
     */
    public function hasItem(){
      return $this->_has(3);
    }
    
    /**
     * Clear <item> value
     *
     * @return \utilpb\PartInfo
     */
    public function clearItem(){
      return $this->_clear(3);
    }
    
    /**
     * Get <item> value
     *
     * @return \utilpb\UtilItem
     */
    public function getItem(){
      return $this->_get(3);
    }
    
    /**
     * Set <item> value
     *
     * @param \utilpb\UtilItem $value
     * @return \utilpb\PartInfo
     */
    public function setItem(\utilpb\UtilItem $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <sClass> has a value
     *
     * @return boolean
     */
    public function hasSClass(){
      return $this->_has(4);
    }
    
    /**
     * Clear <sClass> value
     *
     * @return \utilpb\PartInfo
     */
    public function clearSClass(){
      return $this->_clear(4);
    }
    
    /**
     * Get <sClass> value
     *
     * @return int
     */
    public function getSClass(){
      return $this->_get(4);
    }
    
    /**
     * Set <sClass> value
     *
     * @param int $value
     * @return \utilpb\PartInfo
     */
    public function setSClass( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <gemInfo> has a value
     *
     * @return boolean
     */
    public function hasGemInfo(){
      return $this->_has(5);
    }
    
    /**
     * Clear <gemInfo> value
     *
     * @return \utilpb\PartInfo
     */
    public function clearGemInfo(){
      return $this->_clear(5);
    }
    
    /**
     * Get <gemInfo> value
     *
     * @param int $idx
     * @return \utilpb\GemInfo
     */
    public function getGemInfo($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <gemInfo> value
     *
     * @param \utilpb\GemInfo $value
     * @return \utilpb\PartInfo
     */
    public function setGemInfo(\utilpb\GemInfo $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <gemInfo>
     *
     * @return \utilpb\GemInfo[]
     */
    public function getGemInfoList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <gemInfo>
     *
     * @param \utilpb\GemInfo $value
     * @return \utilpb\PartInfo
     */
    public function addGemInfo(\utilpb\GemInfo $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <energyExp> has a value
     *
     * @return boolean
     */
    public function hasEnergyExp(){
      return $this->_has(6);
    }
    
    /**
     * Clear <energyExp> value
     *
     * @return \utilpb\PartInfo
     */
    public function clearEnergyExp(){
      return $this->_clear(6);
    }
    
    /**
     * Get <energyExp> value
     *
     * @return int
     */
    public function getEnergyExp(){
      return $this->_get(6);
    }
    
    /**
     * Set <energyExp> value
     *
     * @param int $value
     * @return \utilpb\PartInfo
     */
    public function setEnergyExp( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <practiceExp> has a value
     *
     * @return boolean
     */
    public function hasPracticeExp(){
      return $this->_has(7);
    }
    
    /**
     * Clear <practiceExp> value
     *
     * @return \utilpb\PartInfo
     */
    public function clearPracticeExp(){
      return $this->_clear(7);
    }
    
    /**
     * Get <practiceExp> value
     *
     * @return int
     */
    public function getPracticeExp(){
      return $this->_get(7);
    }
    
    /**
     * Set <practiceExp> value
     *
     * @param int $value
     * @return \utilpb\PartInfo
     */
    public function setPracticeExp( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <deilyLevel> has a value
     *
     * @return boolean
     */
    public function hasDeilyLevel(){
      return $this->_has(8);
    }
    
    /**
     * Clear <deilyLevel> value
     *
     * @return \utilpb\PartInfo
     */
    public function clearDeilyLevel(){
      return $this->_clear(8);
    }
    
    /**
     * Get <deilyLevel> value
     *
     * @return int
     */
    public function getDeilyLevel(){
      return $this->_get(8);
    }
    
    /**
     * Set <deilyLevel> value
     *
     * @param int $value
     * @return \utilpb\PartInfo
     */
    public function setDeilyLevel( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <carveLevel> has a value
     *
     * @return boolean
     */
    public function hasCarveLevel(){
      return $this->_has(9);
    }
    
    /**
     * Clear <carveLevel> value
     *
     * @return \utilpb\PartInfo
     */
    public function clearCarveLevel(){
      return $this->_clear(9);
    }
    
    /**
     * Get <carveLevel> value
     *
     * @return int
     */
    public function getCarveLevel(){
      return $this->_get(9);
    }
    
    /**
     * Set <carveLevel> value
     *
     * @param int $value
     * @return \utilpb\PartInfo
     */
    public function setCarveLevel( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <fuwenIndex> has a value
     *
     * @return boolean
     */
    public function hasFuwenIndex(){
      return $this->_has(10);
    }
    
    /**
     * Clear <fuwenIndex> value
     *
     * @return \utilpb\PartInfo
     */
    public function clearFuwenIndex(){
      return $this->_clear(10);
    }
    
    /**
     * Get <fuwenIndex> value
     *
     * @return int
     */
    public function getFuwenIndex(){
      return $this->_get(10);
    }
    
    /**
     * Set <fuwenIndex> value
     *
     * @param int $value
     * @return \utilpb\PartInfo
     */
    public function setFuwenIndex( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <fuHun> has a value
     *
     * @return boolean
     */
    public function hasFuHun(){
      return $this->_has(11);
    }
    
    /**
     * Clear <fuHun> value
     *
     * @return \utilpb\PartInfo
     */
    public function clearFuHun(){
      return $this->_clear(11);
    }
    
    /**
     * Get <fuHun> value
     *
     * @param int $idx
     * @return \utilpb\FuhunInfo
     */
    public function getFuHun($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <fuHun> value
     *
     * @param \utilpb\FuhunInfo $value
     * @return \utilpb\PartInfo
     */
    public function setFuHun(\utilpb\FuhunInfo $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <fuHun>
     *
     * @return \utilpb\FuhunInfo[]
     */
    public function getFuHunList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <fuHun>
     *
     * @param \utilpb\FuhunInfo $value
     * @return \utilpb\PartInfo
     */
    public function addFuHun(\utilpb\FuhunInfo $value){
     return $this->_add(11, $value);
    }
    
    /**
     * Check if <deilySoul> has a value
     *
     * @return boolean
     */
    public function hasDeilySoul(){
      return $this->_has(12);
    }
    
    /**
     * Clear <deilySoul> value
     *
     * @return \utilpb\PartInfo
     */
    public function clearDeilySoul(){
      return $this->_clear(12);
    }
    
    /**
     * Get <deilySoul> value
     *
     * @return \utilpb\EquipSoulInfo
     */
    public function getDeilySoul(){
      return $this->_get(12);
    }
    
    /**
     * Set <deilySoul> value
     *
     * @param \utilpb\EquipSoulInfo $value
     * @return \utilpb\PartInfo
     */
    public function setDeilySoul(\utilpb\EquipSoulInfo $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <carveSoul> has a value
     *
     * @return boolean
     */
    public function hasCarveSoul(){
      return $this->_has(13);
    }
    
    /**
     * Clear <carveSoul> value
     *
     * @return \utilpb\PartInfo
     */
    public function clearCarveSoul(){
      return $this->_clear(13);
    }
    
    /**
     * Get <carveSoul> value
     *
     * @return \utilpb\EquipSoulInfo
     */
    public function getCarveSoul(){
      return $this->_get(13);
    }
    
    /**
     * Set <carveSoul> value
     *
     * @param \utilpb\EquipSoulInfo $value
     * @return \utilpb\PartInfo
     */
    public function setCarveSoul(\utilpb\EquipSoulInfo $value){
      return $this->_set(13, $value);
    }
  }
}

namespace utilpb {

  class GemInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $level = null;
    
    /**  @var int */
    public $color = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.GemInfo');

      // OPTIONAL INT32 level = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 color = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "color";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(1);
    }
    
    /**
     * Clear <level> value
     *
     * @return \utilpb\GemInfo
     */
    public function clearLevel(){
      return $this->_clear(1);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(1);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \utilpb\GemInfo
     */
    public function setLevel( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <color> has a value
     *
     * @return boolean
     */
    public function hasColor(){
      return $this->_has(2);
    }
    
    /**
     * Clear <color> value
     *
     * @return \utilpb\GemInfo
     */
    public function clearColor(){
      return $this->_clear(2);
    }
    
    /**
     * Get <color> value
     *
     * @return int
     */
    public function getColor(){
      return $this->_get(2);
    }
    
    /**
     * Set <color> value
     *
     * @param int $value
     * @return \utilpb\GemInfo
     */
    public function setColor( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class EquipSoulInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $level = null;
    
    /**  @var int */
    public $soul = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.EquipSoulInfo');

      // REQUIRED INT32 level = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 soul = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "soul";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(1);
    }
    
    /**
     * Clear <level> value
     *
     * @return \utilpb\EquipSoulInfo
     */
    public function clearLevel(){
      return $this->_clear(1);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(1);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \utilpb\EquipSoulInfo
     */
    public function setLevel( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <soul> has a value
     *
     * @return boolean
     */
    public function hasSoul(){
      return $this->_has(2);
    }
    
    /**
     * Clear <soul> value
     *
     * @return \utilpb\EquipSoulInfo
     */
    public function clearSoul(){
      return $this->_clear(2);
    }
    
    /**
     * Get <soul> value
     *
     * @return int
     */
    public function getSoul(){
      return $this->_get(2);
    }
    
    /**
     * Set <soul> value
     *
     * @param int $value
     * @return \utilpb\EquipSoulInfo
     */
    public function setSoul( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class StrongInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $starLevel = null;
    
    /**  @var int */
    public $perfect = null;
    
    /**  @var int */
    public $index = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.StrongInfo');

      // REQUIRED INT32 starLevel = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "starLevel";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 perfect = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "perfect";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 index = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <starLevel> has a value
     *
     * @return boolean
     */
    public function hasStarLevel(){
      return $this->_has(1);
    }
    
    /**
     * Clear <starLevel> value
     *
     * @return \utilpb\StrongInfo
     */
    public function clearStarLevel(){
      return $this->_clear(1);
    }
    
    /**
     * Get <starLevel> value
     *
     * @return int
     */
    public function getStarLevel(){
      return $this->_get(1);
    }
    
    /**
     * Set <starLevel> value
     *
     * @param int $value
     * @return \utilpb\StrongInfo
     */
    public function setStarLevel( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <perfect> has a value
     *
     * @return boolean
     */
    public function hasPerfect(){
      return $this->_has(2);
    }
    
    /**
     * Clear <perfect> value
     *
     * @return \utilpb\StrongInfo
     */
    public function clearPerfect(){
      return $this->_clear(2);
    }
    
    /**
     * Get <perfect> value
     *
     * @return int
     */
    public function getPerfect(){
      return $this->_get(2);
    }
    
    /**
     * Set <perfect> value
     *
     * @param int $value
     * @return \utilpb\StrongInfo
     */
    public function setPerfect( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(3);
    }
    
    /**
     * Clear <index> value
     *
     * @return \utilpb\StrongInfo
     */
    public function clearIndex(){
      return $this->_clear(3);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(3);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \utilpb\StrongInfo
     */
    public function setIndex( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class BackStrong extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $code = null;
    
    /**  @var int */
    public $flag = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.BackStrong');

      // REQUIRED INT32 code = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 flag = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <code> value
     *
     * @return \utilpb\BackStrong
     */
    public function clearCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <code> value
     *
     * @return int
     */
    public function getCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <code> value
     *
     * @param int $value
     * @return \utilpb\BackStrong
     */
    public function setCode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(2);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\BackStrong
     */
    public function clearFlag(){
      return $this->_clear(2);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(2);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\BackStrong
     */
    public function setFlag( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class Upgrade extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $uuid = null;
    
    /**  @var int */
    public $sort = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.Upgrade');

      // REQUIRED STRING uuid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "uuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 sort = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sort";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <uuid> has a value
     *
     * @return boolean
     */
    public function hasUuid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <uuid> value
     *
     * @return \utilpb\Upgrade
     */
    public function clearUuid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <uuid> value
     *
     * @return string
     */
    public function getUuid(){
      return $this->_get(1);
    }
    
    /**
     * Set <uuid> value
     *
     * @param string $value
     * @return \utilpb\Upgrade
     */
    public function setUuid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sort> has a value
     *
     * @return boolean
     */
    public function hasSort(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sort> value
     *
     * @return \utilpb\Upgrade
     */
    public function clearSort(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sort> value
     *
     * @return int
     */
    public function getSort(){
      return $this->_get(2);
    }
    
    /**
     * Set <sort> value
     *
     * @param int $value
     * @return \utilpb\Upgrade
     */
    public function setSort( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class Disintegration extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $uuid = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.Disintegration');

      // REPEATED STRING uuid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "uuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <uuid> has a value
     *
     * @return boolean
     */
    public function hasUuid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <uuid> value
     *
     * @return \utilpb\Disintegration
     */
    public function clearUuid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <uuid> value
     *
     * @param int $idx
     * @return string
     */
    public function getUuid($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <uuid> value
     *
     * @param string $value
     * @return \utilpb\Disintegration
     */
    public function setUuid( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <uuid>
     *
     * @return string[]
     */
    public function getUuidList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <uuid>
     *
     * @param string $value
     * @return \utilpb\Disintegration
     */
    public function addUuid( $value){
     return $this->_add(1, $value);
    }
  }
}

namespace utilpb {

  class XiLian extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $bagId = null;
    
    /**  @var string */
    public $uuid = null;
    
    /**  @var int[]  */
    public $index = array();
    
    /**  @var int */
    public $flag = null;
    
    /**  @var int */
    public $xiLianFlag = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.XiLian');

      // REQUIRED INT32 bagId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bagId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING uuid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "uuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED INT32 index = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REQUIRED INT32 flag = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 xiLianFlag = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "xiLianFlag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <bagId> has a value
     *
     * @return boolean
     */
    public function hasBagId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bagId> value
     *
     * @return \utilpb\XiLian
     */
    public function clearBagId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bagId> value
     *
     * @return int
     */
    public function getBagId(){
      return $this->_get(1);
    }
    
    /**
     * Set <bagId> value
     *
     * @param int $value
     * @return \utilpb\XiLian
     */
    public function setBagId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <uuid> has a value
     *
     * @return boolean
     */
    public function hasUuid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <uuid> value
     *
     * @return \utilpb\XiLian
     */
    public function clearUuid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <uuid> value
     *
     * @return string
     */
    public function getUuid(){
      return $this->_get(2);
    }
    
    /**
     * Set <uuid> value
     *
     * @param string $value
     * @return \utilpb\XiLian
     */
    public function setUuid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(3);
    }
    
    /**
     * Clear <index> value
     *
     * @return \utilpb\XiLian
     */
    public function clearIndex(){
      return $this->_clear(3);
    }
    
    /**
     * Get <index> value
     *
     * @param int $idx
     * @return int
     */
    public function getIndex($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \utilpb\XiLian
     */
    public function setIndex( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <index>
     *
     * @return int[]
     */
    public function getIndexList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <index>
     *
     * @param int $value
     * @return \utilpb\XiLian
     */
    public function addIndex( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(4);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\XiLian
     */
    public function clearFlag(){
      return $this->_clear(4);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(4);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\XiLian
     */
    public function setFlag( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <xiLianFlag> has a value
     *
     * @return boolean
     */
    public function hasXiLianFlag(){
      return $this->_has(5);
    }
    
    /**
     * Clear <xiLianFlag> value
     *
     * @return \utilpb\XiLian
     */
    public function clearXiLianFlag(){
      return $this->_clear(5);
    }
    
    /**
     * Get <xiLianFlag> value
     *
     * @return int
     */
    public function getXiLianFlag(){
      return $this->_get(5);
    }
    
    /**
     * Set <xiLianFlag> value
     *
     * @param int $value
     * @return \utilpb\XiLian
     */
    public function setXiLianFlag( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace utilpb {

  class specialXiLian extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $uuid = null;
    
    /**  @var string */
    public $materialUid = null;
    
    /**  @var int[]  */
    public $index = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.specialXiLian');

      // REQUIRED STRING uuid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "uuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING materialUid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "materialUid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED INT32 index = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <uuid> has a value
     *
     * @return boolean
     */
    public function hasUuid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <uuid> value
     *
     * @return \utilpb\specialXiLian
     */
    public function clearUuid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <uuid> value
     *
     * @return string
     */
    public function getUuid(){
      return $this->_get(1);
    }
    
    /**
     * Set <uuid> value
     *
     * @param string $value
     * @return \utilpb\specialXiLian
     */
    public function setUuid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <materialUid> has a value
     *
     * @return boolean
     */
    public function hasMaterialUid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <materialUid> value
     *
     * @return \utilpb\specialXiLian
     */
    public function clearMaterialUid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <materialUid> value
     *
     * @return string
     */
    public function getMaterialUid(){
      return $this->_get(2);
    }
    
    /**
     * Set <materialUid> value
     *
     * @param string $value
     * @return \utilpb\specialXiLian
     */
    public function setMaterialUid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(3);
    }
    
    /**
     * Clear <index> value
     *
     * @return \utilpb\specialXiLian
     */
    public function clearIndex(){
      return $this->_clear(3);
    }
    
    /**
     * Get <index> value
     *
     * @param int $idx
     * @return int
     */
    public function getIndex($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \utilpb\specialXiLian
     */
    public function setIndex( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <index>
     *
     * @return int[]
     */
    public function getIndexList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <index>
     *
     * @param int $value
     * @return \utilpb\specialXiLian
     */
    public function addIndex( $value){
     return $this->_add(3, $value);
    }
  }
}

namespace utilpb {

  class BackXiLian extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $code = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.BackXiLian');

      // REQUIRED INT32 code = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <code> value
     *
     * @return \utilpb\BackXiLian
     */
    public function clearCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <code> value
     *
     * @return int
     */
    public function getCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <code> value
     *
     * @param int $value
     * @return \utilpb\BackXiLian
     */
    public function setCode( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace utilpb {

  class Replace extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $bagId = null;
    
    /**  @var string */
    public $uuid = null;
    
    /**  @var int */
    public $index = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.Replace');

      // REQUIRED INT32 bagId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bagId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING uuid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "uuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 index = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <bagId> has a value
     *
     * @return boolean
     */
    public function hasBagId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bagId> value
     *
     * @return \utilpb\Replace
     */
    public function clearBagId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bagId> value
     *
     * @return int
     */
    public function getBagId(){
      return $this->_get(1);
    }
    
    /**
     * Set <bagId> value
     *
     * @param int $value
     * @return \utilpb\Replace
     */
    public function setBagId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <uuid> has a value
     *
     * @return boolean
     */
    public function hasUuid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <uuid> value
     *
     * @return \utilpb\Replace
     */
    public function clearUuid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <uuid> value
     *
     * @return string
     */
    public function getUuid(){
      return $this->_get(2);
    }
    
    /**
     * Set <uuid> value
     *
     * @param string $value
     * @return \utilpb\Replace
     */
    public function setUuid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(3);
    }
    
    /**
     * Clear <index> value
     *
     * @return \utilpb\Replace
     */
    public function clearIndex(){
      return $this->_clear(3);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(3);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \utilpb\Replace
     */
    public function setIndex( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class Refinery extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $itemId = null;
    
    /**  @var int */
    public $count = null;
    
    /**  @var int */
    public $flag = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.Refinery');

      // REQUIRED STRING itemId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "itemId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 count = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED INT32 flag = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <itemId> has a value
     *
     * @return boolean
     */
    public function hasItemId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <itemId> value
     *
     * @return \utilpb\Refinery
     */
    public function clearItemId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <itemId> value
     *
     * @return string
     */
    public function getItemId(){
      return $this->_get(1);
    }
    
    /**
     * Set <itemId> value
     *
     * @param string $value
     * @return \utilpb\Refinery
     */
    public function setItemId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(2);
    }
    
    /**
     * Clear <count> value
     *
     * @return \utilpb\Refinery
     */
    public function clearCount(){
      return $this->_clear(2);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(2);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \utilpb\Refinery
     */
    public function setCount( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(3);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\Refinery
     */
    public function clearFlag(){
      return $this->_clear(3);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(3);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\Refinery
     */
    public function setFlag( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class Gem extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $sClass = null;
    
    /**  @var int */
    public $flag = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.Gem');

      // REQUIRED INT32 sClass = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sClass";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 flag = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sClass> has a value
     *
     * @return boolean
     */
    public function hasSClass(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sClass> value
     *
     * @return \utilpb\Gem
     */
    public function clearSClass(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sClass> value
     *
     * @return int
     */
    public function getSClass(){
      return $this->_get(1);
    }
    
    /**
     * Set <sClass> value
     *
     * @param int $value
     * @return \utilpb\Gem
     */
    public function setSClass( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(2);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\Gem
     */
    public function clearFlag(){
      return $this->_clear(2);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(2);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\Gem
     */
    public function setFlag( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class SpecialStrong extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $uuid = null;
    
    /**  @var int */
    public $part = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SpecialStrong');

      // REQUIRED STRING uuid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "uuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 part = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "part";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <uuid> has a value
     *
     * @return boolean
     */
    public function hasUuid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <uuid> value
     *
     * @return \utilpb\SpecialStrong
     */
    public function clearUuid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <uuid> value
     *
     * @return string
     */
    public function getUuid(){
      return $this->_get(1);
    }
    
    /**
     * Set <uuid> value
     *
     * @param string $value
     * @return \utilpb\SpecialStrong
     */
    public function setUuid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <part> has a value
     *
     * @return boolean
     */
    public function hasPart(){
      return $this->_has(2);
    }
    
    /**
     * Clear <part> value
     *
     * @return \utilpb\SpecialStrong
     */
    public function clearPart(){
      return $this->_clear(2);
    }
    
    /**
     * Get <part> value
     *
     * @return int
     */
    public function getPart(){
      return $this->_get(2);
    }
    
    /**
     * Set <part> value
     *
     * @param int $value
     * @return \utilpb\SpecialStrong
     */
    public function setPart( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class SpecialUpgrade extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $uuid = null;
    
    /**  @var int */
    public $part = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SpecialUpgrade');

      // REQUIRED STRING uuid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "uuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 part = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "part";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <uuid> has a value
     *
     * @return boolean
     */
    public function hasUuid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <uuid> value
     *
     * @return \utilpb\SpecialUpgrade
     */
    public function clearUuid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <uuid> value
     *
     * @return string
     */
    public function getUuid(){
      return $this->_get(1);
    }
    
    /**
     * Set <uuid> value
     *
     * @param string $value
     * @return \utilpb\SpecialUpgrade
     */
    public function setUuid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <part> has a value
     *
     * @return boolean
     */
    public function hasPart(){
      return $this->_has(2);
    }
    
    /**
     * Clear <part> value
     *
     * @return \utilpb\SpecialUpgrade
     */
    public function clearPart(){
      return $this->_clear(2);
    }
    
    /**
     * Get <part> value
     *
     * @return int
     */
    public function getPart(){
      return $this->_get(2);
    }
    
    /**
     * Set <part> value
     *
     * @param int $value
     * @return \utilpb\SpecialUpgrade
     */
    public function setPart( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class EquipMerge extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $mainUuid = null;
    
    /**  @var int */
    public $mainBagId = null;
    
    /**  @var string */
    public $secondUuid = null;
    
    /**  @var int */
    public $secondBagId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.EquipMerge');

      // REQUIRED STRING mainUuid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "mainUuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 mainBagId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mainBagId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING secondUuid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "secondUuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 secondBagId = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "secondBagId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <mainUuid> has a value
     *
     * @return boolean
     */
    public function hasMainUuid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <mainUuid> value
     *
     * @return \utilpb\EquipMerge
     */
    public function clearMainUuid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <mainUuid> value
     *
     * @return string
     */
    public function getMainUuid(){
      return $this->_get(1);
    }
    
    /**
     * Set <mainUuid> value
     *
     * @param string $value
     * @return \utilpb\EquipMerge
     */
    public function setMainUuid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <mainBagId> has a value
     *
     * @return boolean
     */
    public function hasMainBagId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <mainBagId> value
     *
     * @return \utilpb\EquipMerge
     */
    public function clearMainBagId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <mainBagId> value
     *
     * @return int
     */
    public function getMainBagId(){
      return $this->_get(2);
    }
    
    /**
     * Set <mainBagId> value
     *
     * @param int $value
     * @return \utilpb\EquipMerge
     */
    public function setMainBagId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <secondUuid> has a value
     *
     * @return boolean
     */
    public function hasSecondUuid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <secondUuid> value
     *
     * @return \utilpb\EquipMerge
     */
    public function clearSecondUuid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <secondUuid> value
     *
     * @return string
     */
    public function getSecondUuid(){
      return $this->_get(3);
    }
    
    /**
     * Set <secondUuid> value
     *
     * @param string $value
     * @return \utilpb\EquipMerge
     */
    public function setSecondUuid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <secondBagId> has a value
     *
     * @return boolean
     */
    public function hasSecondBagId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <secondBagId> value
     *
     * @return \utilpb\EquipMerge
     */
    public function clearSecondBagId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <secondBagId> value
     *
     * @return int
     */
    public function getSecondBagId(){
      return $this->_get(4);
    }
    
    /**
     * Set <secondBagId> value
     *
     * @param int $value
     * @return \utilpb\EquipMerge
     */
    public function setSecondBagId( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class EquipTest extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $sClass = null;
    
    /**  @var int */
    public $index = null;
    
    /**  @var int */
    public $level = null;
    
    /**  @var int */
    public $gemEnergy = null;
    
    /**  @var int */
    public $gemPractice = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.EquipTest');

      // REQUIRED INT32 sClass = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sClass";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 index = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 level = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 gemEnergy = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "gemEnergy";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 gemPractice = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "gemPractice";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sClass> has a value
     *
     * @return boolean
     */
    public function hasSClass(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sClass> value
     *
     * @return \utilpb\EquipTest
     */
    public function clearSClass(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sClass> value
     *
     * @return int
     */
    public function getSClass(){
      return $this->_get(1);
    }
    
    /**
     * Set <sClass> value
     *
     * @param int $value
     * @return \utilpb\EquipTest
     */
    public function setSClass( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(2);
    }
    
    /**
     * Clear <index> value
     *
     * @return \utilpb\EquipTest
     */
    public function clearIndex(){
      return $this->_clear(2);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(2);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \utilpb\EquipTest
     */
    public function setIndex( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(3);
    }
    
    /**
     * Clear <level> value
     *
     * @return \utilpb\EquipTest
     */
    public function clearLevel(){
      return $this->_clear(3);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(3);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \utilpb\EquipTest
     */
    public function setLevel( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <gemEnergy> has a value
     *
     * @return boolean
     */
    public function hasGemEnergy(){
      return $this->_has(4);
    }
    
    /**
     * Clear <gemEnergy> value
     *
     * @return \utilpb\EquipTest
     */
    public function clearGemEnergy(){
      return $this->_clear(4);
    }
    
    /**
     * Get <gemEnergy> value
     *
     * @return int
     */
    public function getGemEnergy(){
      return $this->_get(4);
    }
    
    /**
     * Set <gemEnergy> value
     *
     * @param int $value
     * @return \utilpb\EquipTest
     */
    public function setGemEnergy( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <gemPractice> has a value
     *
     * @return boolean
     */
    public function hasGemPractice(){
      return $this->_has(5);
    }
    
    /**
     * Clear <gemPractice> value
     *
     * @return \utilpb\EquipTest
     */
    public function clearGemPractice(){
      return $this->_clear(5);
    }
    
    /**
     * Get <gemPractice> value
     *
     * @return int
     */
    public function getGemPractice(){
      return $this->_get(5);
    }
    
    /**
     * Set <gemPractice> value
     *
     * @param int $value
     * @return \utilpb\EquipTest
     */
    public function setGemPractice( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace utilpb {

  class Deily extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $part = null;
    
    /**  @var int */
    public $flagSh = null;
    
    /**  @var int */
    public $flagBd = null;
    
    /**  @var int */
    public $flagTs = null;
    
    /**  @var int */
    public $useBd = null;
    
    /**  @var int */
    public $useTs = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.Deily');

      // REQUIRED INT32 part = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "part";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 flagSh = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "flagSh";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 flagBd = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "flagBd";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 flagTs = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "flagTs";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 useBd = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "useBd";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 useTs = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "useTs";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <part> has a value
     *
     * @return boolean
     */
    public function hasPart(){
      return $this->_has(1);
    }
    
    /**
     * Clear <part> value
     *
     * @return \utilpb\Deily
     */
    public function clearPart(){
      return $this->_clear(1);
    }
    
    /**
     * Get <part> value
     *
     * @return int
     */
    public function getPart(){
      return $this->_get(1);
    }
    
    /**
     * Set <part> value
     *
     * @param int $value
     * @return \utilpb\Deily
     */
    public function setPart( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <flagSh> has a value
     *
     * @return boolean
     */
    public function hasFlagSh(){
      return $this->_has(2);
    }
    
    /**
     * Clear <flagSh> value
     *
     * @return \utilpb\Deily
     */
    public function clearFlagSh(){
      return $this->_clear(2);
    }
    
    /**
     * Get <flagSh> value
     *
     * @return int
     */
    public function getFlagSh(){
      return $this->_get(2);
    }
    
    /**
     * Set <flagSh> value
     *
     * @param int $value
     * @return \utilpb\Deily
     */
    public function setFlagSh( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <flagBd> has a value
     *
     * @return boolean
     */
    public function hasFlagBd(){
      return $this->_has(3);
    }
    
    /**
     * Clear <flagBd> value
     *
     * @return \utilpb\Deily
     */
    public function clearFlagBd(){
      return $this->_clear(3);
    }
    
    /**
     * Get <flagBd> value
     *
     * @return int
     */
    public function getFlagBd(){
      return $this->_get(3);
    }
    
    /**
     * Set <flagBd> value
     *
     * @param int $value
     * @return \utilpb\Deily
     */
    public function setFlagBd( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <flagTs> has a value
     *
     * @return boolean
     */
    public function hasFlagTs(){
      return $this->_has(4);
    }
    
    /**
     * Clear <flagTs> value
     *
     * @return \utilpb\Deily
     */
    public function clearFlagTs(){
      return $this->_clear(4);
    }
    
    /**
     * Get <flagTs> value
     *
     * @return int
     */
    public function getFlagTs(){
      return $this->_get(4);
    }
    
    /**
     * Set <flagTs> value
     *
     * @param int $value
     * @return \utilpb\Deily
     */
    public function setFlagTs( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <useBd> has a value
     *
     * @return boolean
     */
    public function hasUseBd(){
      return $this->_has(5);
    }
    
    /**
     * Clear <useBd> value
     *
     * @return \utilpb\Deily
     */
    public function clearUseBd(){
      return $this->_clear(5);
    }
    
    /**
     * Get <useBd> value
     *
     * @return int
     */
    public function getUseBd(){
      return $this->_get(5);
    }
    
    /**
     * Set <useBd> value
     *
     * @param int $value
     * @return \utilpb\Deily
     */
    public function setUseBd( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <useTs> has a value
     *
     * @return boolean
     */
    public function hasUseTs(){
      return $this->_has(6);
    }
    
    /**
     * Clear <useTs> value
     *
     * @return \utilpb\Deily
     */
    public function clearUseTs(){
      return $this->_clear(6);
    }
    
    /**
     * Get <useTs> value
     *
     * @return int
     */
    public function getUseTs(){
      return $this->_get(6);
    }
    
    /**
     * Set <useTs> value
     *
     * @param int $value
     * @return \utilpb\Deily
     */
    public function setUseTs( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace utilpb {

  class BackDeily extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $code = null;
    
    /**  @var int */
    public $flag = null;
    
    /**  @var int */
    public $level = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.BackDeily');

      // REQUIRED INT32 code = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 flag = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 level = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <code> value
     *
     * @return \utilpb\BackDeily
     */
    public function clearCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <code> value
     *
     * @return int
     */
    public function getCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <code> value
     *
     * @param int $value
     * @return \utilpb\BackDeily
     */
    public function setCode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(2);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\BackDeily
     */
    public function clearFlag(){
      return $this->_clear(2);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(2);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\BackDeily
     */
    public function setFlag( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(3);
    }
    
    /**
     * Clear <level> value
     *
     * @return \utilpb\BackDeily
     */
    public function clearLevel(){
      return $this->_clear(3);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(3);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \utilpb\BackDeily
     */
    public function setLevel( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class Carve extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $part = null;
    
    /**  @var int */
    public $flagDk = null;
    
    /**  @var int */
    public $flagBd = null;
    
    /**  @var int */
    public $flagTs = null;
    
    /**  @var int */
    public $useBd = null;
    
    /**  @var int */
    public $useTs = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.Carve');

      // REQUIRED INT32 part = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "part";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 flagDk = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "flagDk";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 flagBd = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "flagBd";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 flagTs = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "flagTs";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 useBd = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "useBd";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 useTs = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "useTs";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <part> has a value
     *
     * @return boolean
     */
    public function hasPart(){
      return $this->_has(1);
    }
    
    /**
     * Clear <part> value
     *
     * @return \utilpb\Carve
     */
    public function clearPart(){
      return $this->_clear(1);
    }
    
    /**
     * Get <part> value
     *
     * @return int
     */
    public function getPart(){
      return $this->_get(1);
    }
    
    /**
     * Set <part> value
     *
     * @param int $value
     * @return \utilpb\Carve
     */
    public function setPart( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <flagDk> has a value
     *
     * @return boolean
     */
    public function hasFlagDk(){
      return $this->_has(2);
    }
    
    /**
     * Clear <flagDk> value
     *
     * @return \utilpb\Carve
     */
    public function clearFlagDk(){
      return $this->_clear(2);
    }
    
    /**
     * Get <flagDk> value
     *
     * @return int
     */
    public function getFlagDk(){
      return $this->_get(2);
    }
    
    /**
     * Set <flagDk> value
     *
     * @param int $value
     * @return \utilpb\Carve
     */
    public function setFlagDk( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <flagBd> has a value
     *
     * @return boolean
     */
    public function hasFlagBd(){
      return $this->_has(3);
    }
    
    /**
     * Clear <flagBd> value
     *
     * @return \utilpb\Carve
     */
    public function clearFlagBd(){
      return $this->_clear(3);
    }
    
    /**
     * Get <flagBd> value
     *
     * @return int
     */
    public function getFlagBd(){
      return $this->_get(3);
    }
    
    /**
     * Set <flagBd> value
     *
     * @param int $value
     * @return \utilpb\Carve
     */
    public function setFlagBd( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <flagTs> has a value
     *
     * @return boolean
     */
    public function hasFlagTs(){
      return $this->_has(4);
    }
    
    /**
     * Clear <flagTs> value
     *
     * @return \utilpb\Carve
     */
    public function clearFlagTs(){
      return $this->_clear(4);
    }
    
    /**
     * Get <flagTs> value
     *
     * @return int
     */
    public function getFlagTs(){
      return $this->_get(4);
    }
    
    /**
     * Set <flagTs> value
     *
     * @param int $value
     * @return \utilpb\Carve
     */
    public function setFlagTs( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <useBd> has a value
     *
     * @return boolean
     */
    public function hasUseBd(){
      return $this->_has(5);
    }
    
    /**
     * Clear <useBd> value
     *
     * @return \utilpb\Carve
     */
    public function clearUseBd(){
      return $this->_clear(5);
    }
    
    /**
     * Get <useBd> value
     *
     * @return int
     */
    public function getUseBd(){
      return $this->_get(5);
    }
    
    /**
     * Set <useBd> value
     *
     * @param int $value
     * @return \utilpb\Carve
     */
    public function setUseBd( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <useTs> has a value
     *
     * @return boolean
     */
    public function hasUseTs(){
      return $this->_has(6);
    }
    
    /**
     * Clear <useTs> value
     *
     * @return \utilpb\Carve
     */
    public function clearUseTs(){
      return $this->_clear(6);
    }
    
    /**
     * Get <useTs> value
     *
     * @return int
     */
    public function getUseTs(){
      return $this->_get(6);
    }
    
    /**
     * Set <useTs> value
     *
     * @param int $value
     * @return \utilpb\Carve
     */
    public function setUseTs( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace utilpb {

  class BackCarve extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $code = null;
    
    /**  @var int */
    public $flag = null;
    
    /**  @var int */
    public $level = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.BackCarve');

      // REQUIRED INT32 code = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 flag = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 level = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <code> value
     *
     * @return \utilpb\BackCarve
     */
    public function clearCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <code> value
     *
     * @return int
     */
    public function getCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <code> value
     *
     * @param int $value
     * @return \utilpb\BackCarve
     */
    public function setCode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(2);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\BackCarve
     */
    public function clearFlag(){
      return $this->_clear(2);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(2);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\BackCarve
     */
    public function setFlag( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(3);
    }
    
    /**
     * Clear <level> value
     *
     * @return \utilpb\BackCarve
     */
    public function clearLevel(){
      return $this->_clear(3);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(3);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \utilpb\BackCarve
     */
    public function setLevel( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class HomeMake extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $itemId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.HomeMake');

      // REQUIRED DOUBLE itemId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "itemId";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <itemId> has a value
     *
     * @return boolean
     */
    public function hasItemId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <itemId> value
     *
     * @return \utilpb\HomeMake
     */
    public function clearItemId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <itemId> value
     *
     * @return float
     */
    public function getItemId(){
      return $this->_get(1);
    }
    
    /**
     * Set <itemId> value
     *
     * @param float $value
     * @return \utilpb\HomeMake
     */
    public function setItemId( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace utilpb {

  class FuwenMake extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $sClass = null;
    
    /**  @var int */
    public $index = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.FuwenMake');

      // REQUIRED INT32 sClass = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sClass";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 index = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sClass> has a value
     *
     * @return boolean
     */
    public function hasSClass(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sClass> value
     *
     * @return \utilpb\FuwenMake
     */
    public function clearSClass(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sClass> value
     *
     * @return int
     */
    public function getSClass(){
      return $this->_get(1);
    }
    
    /**
     * Set <sClass> value
     *
     * @param int $value
     * @return \utilpb\FuwenMake
     */
    public function setSClass( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(2);
    }
    
    /**
     * Clear <index> value
     *
     * @return \utilpb\FuwenMake
     */
    public function clearIndex(){
      return $this->_clear(2);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(2);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \utilpb\FuwenMake
     */
    public function setIndex( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class FuHun extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $sClass = null;
    
    /**  @var int */
    public $index = null;
    
    /**  @var int */
    public $flag = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.FuHun');

      // REQUIRED INT32 sClass = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sClass";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 index = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 flag = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "flag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sClass> has a value
     *
     * @return boolean
     */
    public function hasSClass(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sClass> value
     *
     * @return \utilpb\FuHun
     */
    public function clearSClass(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sClass> value
     *
     * @return int
     */
    public function getSClass(){
      return $this->_get(1);
    }
    
    /**
     * Set <sClass> value
     *
     * @param int $value
     * @return \utilpb\FuHun
     */
    public function setSClass( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(2);
    }
    
    /**
     * Clear <index> value
     *
     * @return \utilpb\FuHun
     */
    public function clearIndex(){
      return $this->_clear(2);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(2);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \utilpb\FuHun
     */
    public function setIndex( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <flag> has a value
     *
     * @return boolean
     */
    public function hasFlag(){
      return $this->_has(3);
    }
    
    /**
     * Clear <flag> value
     *
     * @return \utilpb\FuHun
     */
    public function clearFlag(){
      return $this->_clear(3);
    }
    
    /**
     * Get <flag> value
     *
     * @return int
     */
    public function getFlag(){
      return $this->_get(3);
    }
    
    /**
     * Set <flag> value
     *
     * @param int $value
     * @return \utilpb\FuHun
     */
    public function setFlag( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class FuhunInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $starLevel = null;
    
    /**  @var int */
    public $perfect = null;
    
    /**  @var int */
    public $index = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.FuhunInfo');

      // REQUIRED INT32 starLevel = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "starLevel";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 perfect = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "perfect";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 index = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <starLevel> has a value
     *
     * @return boolean
     */
    public function hasStarLevel(){
      return $this->_has(1);
    }
    
    /**
     * Clear <starLevel> value
     *
     * @return \utilpb\FuhunInfo
     */
    public function clearStarLevel(){
      return $this->_clear(1);
    }
    
    /**
     * Get <starLevel> value
     *
     * @return int
     */
    public function getStarLevel(){
      return $this->_get(1);
    }
    
    /**
     * Set <starLevel> value
     *
     * @param int $value
     * @return \utilpb\FuhunInfo
     */
    public function setStarLevel( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <perfect> has a value
     *
     * @return boolean
     */
    public function hasPerfect(){
      return $this->_has(2);
    }
    
    /**
     * Clear <perfect> value
     *
     * @return \utilpb\FuhunInfo
     */
    public function clearPerfect(){
      return $this->_clear(2);
    }
    
    /**
     * Get <perfect> value
     *
     * @return int
     */
    public function getPerfect(){
      return $this->_get(2);
    }
    
    /**
     * Set <perfect> value
     *
     * @param int $value
     * @return \utilpb\FuhunInfo
     */
    public function setPerfect( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(3);
    }
    
    /**
     * Clear <index> value
     *
     * @return \utilpb\FuhunInfo
     */
    public function clearIndex(){
      return $this->_clear(3);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(3);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \utilpb\FuhunInfo
     */
    public function setIndex( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class BackFuhun extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $code = null;
    
    /**  @var int */
    public $oldCount = null;
    
    /**  @var int */
    public $newCount = null;
    
    /**  @var int */
    public $index = null;
    
    /**  @var int */
    public $oldLevel = null;
    
    /**  @var int */
    public $newLevel = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.BackFuhun');

      // REQUIRED INT32 code = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 oldCount = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "oldCount";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 newCount = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "newCount";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 index = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 oldLevel = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "oldLevel";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 newLevel = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "newLevel";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <code> value
     *
     * @return \utilpb\BackFuhun
     */
    public function clearCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <code> value
     *
     * @return int
     */
    public function getCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <code> value
     *
     * @param int $value
     * @return \utilpb\BackFuhun
     */
    public function setCode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <oldCount> has a value
     *
     * @return boolean
     */
    public function hasOldCount(){
      return $this->_has(2);
    }
    
    /**
     * Clear <oldCount> value
     *
     * @return \utilpb\BackFuhun
     */
    public function clearOldCount(){
      return $this->_clear(2);
    }
    
    /**
     * Get <oldCount> value
     *
     * @return int
     */
    public function getOldCount(){
      return $this->_get(2);
    }
    
    /**
     * Set <oldCount> value
     *
     * @param int $value
     * @return \utilpb\BackFuhun
     */
    public function setOldCount( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <newCount> has a value
     *
     * @return boolean
     */
    public function hasNewCount(){
      return $this->_has(3);
    }
    
    /**
     * Clear <newCount> value
     *
     * @return \utilpb\BackFuhun
     */
    public function clearNewCount(){
      return $this->_clear(3);
    }
    
    /**
     * Get <newCount> value
     *
     * @return int
     */
    public function getNewCount(){
      return $this->_get(3);
    }
    
    /**
     * Set <newCount> value
     *
     * @param int $value
     * @return \utilpb\BackFuhun
     */
    public function setNewCount( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(4);
    }
    
    /**
     * Clear <index> value
     *
     * @return \utilpb\BackFuhun
     */
    public function clearIndex(){
      return $this->_clear(4);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(4);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \utilpb\BackFuhun
     */
    public function setIndex( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <oldLevel> has a value
     *
     * @return boolean
     */
    public function hasOldLevel(){
      return $this->_has(5);
    }
    
    /**
     * Clear <oldLevel> value
     *
     * @return \utilpb\BackFuhun
     */
    public function clearOldLevel(){
      return $this->_clear(5);
    }
    
    /**
     * Get <oldLevel> value
     *
     * @return int
     */
    public function getOldLevel(){
      return $this->_get(5);
    }
    
    /**
     * Set <oldLevel> value
     *
     * @param int $value
     * @return \utilpb\BackFuhun
     */
    public function setOldLevel( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <newLevel> has a value
     *
     * @return boolean
     */
    public function hasNewLevel(){
      return $this->_has(6);
    }
    
    /**
     * Clear <newLevel> value
     *
     * @return \utilpb\BackFuhun
     */
    public function clearNewLevel(){
      return $this->_clear(6);
    }
    
    /**
     * Get <newLevel> value
     *
     * @return int
     */
    public function getNewLevel(){
      return $this->_get(6);
    }
    
    /**
     * Set <newLevel> value
     *
     * @param int $value
     * @return \utilpb\BackFuhun
     */
    public function setNewLevel( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace utilpb {

  class SoulMes extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $sClass = null;
    
    /**  @var int */
    public $type = null;
    
    /**  @var int */
    public $autoFlag = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.SoulMes');

      // REQUIRED INT32 sClass = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sClass";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 autoFlag = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "autoFlag";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sClass> has a value
     *
     * @return boolean
     */
    public function hasSClass(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sClass> value
     *
     * @return \utilpb\SoulMes
     */
    public function clearSClass(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sClass> value
     *
     * @return int
     */
    public function getSClass(){
      return $this->_get(1);
    }
    
    /**
     * Set <sClass> value
     *
     * @param int $value
     * @return \utilpb\SoulMes
     */
    public function setSClass( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\SoulMes
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\SoulMes
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <autoFlag> has a value
     *
     * @return boolean
     */
    public function hasAutoFlag(){
      return $this->_has(3);
    }
    
    /**
     * Clear <autoFlag> value
     *
     * @return \utilpb\SoulMes
     */
    public function clearAutoFlag(){
      return $this->_clear(3);
    }
    
    /**
     * Get <autoFlag> value
     *
     * @return int
     */
    public function getAutoFlag(){
      return $this->_get(3);
    }
    
    /**
     * Set <autoFlag> value
     *
     * @param int $value
     * @return \utilpb\SoulMes
     */
    public function setAutoFlag( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class BackSoulMessage extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $code = null;
    
    /**  @var int */
    public $addSoul = null;
    
    /**  @var int */
    public $sClass = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.BackSoulMessage');

      // REQUIRED INT32 code = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 addSoul = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "addSoul";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 sClass = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "sClass";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <code> value
     *
     * @return \utilpb\BackSoulMessage
     */
    public function clearCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <code> value
     *
     * @return int
     */
    public function getCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <code> value
     *
     * @param int $value
     * @return \utilpb\BackSoulMessage
     */
    public function setCode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <addSoul> has a value
     *
     * @return boolean
     */
    public function hasAddSoul(){
      return $this->_has(2);
    }
    
    /**
     * Clear <addSoul> value
     *
     * @return \utilpb\BackSoulMessage
     */
    public function clearAddSoul(){
      return $this->_clear(2);
    }
    
    /**
     * Get <addSoul> value
     *
     * @return int
     */
    public function getAddSoul(){
      return $this->_get(2);
    }
    
    /**
     * Set <addSoul> value
     *
     * @param int $value
     * @return \utilpb\BackSoulMessage
     */
    public function setAddSoul( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <sClass> has a value
     *
     * @return boolean
     */
    public function hasSClass(){
      return $this->_has(3);
    }
    
    /**
     * Clear <sClass> value
     *
     * @return \utilpb\BackSoulMessage
     */
    public function clearSClass(){
      return $this->_clear(3);
    }
    
    /**
     * Get <sClass> value
     *
     * @return int
     */
    public function getSClass(){
      return $this->_get(3);
    }
    
    /**
     * Set <sClass> value
     *
     * @param int $value
     * @return \utilpb\BackSoulMessage
     */
    public function setSClass( $value){
      return $this->_set(3, $value);
    }
  }
}

