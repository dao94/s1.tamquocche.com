<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: utilpb/marry.proto
//   Date: 2014-12-19 08:23:07

namespace utilpb {

  class courtship extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID */
    public $id = null;
    
    /**  @var int */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.courtship');

      // REQUIRED MESSAGE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // REQUIRED INT32 type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\courtship
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\courtship
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\courtship
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\courtship
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class yesorno extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $type = null;
    
    /**  @var \utilpb\ComposeID */
    public $id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.yesorno');

      // REQUIRED INT32 type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\yesorno
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\yesorno
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\yesorno
     */
    public function clearId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(2);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\yesorno
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class divorce extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.divorce');

      // REQUIRED INT32 type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\divorce
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\divorce
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace utilpb {

  class courtshipRet extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $retCode = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $occ = null;
    
    /**  @var string */
    public $faction = null;
    
    /**  @var \utilpb\ComposeID */
    public $id = null;
    
    /**  @var int */
    public $sex = null;
    
    /**  @var int */
    public $level = null;
    
    /**  @var int */
    public $ringType = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.courtshipRet');

      // REQUIRED INT32 retCode = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "retCode";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 occ = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "occ";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING faction = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "faction";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL INT32 sex = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "sex";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 level = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 ringType = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "ringType";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <retCode> has a value
     *
     * @return boolean
     */
    public function hasRetCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <retCode> value
     *
     * @return \utilpb\courtshipRet
     */
    public function clearRetCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <retCode> value
     *
     * @return int
     */
    public function getRetCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <retCode> value
     *
     * @param int $value
     * @return \utilpb\courtshipRet
     */
    public function setRetCode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\courtshipRet
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\courtshipRet
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <occ> has a value
     *
     * @return boolean
     */
    public function hasOcc(){
      return $this->_has(3);
    }
    
    /**
     * Clear <occ> value
     *
     * @return \utilpb\courtshipRet
     */
    public function clearOcc(){
      return $this->_clear(3);
    }
    
    /**
     * Get <occ> value
     *
     * @return int
     */
    public function getOcc(){
      return $this->_get(3);
    }
    
    /**
     * Set <occ> value
     *
     * @param int $value
     * @return \utilpb\courtshipRet
     */
    public function setOcc( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <faction> has a value
     *
     * @return boolean
     */
    public function hasFaction(){
      return $this->_has(4);
    }
    
    /**
     * Clear <faction> value
     *
     * @return \utilpb\courtshipRet
     */
    public function clearFaction(){
      return $this->_clear(4);
    }
    
    /**
     * Get <faction> value
     *
     * @return string
     */
    public function getFaction(){
      return $this->_get(4);
    }
    
    /**
     * Set <faction> value
     *
     * @param string $value
     * @return \utilpb\courtshipRet
     */
    public function setFaction( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\courtshipRet
     */
    public function clearId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(5);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\courtshipRet
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <sex> has a value
     *
     * @return boolean
     */
    public function hasSex(){
      return $this->_has(6);
    }
    
    /**
     * Clear <sex> value
     *
     * @return \utilpb\courtshipRet
     */
    public function clearSex(){
      return $this->_clear(6);
    }
    
    /**
     * Get <sex> value
     *
     * @return int
     */
    public function getSex(){
      return $this->_get(6);
    }
    
    /**
     * Set <sex> value
     *
     * @param int $value
     * @return \utilpb\courtshipRet
     */
    public function setSex( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <level> has a value
     *
     * @return boolean
     */
    public function hasLevel(){
      return $this->_has(7);
    }
    
    /**
     * Clear <level> value
     *
     * @return \utilpb\courtshipRet
     */
    public function clearLevel(){
      return $this->_clear(7);
    }
    
    /**
     * Get <level> value
     *
     * @return int
     */
    public function getLevel(){
      return $this->_get(7);
    }
    
    /**
     * Set <level> value
     *
     * @param int $value
     * @return \utilpb\courtshipRet
     */
    public function setLevel( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <ringType> has a value
     *
     * @return boolean
     */
    public function hasRingType(){
      return $this->_has(8);
    }
    
    /**
     * Clear <ringType> value
     *
     * @return \utilpb\courtshipRet
     */
    public function clearRingType(){
      return $this->_clear(8);
    }
    
    /**
     * Get <ringType> value
     *
     * @return int
     */
    public function getRingType(){
      return $this->_get(8);
    }
    
    /**
     * Set <ringType> value
     *
     * @param int $value
     * @return \utilpb\courtshipRet
     */
    public function setRingType( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace utilpb {

  class checkCourtShip extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $ringType = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.checkCourtShip');

      // REQUIRED INT32 ringType = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "ringType";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <ringType> has a value
     *
     * @return boolean
     */
    public function hasRingType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <ringType> value
     *
     * @return \utilpb\checkCourtShip
     */
    public function clearRingType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <ringType> value
     *
     * @return int
     */
    public function getRingType(){
      return $this->_get(3);
    }
    
    /**
     * Set <ringType> value
     *
     * @param int $value
     * @return \utilpb\checkCourtShip
     */
    public function setRingType( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class weddingToUser extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $otherId = null;
    
    /**  @var int */
    public $state = null;
    
    /**  @var int */
    public $ringLv = null;
    
    /**  @var int */
    public $type = null;
    
    /**  @var int */
    public $commonHeart = null;
    
    /**  @var string */
    public $otherName = null;
    
    /**  @var int */
    public $weddingLv = null;
    
    /**  @var int */
    public $sponsor = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.weddingToUser');

      // OPTIONAL DOUBLE otherId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "otherId";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 state = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 ringLv = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "ringLv";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 type = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 commonHeart = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "commonHeart";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING otherName = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "otherName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 weddingLv = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "weddingLv";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 sponsor = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "sponsor";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <otherId> has a value
     *
     * @return boolean
     */
    public function hasOtherId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <otherId> value
     *
     * @return \utilpb\weddingToUser
     */
    public function clearOtherId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <otherId> value
     *
     * @return float
     */
    public function getOtherId(){
      return $this->_get(1);
    }
    
    /**
     * Set <otherId> value
     *
     * @param float $value
     * @return \utilpb\weddingToUser
     */
    public function setOtherId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(2);
    }
    
    /**
     * Clear <state> value
     *
     * @return \utilpb\weddingToUser
     */
    public function clearState(){
      return $this->_clear(2);
    }
    
    /**
     * Get <state> value
     *
     * @return int
     */
    public function getState(){
      return $this->_get(2);
    }
    
    /**
     * Set <state> value
     *
     * @param int $value
     * @return \utilpb\weddingToUser
     */
    public function setState( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <ringLv> has a value
     *
     * @return boolean
     */
    public function hasRingLv(){
      return $this->_has(3);
    }
    
    /**
     * Clear <ringLv> value
     *
     * @return \utilpb\weddingToUser
     */
    public function clearRingLv(){
      return $this->_clear(3);
    }
    
    /**
     * Get <ringLv> value
     *
     * @return int
     */
    public function getRingLv(){
      return $this->_get(3);
    }
    
    /**
     * Set <ringLv> value
     *
     * @param int $value
     * @return \utilpb\weddingToUser
     */
    public function setRingLv( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <type> value
     *
     * @return \utilpb\weddingToUser
     */
    public function clearType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(4);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \utilpb\weddingToUser
     */
    public function setType( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <commonHeart> has a value
     *
     * @return boolean
     */
    public function hasCommonHeart(){
      return $this->_has(5);
    }
    
    /**
     * Clear <commonHeart> value
     *
     * @return \utilpb\weddingToUser
     */
    public function clearCommonHeart(){
      return $this->_clear(5);
    }
    
    /**
     * Get <commonHeart> value
     *
     * @return int
     */
    public function getCommonHeart(){
      return $this->_get(5);
    }
    
    /**
     * Set <commonHeart> value
     *
     * @param int $value
     * @return \utilpb\weddingToUser
     */
    public function setCommonHeart( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <otherName> has a value
     *
     * @return boolean
     */
    public function hasOtherName(){
      return $this->_has(6);
    }
    
    /**
     * Clear <otherName> value
     *
     * @return \utilpb\weddingToUser
     */
    public function clearOtherName(){
      return $this->_clear(6);
    }
    
    /**
     * Get <otherName> value
     *
     * @return string
     */
    public function getOtherName(){
      return $this->_get(6);
    }
    
    /**
     * Set <otherName> value
     *
     * @param string $value
     * @return \utilpb\weddingToUser
     */
    public function setOtherName( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <weddingLv> has a value
     *
     * @return boolean
     */
    public function hasWeddingLv(){
      return $this->_has(7);
    }
    
    /**
     * Clear <weddingLv> value
     *
     * @return \utilpb\weddingToUser
     */
    public function clearWeddingLv(){
      return $this->_clear(7);
    }
    
    /**
     * Get <weddingLv> value
     *
     * @return int
     */
    public function getWeddingLv(){
      return $this->_get(7);
    }
    
    /**
     * Set <weddingLv> value
     *
     * @param int $value
     * @return \utilpb\weddingToUser
     */
    public function setWeddingLv( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <sponsor> has a value
     *
     * @return boolean
     */
    public function hasSponsor(){
      return $this->_has(8);
    }
    
    /**
     * Clear <sponsor> value
     *
     * @return \utilpb\weddingToUser
     */
    public function clearSponsor(){
      return $this->_clear(8);
    }
    
    /**
     * Get <sponsor> value
     *
     * @return int
     */
    public function getSponsor(){
      return $this->_get(8);
    }
    
    /**
     * Set <sponsor> value
     *
     * @param int $value
     * @return \utilpb\weddingToUser
     */
    public function setSponsor( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace utilpb {

  class weddingConInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $commonHeart = null;
    
    /**  @var string */
    public $otherName = null;
    
    /**  @var int */
    public $weddingState = null;
    
    /**  @var int */
    public $occ = null;
    
    /**  @var int */
    public $ringLv = null;
    
    /**  @var int */
    public $weddingTime = null;
    
    /**  @var \utilpb\ComposeID */
    public $id = null;
    
    /**  @var int */
    public $index = null;
    
    /**  @var int */
    public $sponsor = null;
    
    /**  @var int */
    public $sex = null;
    
    /**  @var int */
    public $weddingLv = null;
    
    /**  @var int */
    public $gifeCnt = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.weddingConInfo');

      // OPTIONAL INT32 commonHeart = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "commonHeart";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING otherName = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "otherName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 weddingState = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "weddingState";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 occ = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "occ";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 ringLv = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "ringLv";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 weddingTime = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "weddingTime";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE id = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL INT32 index = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 sponsor = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "sponsor";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 sex = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "sex";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 weddingLv = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "weddingLv";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 gifeCnt = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "gifeCnt";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <commonHeart> has a value
     *
     * @return boolean
     */
    public function hasCommonHeart(){
      return $this->_has(1);
    }
    
    /**
     * Clear <commonHeart> value
     *
     * @return \utilpb\weddingConInfo
     */
    public function clearCommonHeart(){
      return $this->_clear(1);
    }
    
    /**
     * Get <commonHeart> value
     *
     * @return int
     */
    public function getCommonHeart(){
      return $this->_get(1);
    }
    
    /**
     * Set <commonHeart> value
     *
     * @param int $value
     * @return \utilpb\weddingConInfo
     */
    public function setCommonHeart( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <otherName> has a value
     *
     * @return boolean
     */
    public function hasOtherName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <otherName> value
     *
     * @return \utilpb\weddingConInfo
     */
    public function clearOtherName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <otherName> value
     *
     * @return string
     */
    public function getOtherName(){
      return $this->_get(2);
    }
    
    /**
     * Set <otherName> value
     *
     * @param string $value
     * @return \utilpb\weddingConInfo
     */
    public function setOtherName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <weddingState> has a value
     *
     * @return boolean
     */
    public function hasWeddingState(){
      return $this->_has(3);
    }
    
    /**
     * Clear <weddingState> value
     *
     * @return \utilpb\weddingConInfo
     */
    public function clearWeddingState(){
      return $this->_clear(3);
    }
    
    /**
     * Get <weddingState> value
     *
     * @return int
     */
    public function getWeddingState(){
      return $this->_get(3);
    }
    
    /**
     * Set <weddingState> value
     *
     * @param int $value
     * @return \utilpb\weddingConInfo
     */
    public function setWeddingState( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <occ> has a value
     *
     * @return boolean
     */
    public function hasOcc(){
      return $this->_has(4);
    }
    
    /**
     * Clear <occ> value
     *
     * @return \utilpb\weddingConInfo
     */
    public function clearOcc(){
      return $this->_clear(4);
    }
    
    /**
     * Get <occ> value
     *
     * @return int
     */
    public function getOcc(){
      return $this->_get(4);
    }
    
    /**
     * Set <occ> value
     *
     * @param int $value
     * @return \utilpb\weddingConInfo
     */
    public function setOcc( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <ringLv> has a value
     *
     * @return boolean
     */
    public function hasRingLv(){
      return $this->_has(5);
    }
    
    /**
     * Clear <ringLv> value
     *
     * @return \utilpb\weddingConInfo
     */
    public function clearRingLv(){
      return $this->_clear(5);
    }
    
    /**
     * Get <ringLv> value
     *
     * @return int
     */
    public function getRingLv(){
      return $this->_get(5);
    }
    
    /**
     * Set <ringLv> value
     *
     * @param int $value
     * @return \utilpb\weddingConInfo
     */
    public function setRingLv( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <weddingTime> has a value
     *
     * @return boolean
     */
    public function hasWeddingTime(){
      return $this->_has(6);
    }
    
    /**
     * Clear <weddingTime> value
     *
     * @return \utilpb\weddingConInfo
     */
    public function clearWeddingTime(){
      return $this->_clear(6);
    }
    
    /**
     * Get <weddingTime> value
     *
     * @return int
     */
    public function getWeddingTime(){
      return $this->_get(6);
    }
    
    /**
     * Set <weddingTime> value
     *
     * @param int $value
     * @return \utilpb\weddingConInfo
     */
    public function setWeddingTime( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\weddingConInfo
     */
    public function clearId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <id> value
     *
     * @return \utilpb\ComposeID
     */
    public function getId(){
      return $this->_get(7);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\weddingConInfo
     */
    public function setId(\utilpb\ComposeID $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(8);
    }
    
    /**
     * Clear <index> value
     *
     * @return \utilpb\weddingConInfo
     */
    public function clearIndex(){
      return $this->_clear(8);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(8);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \utilpb\weddingConInfo
     */
    public function setIndex( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <sponsor> has a value
     *
     * @return boolean
     */
    public function hasSponsor(){
      return $this->_has(9);
    }
    
    /**
     * Clear <sponsor> value
     *
     * @return \utilpb\weddingConInfo
     */
    public function clearSponsor(){
      return $this->_clear(9);
    }
    
    /**
     * Get <sponsor> value
     *
     * @return int
     */
    public function getSponsor(){
      return $this->_get(9);
    }
    
    /**
     * Set <sponsor> value
     *
     * @param int $value
     * @return \utilpb\weddingConInfo
     */
    public function setSponsor( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <sex> has a value
     *
     * @return boolean
     */
    public function hasSex(){
      return $this->_has(10);
    }
    
    /**
     * Clear <sex> value
     *
     * @return \utilpb\weddingConInfo
     */
    public function clearSex(){
      return $this->_clear(10);
    }
    
    /**
     * Get <sex> value
     *
     * @return int
     */
    public function getSex(){
      return $this->_get(10);
    }
    
    /**
     * Set <sex> value
     *
     * @param int $value
     * @return \utilpb\weddingConInfo
     */
    public function setSex( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <weddingLv> has a value
     *
     * @return boolean
     */
    public function hasWeddingLv(){
      return $this->_has(11);
    }
    
    /**
     * Clear <weddingLv> value
     *
     * @return \utilpb\weddingConInfo
     */
    public function clearWeddingLv(){
      return $this->_clear(11);
    }
    
    /**
     * Get <weddingLv> value
     *
     * @return int
     */
    public function getWeddingLv(){
      return $this->_get(11);
    }
    
    /**
     * Set <weddingLv> value
     *
     * @param int $value
     * @return \utilpb\weddingConInfo
     */
    public function setWeddingLv( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <gifeCnt> has a value
     *
     * @return boolean
     */
    public function hasGifeCnt(){
      return $this->_has(12);
    }
    
    /**
     * Clear <gifeCnt> value
     *
     * @return \utilpb\weddingConInfo
     */
    public function clearGifeCnt(){
      return $this->_clear(12);
    }
    
    /**
     * Get <gifeCnt> value
     *
     * @return int
     */
    public function getGifeCnt(){
      return $this->_get(12);
    }
    
    /**
     * Set <gifeCnt> value
     *
     * @param int $value
     * @return \utilpb\weddingConInfo
     */
    public function setGifeCnt( $value){
      return $this->_set(12, $value);
    }
  }
}

namespace utilpb {

  class commonUse extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.commonUse');

      // OPTIONAL INT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\commonUse
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \utilpb\commonUse
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace utilpb {

  class startCruise extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $retCode = null;
    
    /**  @var int */
    public $giftCnt = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.startCruise');

      // REQUIRED INT32 retCode = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "retCode";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 giftCnt = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "giftCnt";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <retCode> has a value
     *
     * @return boolean
     */
    public function hasRetCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <retCode> value
     *
     * @return \utilpb\startCruise
     */
    public function clearRetCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <retCode> value
     *
     * @return int
     */
    public function getRetCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <retCode> value
     *
     * @param int $value
     * @return \utilpb\startCruise
     */
    public function setRetCode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <giftCnt> has a value
     *
     * @return boolean
     */
    public function hasGiftCnt(){
      return $this->_has(2);
    }
    
    /**
     * Clear <giftCnt> value
     *
     * @return \utilpb\startCruise
     */
    public function clearGiftCnt(){
      return $this->_clear(2);
    }
    
    /**
     * Get <giftCnt> value
     *
     * @return int
     */
    public function getGiftCnt(){
      return $this->_get(2);
    }
    
    /**
     * Set <giftCnt> value
     *
     * @param int $value
     * @return \utilpb\startCruise
     */
    public function setGiftCnt( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class mutualInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $toast = null;
    
    /**  @var int */
    public $flower = null;
    
    /**  @var int */
    public $bless = null;
    
    /**  @var int */
    public $fireworks = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.mutualInfo');

      // OPTIONAL INT32 toast = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "toast";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 flower = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "flower";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 bless = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "bless";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 fireworks = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "fireworks";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <toast> has a value
     *
     * @return boolean
     */
    public function hasToast(){
      return $this->_has(1);
    }
    
    /**
     * Clear <toast> value
     *
     * @return \utilpb\mutualInfo
     */
    public function clearToast(){
      return $this->_clear(1);
    }
    
    /**
     * Get <toast> value
     *
     * @return int
     */
    public function getToast(){
      return $this->_get(1);
    }
    
    /**
     * Set <toast> value
     *
     * @param int $value
     * @return \utilpb\mutualInfo
     */
    public function setToast( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <flower> has a value
     *
     * @return boolean
     */
    public function hasFlower(){
      return $this->_has(2);
    }
    
    /**
     * Clear <flower> value
     *
     * @return \utilpb\mutualInfo
     */
    public function clearFlower(){
      return $this->_clear(2);
    }
    
    /**
     * Get <flower> value
     *
     * @return int
     */
    public function getFlower(){
      return $this->_get(2);
    }
    
    /**
     * Set <flower> value
     *
     * @param int $value
     * @return \utilpb\mutualInfo
     */
    public function setFlower( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <bless> has a value
     *
     * @return boolean
     */
    public function hasBless(){
      return $this->_has(3);
    }
    
    /**
     * Clear <bless> value
     *
     * @return \utilpb\mutualInfo
     */
    public function clearBless(){
      return $this->_clear(3);
    }
    
    /**
     * Get <bless> value
     *
     * @return int
     */
    public function getBless(){
      return $this->_get(3);
    }
    
    /**
     * Set <bless> value
     *
     * @param int $value
     * @return \utilpb\mutualInfo
     */
    public function setBless( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <fireworks> has a value
     *
     * @return boolean
     */
    public function hasFireworks(){
      return $this->_has(4);
    }
    
    /**
     * Clear <fireworks> value
     *
     * @return \utilpb\mutualInfo
     */
    public function clearFireworks(){
      return $this->_clear(4);
    }
    
    /**
     * Get <fireworks> value
     *
     * @return int
     */
    public function getFireworks(){
      return $this->_get(4);
    }
    
    /**
     * Set <fireworks> value
     *
     * @param int $value
     * @return \utilpb\mutualInfo
     */
    public function setFireworks( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class sendWeddingCard extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\ComposeID[]  */
    public $id = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.sendWeddingCard');

      // REPEATED MESSAGE id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \utilpb\sendWeddingCard
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @param int $idx
     * @return \utilpb\ComposeID
     */
    public function getId($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <id> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\sendWeddingCard
     */
    public function setId(\utilpb\ComposeID $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <id>
     *
     * @return \utilpb\ComposeID[]
     */
    public function getIdList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <id>
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\sendWeddingCard
     */
    public function addId(\utilpb\ComposeID $value){
     return $this->_add(1, $value);
    }
  }
}

namespace utilpb {

  class goldRankListInfo extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $money = null;
    
    /**  @var float */
    public $charId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.goldRankListInfo');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 money = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "money";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED DOUBLE charId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "charId";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \utilpb\goldRankListInfo
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \utilpb\goldRankListInfo
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <money> has a value
     *
     * @return boolean
     */
    public function hasMoney(){
      return $this->_has(2);
    }
    
    /**
     * Clear <money> value
     *
     * @return \utilpb\goldRankListInfo
     */
    public function clearMoney(){
      return $this->_clear(2);
    }
    
    /**
     * Get <money> value
     *
     * @return int
     */
    public function getMoney(){
      return $this->_get(2);
    }
    
    /**
     * Set <money> value
     *
     * @param int $value
     * @return \utilpb\goldRankListInfo
     */
    public function setMoney( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <charId> has a value
     *
     * @return boolean
     */
    public function hasCharId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <charId> value
     *
     * @return \utilpb\goldRankListInfo
     */
    public function clearCharId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <charId> value
     *
     * @return float
     */
    public function getCharId(){
      return $this->_get(3);
    }
    
    /**
     * Set <charId> value
     *
     * @param float $value
     * @return \utilpb\goldRankListInfo
     */
    public function setCharId( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class goldRankList extends \DrSlump\Protobuf\Message {

    /**  @var \utilpb\goldRankListInfo[]  */
    public $list = array();
    
    /**  @var \utilpb\ComposeID */
    public $idOne = null;
    
    /**  @var \utilpb\ComposeID */
    public $idTwo = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.goldRankList');

      // REPEATED MESSAGE list = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "list";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\utilpb\goldRankListInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE idOne = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "idOne";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE idTwo = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "idTwo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\utilpb\ComposeID';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <list> has a value
     *
     * @return boolean
     */
    public function hasList(){
      return $this->_has(1);
    }
    
    /**
     * Clear <list> value
     *
     * @return \utilpb\goldRankList
     */
    public function clearList(){
      return $this->_clear(1);
    }
    
    /**
     * Get <list> value
     *
     * @param int $idx
     * @return \utilpb\goldRankListInfo
     */
    public function getList($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <list> value
     *
     * @param \utilpb\goldRankListInfo $value
     * @return \utilpb\goldRankList
     */
    public function setList(\utilpb\goldRankListInfo $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <list>
     *
     * @return \utilpb\goldRankListInfo[]
     */
    public function getListList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <list>
     *
     * @param \utilpb\goldRankListInfo $value
     * @return \utilpb\goldRankList
     */
    public function addList(\utilpb\goldRankListInfo $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <idOne> has a value
     *
     * @return boolean
     */
    public function hasIdOne(){
      return $this->_has(2);
    }
    
    /**
     * Clear <idOne> value
     *
     * @return \utilpb\goldRankList
     */
    public function clearIdOne(){
      return $this->_clear(2);
    }
    
    /**
     * Get <idOne> value
     *
     * @return \utilpb\ComposeID
     */
    public function getIdOne(){
      return $this->_get(2);
    }
    
    /**
     * Set <idOne> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\goldRankList
     */
    public function setIdOne(\utilpb\ComposeID $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <idTwo> has a value
     *
     * @return boolean
     */
    public function hasIdTwo(){
      return $this->_has(3);
    }
    
    /**
     * Clear <idTwo> value
     *
     * @return \utilpb\goldRankList
     */
    public function clearIdTwo(){
      return $this->_clear(3);
    }
    
    /**
     * Get <idTwo> value
     *
     * @return \utilpb\ComposeID
     */
    public function getIdTwo(){
      return $this->_get(3);
    }
    
    /**
     * Set <idTwo> value
     *
     * @param \utilpb\ComposeID $value
     * @return \utilpb\goldRankList
     */
    public function setIdTwo(\utilpb\ComposeID $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class sendWeddingGold extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $moneyType = null;
    
    /**  @var int */
    public $moneyNum = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.sendWeddingGold');

      // REQUIRED INT32 moneyType = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "moneyType";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 moneyNum = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "moneyNum";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <moneyType> has a value
     *
     * @return boolean
     */
    public function hasMoneyType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <moneyType> value
     *
     * @return \utilpb\sendWeddingGold
     */
    public function clearMoneyType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <moneyType> value
     *
     * @return int
     */
    public function getMoneyType(){
      return $this->_get(1);
    }
    
    /**
     * Set <moneyType> value
     *
     * @param int $value
     * @return \utilpb\sendWeddingGold
     */
    public function setMoneyType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <moneyNum> has a value
     *
     * @return boolean
     */
    public function hasMoneyNum(){
      return $this->_has(2);
    }
    
    /**
     * Clear <moneyNum> value
     *
     * @return \utilpb\sendWeddingGold
     */
    public function clearMoneyNum(){
      return $this->_clear(2);
    }
    
    /**
     * Get <moneyNum> value
     *
     * @return int
     */
    public function getMoneyNum(){
      return $this->_get(2);
    }
    
    /**
     * Set <moneyNum> value
     *
     * @param int $value
     * @return \utilpb\sendWeddingGold
     */
    public function setMoneyNum( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace utilpb {

  class sendWeddingGoldRet extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $retCode = null;
    
    /**  @var int */
    public $moneyNum = null;
    
    /**  @var string */
    public $sceneId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.sendWeddingGoldRet');

      // REQUIRED INT32 retCode = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "retCode";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 moneyNum = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "moneyNum";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sceneId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "sceneId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <retCode> has a value
     *
     * @return boolean
     */
    public function hasRetCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <retCode> value
     *
     * @return \utilpb\sendWeddingGoldRet
     */
    public function clearRetCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <retCode> value
     *
     * @return int
     */
    public function getRetCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <retCode> value
     *
     * @param int $value
     * @return \utilpb\sendWeddingGoldRet
     */
    public function setRetCode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <moneyNum> has a value
     *
     * @return boolean
     */
    public function hasMoneyNum(){
      return $this->_has(2);
    }
    
    /**
     * Clear <moneyNum> value
     *
     * @return \utilpb\sendWeddingGoldRet
     */
    public function clearMoneyNum(){
      return $this->_clear(2);
    }
    
    /**
     * Get <moneyNum> value
     *
     * @return int
     */
    public function getMoneyNum(){
      return $this->_get(2);
    }
    
    /**
     * Set <moneyNum> value
     *
     * @param int $value
     * @return \utilpb\sendWeddingGoldRet
     */
    public function setMoneyNum( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <sceneId> has a value
     *
     * @return boolean
     */
    public function hasSceneId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <sceneId> value
     *
     * @return \utilpb\sendWeddingGoldRet
     */
    public function clearSceneId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <sceneId> value
     *
     * @return string
     */
    public function getSceneId(){
      return $this->_get(3);
    }
    
    /**
     * Set <sceneId> value
     *
     * @param string $value
     * @return \utilpb\sendWeddingGoldRet
     */
    public function setSceneId( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace utilpb {

  class invite extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $playOne = null;
    
    /**  @var string */
    public $playTwo = null;
    
    /**  @var string */
    public $sceneId = null;
    
    /**  @var int */
    public $weddingLv = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.invite');

      // OPTIONAL STRING playOne = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "playOne";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING playTwo = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "playTwo";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sceneId = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "sceneId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 weddingLv = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "weddingLv";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <playOne> has a value
     *
     * @return boolean
     */
    public function hasPlayOne(){
      return $this->_has(1);
    }
    
    /**
     * Clear <playOne> value
     *
     * @return \utilpb\invite
     */
    public function clearPlayOne(){
      return $this->_clear(1);
    }
    
    /**
     * Get <playOne> value
     *
     * @return string
     */
    public function getPlayOne(){
      return $this->_get(1);
    }
    
    /**
     * Set <playOne> value
     *
     * @param string $value
     * @return \utilpb\invite
     */
    public function setPlayOne( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <playTwo> has a value
     *
     * @return boolean
     */
    public function hasPlayTwo(){
      return $this->_has(2);
    }
    
    /**
     * Clear <playTwo> value
     *
     * @return \utilpb\invite
     */
    public function clearPlayTwo(){
      return $this->_clear(2);
    }
    
    /**
     * Get <playTwo> value
     *
     * @return string
     */
    public function getPlayTwo(){
      return $this->_get(2);
    }
    
    /**
     * Set <playTwo> value
     *
     * @param string $value
     * @return \utilpb\invite
     */
    public function setPlayTwo( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <sceneId> has a value
     *
     * @return boolean
     */
    public function hasSceneId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <sceneId> value
     *
     * @return \utilpb\invite
     */
    public function clearSceneId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <sceneId> value
     *
     * @return string
     */
    public function getSceneId(){
      return $this->_get(3);
    }
    
    /**
     * Set <sceneId> value
     *
     * @param string $value
     * @return \utilpb\invite
     */
    public function setSceneId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <weddingLv> has a value
     *
     * @return boolean
     */
    public function hasWeddingLv(){
      return $this->_has(4);
    }
    
    /**
     * Clear <weddingLv> value
     *
     * @return \utilpb\invite
     */
    public function clearWeddingLv(){
      return $this->_clear(4);
    }
    
    /**
     * Get <weddingLv> value
     *
     * @return int
     */
    public function getWeddingLv(){
      return $this->_get(4);
    }
    
    /**
     * Set <weddingLv> value
     *
     * @param int $value
     * @return \utilpb\invite
     */
    public function setWeddingLv( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace utilpb {

  class createScene extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $sceneId = null;
    
    /**  @var int */
    public $time = null;
    
    /**  @var int */
    public $playNum = null;
    
    /**  @var string */
    public $man = null;
    
    /**  @var string */
    public $woman = null;
    
    /**  @var int */
    public $weddingLv = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.createScene');

      // REQUIRED STRING sceneId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sceneId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 time = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 playNum = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "playNum";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING man = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "man";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING woman = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "woman";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 weddingLv = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "weddingLv";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sceneId> has a value
     *
     * @return boolean
     */
    public function hasSceneId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sceneId> value
     *
     * @return \utilpb\createScene
     */
    public function clearSceneId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sceneId> value
     *
     * @return string
     */
    public function getSceneId(){
      return $this->_get(1);
    }
    
    /**
     * Set <sceneId> value
     *
     * @param string $value
     * @return \utilpb\createScene
     */
    public function setSceneId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(2);
    }
    
    /**
     * Clear <time> value
     *
     * @return \utilpb\createScene
     */
    public function clearTime(){
      return $this->_clear(2);
    }
    
    /**
     * Get <time> value
     *
     * @return int
     */
    public function getTime(){
      return $this->_get(2);
    }
    
    /**
     * Set <time> value
     *
     * @param int $value
     * @return \utilpb\createScene
     */
    public function setTime( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <playNum> has a value
     *
     * @return boolean
     */
    public function hasPlayNum(){
      return $this->_has(3);
    }
    
    /**
     * Clear <playNum> value
     *
     * @return \utilpb\createScene
     */
    public function clearPlayNum(){
      return $this->_clear(3);
    }
    
    /**
     * Get <playNum> value
     *
     * @return int
     */
    public function getPlayNum(){
      return $this->_get(3);
    }
    
    /**
     * Set <playNum> value
     *
     * @param int $value
     * @return \utilpb\createScene
     */
    public function setPlayNum( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <man> has a value
     *
     * @return boolean
     */
    public function hasMan(){
      return $this->_has(4);
    }
    
    /**
     * Clear <man> value
     *
     * @return \utilpb\createScene
     */
    public function clearMan(){
      return $this->_clear(4);
    }
    
    /**
     * Get <man> value
     *
     * @return string
     */
    public function getMan(){
      return $this->_get(4);
    }
    
    /**
     * Set <man> value
     *
     * @param string $value
     * @return \utilpb\createScene
     */
    public function setMan( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <woman> has a value
     *
     * @return boolean
     */
    public function hasWoman(){
      return $this->_has(5);
    }
    
    /**
     * Clear <woman> value
     *
     * @return \utilpb\createScene
     */
    public function clearWoman(){
      return $this->_clear(5);
    }
    
    /**
     * Get <woman> value
     *
     * @return string
     */
    public function getWoman(){
      return $this->_get(5);
    }
    
    /**
     * Set <woman> value
     *
     * @param string $value
     * @return \utilpb\createScene
     */
    public function setWoman( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <weddingLv> has a value
     *
     * @return boolean
     */
    public function hasWeddingLv(){
      return $this->_has(6);
    }
    
    /**
     * Clear <weddingLv> value
     *
     * @return \utilpb\createScene
     */
    public function clearWeddingLv(){
      return $this->_clear(6);
    }
    
    /**
     * Get <weddingLv> value
     *
     * @return int
     */
    public function getWeddingLv(){
      return $this->_get(6);
    }
    
    /**
     * Set <weddingLv> value
     *
     * @param int $value
     * @return \utilpb\createScene
     */
    public function setWeddingLv( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace utilpb {

  class enterScene extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $sceneId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.enterScene');

      // OPTIONAL STRING sceneId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sceneId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sceneId> has a value
     *
     * @return boolean
     */
    public function hasSceneId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sceneId> value
     *
     * @return \utilpb\enterScene
     */
    public function clearSceneId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sceneId> value
     *
     * @return string
     */
    public function getSceneId(){
      return $this->_get(1);
    }
    
    /**
     * Set <sceneId> value
     *
     * @param string $value
     * @return \utilpb\enterScene
     */
    public function setSceneId( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace utilpb {

  class C2mFlyCould extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $sceneName = null;
    
    /**  @var int */
    public $sceneId = null;
    
    /**  @var int */
    public $posX = null;
    
    /**  @var int */
    public $posY = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'utilpb.C2mFlyCould');

      // REQUIRED STRING sceneName = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "sceneName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 sceneId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sceneId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 posX = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "posX";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 posY = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "posY";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <sceneName> has a value
     *
     * @return boolean
     */
    public function hasSceneName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <sceneName> value
     *
     * @return \utilpb\C2mFlyCould
     */
    public function clearSceneName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <sceneName> value
     *
     * @return string
     */
    public function getSceneName(){
      return $this->_get(1);
    }
    
    /**
     * Set <sceneName> value
     *
     * @param string $value
     * @return \utilpb\C2mFlyCould
     */
    public function setSceneName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sceneId> has a value
     *
     * @return boolean
     */
    public function hasSceneId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sceneId> value
     *
     * @return \utilpb\C2mFlyCould
     */
    public function clearSceneId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sceneId> value
     *
     * @return int
     */
    public function getSceneId(){
      return $this->_get(2);
    }
    
    /**
     * Set <sceneId> value
     *
     * @param int $value
     * @return \utilpb\C2mFlyCould
     */
    public function setSceneId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <posX> has a value
     *
     * @return boolean
     */
    public function hasPosX(){
      return $this->_has(3);
    }
    
    /**
     * Clear <posX> value
     *
     * @return \utilpb\C2mFlyCould
     */
    public function clearPosX(){
      return $this->_clear(3);
    }
    
    /**
     * Get <posX> value
     *
     * @return int
     */
    public function getPosX(){
      return $this->_get(3);
    }
    
    /**
     * Set <posX> value
     *
     * @param int $value
     * @return \utilpb\C2mFlyCould
     */
    public function setPosX( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <posY> has a value
     *
     * @return boolean
     */
    public function hasPosY(){
      return $this->_has(4);
    }
    
    /**
     * Clear <posY> value
     *
     * @return \utilpb\C2mFlyCould
     */
    public function clearPosY(){
      return $this->_clear(4);
    }
    
    /**
     * Get <posY> value
     *
     * @return int
     */
    public function getPosY(){
      return $this->_get(4);
    }
    
    /**
     * Set <posY> value
     *
     * @param int $value
     * @return \utilpb\C2mFlyCould
     */
    public function setPosY( $value){
      return $this->_set(4, $value);
    }
  }
}

